{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/images/go-vscode/start-debug.png","path":"images/go-vscode/start-debug.png","modified":0},{"_id":"source/images/go-vscode/go-extend.png","path":"images/go-vscode/go-extend.png","modified":0},{"_id":"source/images/go-vscode/debug.png","path":"images/go-vscode/debug.png","modified":0},{"_id":"source/images/default_avatar1.jpg","path":"images/default_avatar1.jpg","modified":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"source/CNAME","path":"CNAME","modified":0}],"Cache":[{"_id":"source/README.md","shasum":"255ad4e7c21a6883f61bdd58d298398e32500ea7","modified":1456670920000},{"_id":"source/404/index.md","shasum":"519c7f7858c12b5c921b2d1546eb3438bec73607","modified":1456670920000},{"_id":"source/CNAME","shasum":"d7c5400fce94deb5eb92bd0e45a7b1d28b824c4c","modified":1456670920000},{"_id":"source/about/index.md","shasum":"b1510ecd4f3208f363271f76bb4dae394350ff79","modified":1542811252723},{"_id":"source/about/index副本.md","shasum":"189dde3590ba087e4272a9db4a022041f4a68855","modified":1456670920000},{"_id":"source/categories/index.md","shasum":"449f53ceb1cff097e1416836bd3c339a0c95ad39","modified":1456670920000},{"_id":"source/favicon.ico","shasum":"e145393bba620d545bf0bc718d8afde70d5244ed","modified":1456670920000},{"_id":"source/googleacbe88ecc07eda71.html","shasum":"a7fe7c727c8ce17d7b79087c2425e79f65a0786b","modified":1463477257000},{"_id":"source/images/default_avatar1.jpg","shasum":"0487f298a5757494b578cb0c0d1775ade3b5bc4c","modified":1456670920000},{"_id":"source/images/avatar.jpeg","shasum":"9660b0f2f5698f2593ca4adf3a1e9651a5c31343","modified":1542726920667},{"_id":"source/tags/index.md","shasum":"34478bc69d4658512a576b2dc7e659e71d23fb5e","modified":1456670920000},{"_id":"source/images/go-vscode/debug.png","shasum":"270ae395d68343f35784e922f96266f35d1c1835","modified":1542731846013},{"_id":"source/images/go-vscode/go-extend.png","shasum":"7bd377a86c9777ee4405ddc5cfff56bbc16894e2","modified":1542730101109},{"_id":"source/images/go-vscode/start-debug.png","shasum":"e1604fd8f69f7ead2026aa7e1b22f0e24dbb27c0","modified":1542731507156},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/source/css/_mixins/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/source/css/_variables/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1453305838000},{"_id":"themes/next/README.md","shasum":"0b709591995001cd860384d6c189e51d91690714","modified":1453305838000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1453305838000},{"_id":"themes/next/_config.yml","shasum":"0f06059fac58c84c3cb3b6f9fbc7cd761e21cabc","modified":1542810896596},{"_id":"themes/next/_config_back.yml","shasum":"a6c44cff60417384b378435041fa5e349609eea8","modified":1453818244000},{"_id":"themes/next/bower.json","shasum":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1453305838000},{"_id":"themes/next/gulpfile.coffee","shasum":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1453305838000},{"_id":"themes/next/languages/de.yml","shasum":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1453305838000},{"_id":"themes/next/languages/default.yml","shasum":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1453305838000},{"_id":"themes/next/languages/en.yml","shasum":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1453305838000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1453305838000},{"_id":"themes/next/languages/pt.yml","shasum":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1453305838000},{"_id":"themes/next/languages/ru.yml","shasum":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1453305838000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1453305838000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1453305838000},{"_id":"themes/next/layout/_layout.swig","shasum":"4c752913837a1c1f9e89c8e4030718b1578145f1","modified":1453305838000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1453305838000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1453305838000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1453305838000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1453305838000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"0723351816bd6e1ffa0e037e4ffc0beecbdd9cd7","modified":1453305838000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"0674b9bf3103ca32e04f16c7f7a6adad7e32e011","modified":1504022718000},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"5ba14151b34af05c39bc16f03695a099d5c731ff","modified":1504022720000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"7edcc47b01b60e565b39b2baf3a87c20b61c7eaf","modified":1453305838000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1453305838000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1453305838000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"eefe2388ff3d424694045eda21346989b123977c","modified":1453305838000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1453305838000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"4286af7fe6eeab974e52d704a28290e7c7ed5490","modified":1453305838000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1453305838000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1453305838000},{"_id":"themes/next/layout/_scripts/boostrap.swig","shasum":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1453305838000},{"_id":"themes/next/layout/_scripts/commons.swig","shasum":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1453305838000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"2b8f8c63abfcc805fad42b1c174cf61b6233d345","modified":1453305838000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","shasum":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","shasum":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","shasum":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","shasum":"d79bd946f07b83b47926dd67bb9d40e652b94769","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","shasum":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","shasum":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","shasum":"10fbbafbd5deccccafd5128bdf387adf55496a4a","modified":1504021877000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","shasum":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1453305838000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","shasum":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1504022518000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","shasum":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1453305838000},{"_id":"themes/next/layout/_scripts/vendors.swig","shasum":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1453305838000},{"_id":"themes/next/layout/archive.swig","shasum":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1453305838000},{"_id":"themes/next/layout/category.swig","shasum":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1453305838000},{"_id":"themes/next/layout/index.swig","shasum":"38b1ad401b748965369296b86327d23082a1fe93","modified":1453305838000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1453305838000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1453305838000},{"_id":"themes/next/layout/tag.swig","shasum":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1453305838000},{"_id":"themes/next/package.json","shasum":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1453305838000},{"_id":"themes/next/scripts/filters/sticky.js","shasum":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1453305838000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1453305838000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1453305838000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"535fc542781021c4326dec24d8495cbb1387634a","modified":1453305838000},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1453305838000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"54ef223d6683ad9ed21b24e8091c4dd63001316f","modified":1453305838000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","shasum":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/comments.styl","shasum":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/buttons.styl","shasum":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/components.styl","shasum":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/header/header.styl","shasum":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","shasum":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","shasum":"5d189b059c0a475917d771b349582dacdd575951","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","shasum":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","shasum":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","shasum":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","shasum":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1453818272000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","shasum":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","shasum":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","shasum":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","shasum":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","shasum":"719e09bb2e8fb82183381fadb0708aa761f1e0b4","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","shasum":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","shasum":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","shasum":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","shasum":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","shasum":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","shasum":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/post/post.styl","shasum":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","shasum":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","shasum":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","shasum":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","shasum":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","shasum":"6533563b34241e5c73da68156aba89e880b93f53","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","shasum":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","shasum":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","shasum":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","shasum":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","shasum":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","shasum":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","shasum":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","shasum":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1453305838000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","shasum":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1453305838000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","shasum":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1453305838000},{"_id":"themes/next/source/css/_common/outline/outline.styl","shasum":"6fce199d83342aa9964449b8b8264772558336b9","modified":1453818272000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1453305838000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","shasum":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1453305838000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","shasum":"2432b833add17ddd35aad098bf300d3f951375d2","modified":1453818272000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","shasum":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1453305838000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1453305838000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","shasum":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1453305838000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"1631a430655eadb485574d1a9bedd49460988b11","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","shasum":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","shasum":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","shasum":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","shasum":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","shasum":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","shasum":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","shasum":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","shasum":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","shasum":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1453305838000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","shasum":"b28187c610bf5f05e27732f72c3486494689bbfe","modified":1453818272000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1453305838000},{"_id":"themes/next/source/css/_variables/Pisces.styl","shasum":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1453305838000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"72d1fe35024ea91ebfd0298d1fbc8df82abd4ce7","modified":1453305838000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1453305838000},{"_id":"themes/next/source/css/main.styl","shasum":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1453305838000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1453305838000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1453305838000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1453305838000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1453305838000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1453305838000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1453305838000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1453305838000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1453305838000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1453305838000},{"_id":"themes/next/source/images/quote-l.svg","shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1453305838000},{"_id":"themes/next/source/images/quote-r.svg","shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1453305838000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1453305838000},{"_id":"themes/next/source/js/src/affix.js","shasum":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1453305838000},{"_id":"themes/next/source/js/src/bootstrap.js","shasum":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1453305838000},{"_id":"themes/next/source/js/src/motion.js","shasum":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1453305838000},{"_id":"themes/next/source/js/src/schemes/pisces.js","shasum":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1453305838000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","shasum":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1453305838000},{"_id":"themes/next/source/js/src/scrollspy.js","shasum":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1453305838000},{"_id":"themes/next/source/js/src/utils.js","shasum":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1453305838000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1453305838000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1453305838000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1453305838000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1453305838000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1453305838000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"0189d278706509412bac4745f96c83984e1d59f4","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"895d50fa29759af7835256522e9dd7dac597765c","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1453305838000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","shasum":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1453305838000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","shasum":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1453305838000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1453305838000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1453305838000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1453305838000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1453305838000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1453305838000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1453305838000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1453305838000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1453305838000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1453305838000},{"_id":"source/_posts/golang/defer.md","shasum":"facb0b63b021bf63546d09c6dd2f38db7ce82168","modified":1556031668777},{"_id":"public/404/index.html","modified":1556030634662,"shasum":"0de139337c8bff35902e3b20534aa0fd7c5cbfea"},{"_id":"public/tags/index.html","modified":1556030634726,"shasum":"1c0a4293c5235b282e292d1dd7932c637574109a"},{"_id":"public/googleacbe88ecc07eda71.html","modified":1556030634769,"shasum":"ff7560a6d713a326644fa99ca2f063d0e2a9f22b"},{"_id":"public/categories/index.html","modified":1556030634814,"shasum":"4d449595aa82f7842859933c5d30b6ac59c97468"},{"_id":"public/about/index副本.html","modified":1556030634851,"shasum":"1c2cdf9ee2ac65e051f6b6e63257f4bbb872b4d9"},{"_id":"public/about/index.html","modified":1556030634887,"shasum":"03ebf83c52e30a1f2389a5ca94deb84a6feab413"},{"_id":"public/README.html","modified":1556030634928,"shasum":"c16d8554b9a75e95e4116f5cae67a72e96cdeac3"},{"_id":"public/2019/04/23/golang/golang-golang-defer/index.html","modified":1556030634996,"shasum":"c60f10133ebd11ef6c1f55a7ea3190bf08ac259d"},{"_id":"public/2018/11/20/go-ide-vscode/index.html","modified":1556030635076,"shasum":"26123cb708cef160e56e1229ab60c7494c2fcae5"},{"_id":"public/2018/03/30/java-bean/index.html","modified":1556030635137,"shasum":"c3685d0824ee2ea7ebf51b46668b4a13a355477f"},{"_id":"public/2016/10/14/php-config/index.html","modified":1556030635190,"shasum":"039d7fd4da9fa3fbb67d9ad61fc40cfd33dc215e"},{"_id":"public/2016/07/04/linux-find/index.html","modified":1556030635251,"shasum":"aceebb46f45230a6f0b16b1d4bc8f0c49cea1988"},{"_id":"public/2016/07/02/linux-nohup/index.html","modified":1556030635301,"shasum":"9768170da64ccae560302f4f7f683487dc6d1520"},{"_id":"public/2016/06/19/linux-lnmp/index.html","modified":1556030635358,"shasum":"0548aebf5a6d1d9021206b11f74843b6f006362c"},{"_id":"public/2016/06/10/mysql-on-duplice-key-update/index.html","modified":1556030635414,"shasum":"fa3caf12a1505e9089ff2bba01bcf30ab2a8dad1"},{"_id":"public/2016/05/22/mysql-strimg/index.html","modified":1556030635465,"shasum":"8235770a4b19766820f23e5f2f2821ac2fa77489"},{"_id":"public/2016/04/10/linux-curl/index.html","modified":1556030635520,"shasum":"4543b8415d0d783b1c469cff6a14d7570aa3a145"},{"_id":"public/2016/04/04/pattern-pub-sub/index.html","modified":1556030635575,"shasum":"8d83fdf1fd829a0de18ba0fae2824f9c751fd5b9"},{"_id":"public/2016/02/29/php-stream/index.html","modified":1556030635628,"shasum":"d2b4680497ddd4b40709d346269c9604345eaf79"},{"_id":"public/2016/02/16/php-bccomp/index.html","modified":1556030635681,"shasum":"cf0815b2f87a12070ce0a82c39757e92615a763b"},{"_id":"public/2016/02/13/linux-man/index.html","modified":1556030635734,"shasum":"1bcadf7f0978974e3c26ef5ea586d75034da6169"},{"_id":"public/2016/02/12/php-trait/index.html","modified":1556030635800,"shasum":"68952e54dd16d896aaf40ea4ab0f540d11cd2d7c"},{"_id":"public/2016/02/06/linux-ps/index.html","modified":1556030635857,"shasum":"f24b462ab6fd41d99ae787f612a8faa4d2f1e7b7"},{"_id":"public/2016/02/04/linux-lsof/index.html","modified":1556030635921,"shasum":"cb2594c7eb255a28c74f7598ad72d505fd506de6"},{"_id":"public/2016/01/27/brew-mongodb/index.html","modified":1556030635979,"shasum":"a021b771dd3d44d3952499bdb20552f9d44637bc"},{"_id":"public/2016/01/26/php-webserver/index.html","modified":1556030636030,"shasum":"ade67cc4f0fca395384cfb449742f35f45e2dd67"},{"_id":"public/2016/01/25/hexo-baido-analytics/index.html","modified":1556030636091,"shasum":"5b23072dc8d11b3fe763965b424412794679af92"},{"_id":"public/2016/01/20/http-redirect/index.html","modified":1556030636142,"shasum":"20756a87014bdfae38e428ebc5d82b8bdcbb20ff"},{"_id":"public/2016/01/18/redis-sortedSet/index.html","modified":1556030636203,"shasum":"7fffc351d708390c3d6bc2254cd4d4ea06f83c44"},{"_id":"public/2016/01/14/mysql-case/index.html","modified":1556030636261,"shasum":"f8716e7778ebadcf00d4cc4a8bb489b583bb1162"},{"_id":"public/2015/10/18/brew-mysql/index.html","modified":1556030636314,"shasum":"007a281e63bf38d319785d8a3b913439b7cd7a26"},{"_id":"public/2015/10/14/sublime-Encode/index.html","modified":1556030636381,"shasum":"ebeb19cd7c38bac977cf39a784dccdb221396283"},{"_id":"public/2015/10/11/hexo-2-theme/index.html","modified":1556030636455,"shasum":"f60d5d0b9455d00b32ba9cb70ffb0d416a808dfb"},{"_id":"public/2015/10/01/brew-token/index.html","modified":1556030636513,"shasum":"977036cab086e8123619ab2244fa53606dc4f328"},{"_id":"public/2015/09/24/mysql-modifySql/index.html","modified":1556030636576,"shasum":"00a4333f0fefa8d87ed038ebaf3cb9e50c6c201c"},{"_id":"public/2015/09/18/hexo-1-install/index.html","modified":1556030636627,"shasum":"de75af2181f89c4082203ceaf4855d422b3dbc91"},{"_id":"public/2015/08/14/js-ajaxJsonToString/index.html","modified":1556030636683,"shasum":"d1605bb0adfb21de64df06ea8fc6f739dd92b65c"},{"_id":"public/2015/07/29/php-HTTP-RAW-POST-DATA/index.html","modified":1556030636734,"shasum":"e6fd5f2bb756fef706d8677d07b25611bede198d"},{"_id":"public/2015/07/05/mysql-timeMethod/index.html","modified":1556030636792,"shasum":"c7e33e4c1c9c54aa295838a6b01491cf82e4a24e"},{"_id":"public/2015/04/11/php-call/index.html","modified":1556030636845,"shasum":"3aea67f847df806523713c96a07349133b01ccf9"},{"_id":"public/2015/01/11/mysql-distinct/index.html","modified":1556030636908,"shasum":"584533c024d6ebd799c519580bcc4c20e5d00650"},{"_id":"public/2015/01/09/php-sortArrByfield/index.html","modified":1556030636965,"shasum":"87f8736622a712d5a1d94cda68333cb83edb2cb1"},{"_id":"public/2014/12/28/php-authoload/index.html","modified":1556030637016,"shasum":"526a697cde3cac6ead36d5c1f2408e785f447449"},{"_id":"public/2014/12/28/js-ajax/index.html","modified":1556030637075,"shasum":"63b6f874fefeb0ce83da0ef9064d23ba5919d866"},{"_id":"public/2014/11/29/php-intMaxVal/index.html","modified":1556030637125,"shasum":"543dd0aab47cf0e9e20eef90bc7441d8cbc842d5"},{"_id":"public/2014/11/09/regex/index.html","modified":1556030637184,"shasum":"2ee8c68931de66a03d2b9d00b5e73d39576eb0fa"},{"_id":"public/2014/09/25/php-filePath/index.html","modified":1556030637244,"shasum":"8a36f5a1a15d18dca4ba95f8a2e04c1aea996fab"},{"_id":"public/2014/09/14/mysql-insertMoreThanOne/index.html","modified":1556030637303,"shasum":"249f5774923a14cd79efd90361aa4d8710d3d019"},{"_id":"public/2014/09/06/js-qrcode/index.html","modified":1556030637368,"shasum":"50fc2ff8e375a73adc2dd27d5d90a788d692787a"},{"_id":"public/2014/03/15/js-createElement/index.html","modified":1556030637435,"shasum":"0695938fa9bbf8a571c9c974000fa2e9b3809ddc"},{"_id":"public/archives/index.html","modified":1556030637502,"shasum":"4fe5be9c0b9b33a80faef1880abb5ee930421414"},{"_id":"public/archives/page/2/index.html","modified":1556030637570,"shasum":"a8c1a3258645630a5a3eaa3052c2f04b85f3bbec"},{"_id":"public/archives/page/3/index.html","modified":1556030637624,"shasum":"954bca220e50f28385d7bc9c7dd032afc49f150a"},{"_id":"public/archives/page/4/index.html","modified":1556030637672,"shasum":"4d8c205020079d079fd07bf8a5062b872747650e"},{"_id":"public/archives/page/5/index.html","modified":1556030637724,"shasum":"b7c24e5cd67f9bea05aff87bc6e9b44369039109"},{"_id":"public/archives/page/6/index.html","modified":1556030637775,"shasum":"62ac37a9a25407686994e328d7740231eac6cb81"},{"_id":"public/archives/page/7/index.html","modified":1556030637841,"shasum":"4b696caa38f1d0ad667db7cbe6b0cc2fefe9ffa3"},{"_id":"public/archives/page/8/index.html","modified":1556030637890,"shasum":"8ce830a2346d5e8207e10909cb2380dacc138493"},{"_id":"public/archives/page/9/index.html","modified":1556030637938,"shasum":"e08e0a4c9ffa3ddf1e2333d3ae370d32b5143dcf"},{"_id":"public/archives/2014/index.html","modified":1556030637981,"shasum":"476855c1c79345766686a3ab779a6919a50b141a"},{"_id":"public/archives/2014/page/2/index.html","modified":1556030638027,"shasum":"1ccbd590ca7aecd62174d797d32831f6d81fa13c"},{"_id":"public/archives/2014/03/index.html","modified":1556030638071,"shasum":"7e25299f03c71cda5a4e957347050feff38b1679"},{"_id":"public/archives/2014/09/index.html","modified":1556030638109,"shasum":"30bc934330babf094da87920c4896ff5ee3a33ae"},{"_id":"public/archives/2014/11/index.html","modified":1556030638149,"shasum":"2172a9d089603ec4498ac653eca8bae043246363"},{"_id":"public/archives/2014/12/index.html","modified":1556030638189,"shasum":"16eb8079ad6447f033fb99bf3ddf0e726da8dc6c"},{"_id":"public/archives/2015/index.html","modified":1556030638235,"shasum":"d21563ce4b7a2a3566540392a4ac3359574f1ddb"},{"_id":"public/archives/2015/page/2/index.html","modified":1556030638275,"shasum":"357e6df9a7f1356040ce6b5617dd930dbfffbfd8"},{"_id":"public/archives/2015/page/3/index.html","modified":1556030638319,"shasum":"7901dcc0f67073f37654bd6577b6ab40fdf64ce3"},{"_id":"public/archives/2015/01/index.html","modified":1556030638355,"shasum":"3935e5a736636dc398ceb1fd228c6ebbb5f82ded"},{"_id":"public/archives/2015/04/index.html","modified":1556030638390,"shasum":"72c7f1da4daa8d84e48da761b596d2242e0e4c6d"},{"_id":"public/archives/2015/07/index.html","modified":1556030638432,"shasum":"cc36b24fed557ab297f4e054a90b89e65c9f9b45"},{"_id":"public/archives/2015/08/index.html","modified":1556030638472,"shasum":"c63a875aa7cc643482f0146525919d6b716dc28d"},{"_id":"public/archives/2015/09/index.html","modified":1556030638515,"shasum":"fdef329bb4cb74ec08e3b9af3ad8b4dfb852b93c"},{"_id":"public/archives/2015/10/index.html","modified":1556030638557,"shasum":"88089638f243135db1e07e3186c5a06a679fba41"},{"_id":"public/archives/2016/index.html","modified":1556030638608,"shasum":"8486581036c0bc6d5c4773cddbf3b561e7ae9076"},{"_id":"public/archives/2016/page/2/index.html","modified":1556030638648,"shasum":"1beedceb29023f54c0741b2b96ddf6479aeba166"},{"_id":"public/archives/2016/page/3/index.html","modified":1556030638687,"shasum":"d5d64c4a5d7bf9c0de85892eb0823a55c4731358"},{"_id":"public/archives/2016/page/4/index.html","modified":1556030638732,"shasum":"126fe8d6311820473a55d4829b5e58e1cabfb428"},{"_id":"public/archives/2016/01/index.html","modified":1556030638773,"shasum":"4dbd802564c45e81e8c4b921cae7796375376435"},{"_id":"public/archives/2016/01/page/2/index.html","modified":1556030638812,"shasum":"5c357aa870f812fa51653e36fa065f332dd20b2d"},{"_id":"public/archives/2016/02/index.html","modified":1556030638861,"shasum":"3966f43958b624242c5fd8fcc61f6b5a17939cde"},{"_id":"public/archives/2016/02/page/2/index.html","modified":1556030638903,"shasum":"ea1026bb77be4e6402f0b9df033715d027ebe5ca"},{"_id":"public/archives/2016/04/index.html","modified":1556030638939,"shasum":"489629adf25eb9fff990890c6301a3a828ef91d2"},{"_id":"public/archives/2016/05/index.html","modified":1556030638986,"shasum":"75e3f98ba2d2d1e6ac81115920c0b05a9128c14b"},{"_id":"public/archives/2016/06/index.html","modified":1556030639027,"shasum":"4b99752068411a3b8ad92160856538811acfcb2f"},{"_id":"public/archives/2016/07/index.html","modified":1556030639069,"shasum":"29db18c7465850bbddc899aa441365a0afd10615"},{"_id":"public/archives/2016/10/index.html","modified":1556030639122,"shasum":"bf39bcbaee42be0f1badd9717d084170e6a10279"},{"_id":"public/archives/2018/index.html","modified":1556030639163,"shasum":"2557149ba31ad41d570d352c8328b93790ac11ce"},{"_id":"public/archives/2018/03/index.html","modified":1556030639211,"shasum":"00aa584f6fc140debf795b9274348304ff73a9f6"},{"_id":"public/archives/2018/11/index.html","modified":1556030639257,"shasum":"5dd904d0dd19e081673b6873113de115b9cfe45f"},{"_id":"public/archives/2019/index.html","modified":1556030639294,"shasum":"c70e9bfc584f7a3592e618a8c81246114b8c13c6"},{"_id":"public/archives/2019/04/index.html","modified":1556030639337,"shasum":"31c709695c83e17466c20e6af1a37d3c333d3666"},{"_id":"public/categories/工作记录/index.html","modified":1556030639383,"shasum":"2fe7e7735687736c2b2e2ad75200904814066ed1"},{"_id":"public/categories/regEx/index.html","modified":1556030639421,"shasum":"3fb16bbe0980394018f5e06627b172671c1d1d48"},{"_id":"public/categories/redis/index.html","modified":1556030639455,"shasum":"90c70762b05c2b7758f067866b36313208122808"},{"_id":"public/categories/php/index.html","modified":1556030639512,"shasum":"daae809044167e7975463c45e09967430673203b"},{"_id":"public/categories/php/page/2/index.html","modified":1556030639565,"shasum":"4972ef88784615ca7e9e619c6924a2e12bda2a2b"},{"_id":"public/categories/code/index.html","modified":1556030639619,"shasum":"9a39941bcadc1f42f18e45524595ef729fe653a8"},{"_id":"public/categories/pattern/index.html","modified":1556030639666,"shasum":"9f250d01f4e92ae4479d0e68ffee4f5def0c5578"},{"_id":"public/categories/mysql/index.html","modified":1556030639717,"shasum":"7e2045c1386ce38b55cfa7ca7582ae7c930f56d6"},{"_id":"public/categories/mysql/page/2/index.html","modified":1556030639767,"shasum":"12faba81dc2b6aebb15a069503840e28c42c8244"},{"_id":"public/categories/linux/index.html","modified":1556030639819,"shasum":"e44ed33ac1a86b6fa9183f849c7075ce15c62cef"},{"_id":"public/categories/linux/page/2/index.html","modified":1556030639856,"shasum":"88db8563f769ea832973682f7aee565d57368e62"},{"_id":"public/categories/javascript/index.html","modified":1556030639901,"shasum":"0ea6307155c2e4a94b50ae5d48ea1f4cd64b10ef"},{"_id":"public/categories/java/index.html","modified":1556030639945,"shasum":"efc5ab0f0f65f1c3f9e79f71a8fce7cf049874bc"},{"_id":"public/categories/http/index.html","modified":1556030639987,"shasum":"de0316f5a3a1c7aa5c2889c78a6d819b7525b936"},{"_id":"public/categories/node/index.html","modified":1556030640042,"shasum":"425f87be9239f8d640abd81f8168e016f801d82f"},{"_id":"public/categories/mongodb/index.html","modified":1556030640092,"shasum":"80b444eda773290bc545e266b554f2957e9ab028"},{"_id":"public/atom.xml","modified":1556030640100,"shasum":"9580bfe200d977d1c19ce8c3f67b4d117d1593b1"},{"_id":"public/index.html","modified":1556030640191,"shasum":"fdab93f89507ad0ed3be9e252472f31530718d14"},{"_id":"public/page/2/index.html","modified":1556030640260,"shasum":"a6a2418d5a34e25e539dfa3df70822a8a078b979"},{"_id":"public/page/3/index.html","modified":1556030640324,"shasum":"7d01eee33ae8d254277de9349fd8ba7d648e82c5"},{"_id":"public/page/4/index.html","modified":1556030640378,"shasum":"be43fb318588e7448652e4eb264c53d875f39137"},{"_id":"public/page/5/index.html","modified":1556030640446,"shasum":"420c7a4707b2218339d4a46e34ae14b5cd5ab41d"},{"_id":"public/page/6/index.html","modified":1556030640505,"shasum":"354feba08e88c2dabc7d44d5962f591a59051f9c"},{"_id":"public/page/7/index.html","modified":1556030640569,"shasum":"f13d1e8fd13b933360c99a098e9bda9817ffa1c4"},{"_id":"public/page/8/index.html","modified":1556030640626,"shasum":"7336666c32c37bc66e92920d812d2fe913ff34a8"},{"_id":"public/page/9/index.html","modified":1556030640696,"shasum":"85a3c47ace2bb3920c4931581667b85cc347baef"},{"_id":"public/tags/sublime/index.html","modified":1556030640734,"shasum":"a704582860e8d855fc201a48157403c31d1822f3"},{"_id":"public/tags/regEx/index.html","modified":1556030640778,"shasum":"adb6e7d7134ccb371220bbef21883c7a1239a21b"},{"_id":"public/tags/redis/index.html","modified":1556030640834,"shasum":"6846fc1a2b4c40ac3eb276344d2e5fb47c22d8ad"},{"_id":"public/tags/php/index.html","modified":1556030640876,"shasum":"490b90b6baa90fed003bd3ff296be5216574460f"},{"_id":"public/tags/php/page/2/index.html","modified":1556030640935,"shasum":"38ff42c347d32a8d0f02e47170ad207fe0e34a7c"},{"_id":"public/tags/php/page/3/index.html","modified":1556030640978,"shasum":"9884da6d5a754adbd95504d8b1846e20e891ffb2"},{"_id":"public/tags/intval/index.html","modified":1556030641018,"shasum":"32a9f3ae7dc14a9033746c8d1f4226adaeaf39af"},{"_id":"public/tags/pattern/index.html","modified":1556030641074,"shasum":"99901e1387b9eabe72991fc23643a8dac5fe9fef"},{"_id":"public/tags/mysql/index.html","modified":1556030641122,"shasum":"db6fad76e0eb238f2926c8bf31e090b679fb5554"},{"_id":"public/tags/mysql/page/2/index.html","modified":1556030641161,"shasum":"b5f3e4f20a034607e116fe2ac187ff502b0f7eab"},{"_id":"public/tags/distinct/index.html","modified":1556030641209,"shasum":"dde2e652acba0e15bdb27d41734f7da75293a8c8"},{"_id":"public/tags/linux/index.html","modified":1556030641249,"shasum":"fd5419c7f0582621ff1d6e8047e60253360531c0"},{"_id":"public/tags/linux/page/2/index.html","modified":1556030641287,"shasum":"0017c834a6742be189180d3bd870a88c8c3b62da"},{"_id":"public/tags/javascript/index.html","modified":1556030641335,"shasum":"a1b55b05d1ca10b40ca804b4fe3295b25d8e255d"},{"_id":"public/tags/java/index.html","modified":1556030641373,"shasum":"96d169cad2a2361759d025d4745940eb42d15686"},{"_id":"public/tags/http/index.html","modified":1556030641419,"shasum":"7093152fffc1922dbaa31209a6947b2d42337ef4"},{"_id":"public/tags/hexo/index.html","modified":1556030641463,"shasum":"50942c33a4a9a269e0ff9566c8fd036397e71798"},{"_id":"public/tags/go/index.html","modified":1556030641506,"shasum":"65f0c5ef2a6fbcb6399960feee3b91ec497436b2"},{"_id":"public/tags/ide/index.html","modified":1556030641552,"shasum":"6c4fee60d737216099865601efac2dcfd4bc4228"},{"_id":"public/tags/homebrew/index.html","modified":1556030641601,"shasum":"4f6db0c9815cb2ce116e35bf4d1ee62671c7814f"},{"_id":"public/tags/brew/index.html","modified":1556030641652,"shasum":"55d8c689a2a6d5c2e90041bc12e52cdf82c34596"},{"_id":"public/tags/mongodb/index.html","modified":1556030641684,"shasum":"2986d8d65ed00c08d3fb5e93390f5592af818608"},{"_id":"source/_posts/macos/brew-token.md","shasum":"008c877c5fd25c358f2b68e181a3e02425873d94","modified":1456670920000},{"_id":"source/_posts/mongo/brew-mongodb.md","shasum":"aed74210821f1edfa9f20d3a14c1ec39aa9ac5d7","modified":1456670920000},{"_id":"source/_posts/mysql/brew-mysql.md","shasum":"3f1d54d57141408db28dee1ab3a3579effcea386","modified":1456670920000},{"_id":"source/_posts/HTTP/http-redirect.md","shasum":"6c7d7f437a7b9648c32bbdafe020800309bcdbd5","modified":1456670920000},{"_id":"source/_posts/java/java-bean.md","shasum":"678b2ab891b84ce2c866f5e68a566cce663aee3e","modified":1554306890227},{"_id":"source/_posts/js/js-ajax.md","shasum":"59d82808b4a1c0f9967451756d01eae5a7d54d85","modified":1456670920000},{"_id":"source/_posts/js/js-ajaxJsonToString.md","shasum":"724d29da74192cd1a604ee753d342a39a834f112","modified":1456670920000},{"_id":"source/_posts/js/js-createElement.md","shasum":"8860437458e84935f446f3dffd2020f80b525a05","modified":1456670920000},{"_id":"source/_posts/js/js-qrcode.md","shasum":"f4f1cf80a315530c6e97ea64312cf0eb92b07f04","modified":1456670920000},{"_id":"source/_posts/linux/linux-curl.md","shasum":"d78de91b6a7ceb945cceda11d3bd8b9127d7dcce","modified":1461596350000},{"_id":"source/_posts/linux/linux-find.md","shasum":"88e1686dd7514a82f52e178fa3b9d68162999705","modified":1468147274000},{"_id":"source/_posts/linux/linux-lnmp.md","shasum":"b19aa143e727ffe804d1f11de366aea8fbbc8c8d","modified":1467478715000},{"_id":"source/_posts/linux/linux-lsof.md","shasum":"58bde492477d02c148529e49127243b8545b2dce","modified":1456670920000},{"_id":"source/_posts/linux/linux-man.md","shasum":"585fea6b8bfbaf49f26de6023d44ecd1881ac9c8","modified":1456670920000},{"_id":"source/_posts/linux/linux-nohup.md","shasum":"2ad90d56a768a5306f0bbfc3ca9b5afa1f123f7b","modified":1467478186000},{"_id":"source/_posts/linux/linux-ps.md","shasum":"e7e3b3e83c3d8486bce6a7a84e5f6689fff9cd8b","modified":1456670920000},{"_id":"source/_posts/mysql/mysql-case.md","shasum":"2f0cbcffb8632713953c870a1f6e16c389db68e2","modified":1456670920000},{"_id":"source/_posts/mysql/mysql-distinct.md","shasum":"925fb0bec75ff6a721d64733ac3ae3ac90b41880","modified":1456670920000},{"_id":"source/_posts/mysql/mysql-insertMoreThanOne.md","shasum":"84189fff496956143008550baab361d3c3ef62ca","modified":1456670920000},{"_id":"source/_posts/mysql/mysql-modifySql.md","shasum":"d4f4d1c3064054b2afd5f675844b100b5fc78518","modified":1464321167000},{"_id":"source/_posts/mysql/mysql-on-duplice-key-update.md","shasum":"37f81f4ce861aaf4f99a037ee2c75f8325006f16","modified":1465632690000},{"_id":"source/_posts/mysql/mysql-strimg.md","shasum":"2b441b299674ac31f24f1ac3ac66f3864fbf2074","modified":1463932818000},{"_id":"source/_posts/mysql/mysql-timeMethod.md","shasum":"d799e03357d671a46f649a7903f6fc4d91d0a8af","modified":1456670920000},{"_id":"source/_posts/patterns/pattern-pub-sub.md","shasum":"2e8c71bb641dafdfda008936d46788fdf25532d2","modified":1459761961000},{"_id":"source/_posts/php/php-authoload.md","shasum":"18713ca5c5d1cfed508ad9d16988829ebf0bcbbf","modified":1456670920000},{"_id":"source/_posts/php/php-bccomp.md","shasum":"57b8234e1656724b171bc86931f8bd4dd7dbc92e","modified":1456670920000},{"_id":"source/_posts/php/php-call.md","shasum":"7bc319e81bd1e98fe6d2272e34c09a294d5e8de3","modified":1456670920000},{"_id":"source/_posts/php/php-config.md","shasum":"c4f2840126db0e0435515ea7b05f83fb5fbea377","modified":1476438417000},{"_id":"source/_posts/php/php-filePath.md","shasum":"ae14a5b626fd184dcb1582cb2ad6fd0c8ebb7533","modified":1456670920000},{"_id":"source/_posts/php/php-HTTP-RAW-POST-DATA.md","shasum":"3763f2dc7444cf554119c0bdee1850476028652f","modified":1456670920000},{"_id":"source/_posts/php/php-intMaxVal.md","shasum":"5d528c6ec41b9e0bc45f141a8d26a3a99059f208","modified":1456670920000},{"_id":"source/_posts/php/php-sortArrByfield.md","shasum":"6570aa8c138d6ef7d32c15bfc16178faa15c88a1","modified":1456670920000},{"_id":"source/_posts/php/php-stream.md","shasum":"2eb8673e30fcbdae93df1cf03172f37047b14800","modified":1456756587000},{"_id":"source/_posts/php/php-trait.md","shasum":"b454e86bcf644bd4975e21ecb94bb5575b2339d1","modified":1456670920000},{"_id":"source/_posts/php/php-webserver.md","shasum":"ffd736ec158a2a0fce7652f4ca050c900cc9a546","modified":1456670920000},{"_id":"source/_posts/regEx/regex.md","shasum":"e29882c8399d758e240a80315f74bc0f9d2a935f","modified":1456670920000},{"_id":"source/_posts/redis/redis-sortedSet.md","shasum":"36ea717c694afc05a4365c34b2c87e23798d7f91","modified":1456670920000},{"_id":"source/_posts/IDE/vscode/go-ide-vscode.md","shasum":"81d51047a549de9a5eb3995ad356e300c915c671","modified":1542731944318},{"_id":"source/_posts/IDE/sublime/sublime-Encode.md","shasum":"eafb6953f1eddf0d0225199e71a835b83870d3a8","modified":1456670920000},{"_id":"source/_posts/js/hexo/hexo-1-install.md","shasum":"5666e1d9e48923faac6e420692c61c265dcc1397","modified":1456670920000},{"_id":"source/_posts/js/hexo/hexo-baido-analytics.md","shasum":"6804cf5504e51b576b5e1b04412dfec115529437","modified":1456670920000},{"_id":"source/_posts/js/hexo/hexo-2-theme.md","shasum":"4f6aebed18ce7c2ad2a31207330b4c38a07d8ca5","modified":1456670920000},{"_id":"source/_posts/git/split-git-repository.md","shasum":"76ab21901c4531c7a98ec02b8e937df75aac7cdf","modified":1625411117279}],"Category":[{"name":"工作记录","_id":"cjutw4mav0007xbv8l70j723p"},{"name":"regEx","_id":"cjutw4mb0000cxbv8gjpoim8w"},{"name":"redis","_id":"cjutw4mb2000hxbv8qn0sseqb"},{"name":"php","_id":"cjutw4mb4000mxbv85tb20f02"},{"name":"code","_id":"cjutw4mbd000xxbv8evjnngls"},{"name":"pattern","_id":"cjutw4mbz001nxbv8qujioi63"},{"name":"mysql","_id":"cjutw4mc2001txbv8565zypo8"},{"name":"linux","_id":"cjutw4mch002ixbv8dz4xkqmg"},{"name":"javascript","_id":"cjutw4mcx0035xbv8bl06joa7"},{"name":"java","_id":"cjutw4md5003jxbv87hgzrys2"},{"name":"http","_id":"cjutw4md9003oxbv8halimzkf"},{"name":"node","_id":"cjutw4mda003txbv8ygf1pvwi"},{"name":"mongodb","_id":"cjutw4mds004kxbv853mljenc"},{"name":"golang","_id":"cjutwh9t500012sv8jq7vlbzr"},{"name":"git","_id":"ckqpb9syk0004ngv8ij3rle1y"}],"Data":[],"Page":[{"title":"404","date":"2015-12-18T02:04:17.000Z","_content":"\n```\n      this is 404 page\n```","source":"404/index.md","raw":"title: 404\ndate: 2015-12-18 10:04:17\n---\n\n```\n      this is 404 page\n```","updated":"2016-02-28T14:48:40.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjutw4m9p0000xbv8xbh66y00"},{"title":"tags","date":"2015-12-17T03:05:18.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-17 11:05:18\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-02-28T14:48:40.000Z","path":"tags/index.html","layout":"page","_id":"cjutw4maj0001xbv8zu8yzsn2"},{"_content":"google-site-verification: googleacbe88ecc07eda71.html","source":"googleacbe88ecc07eda71.html","raw":"google-site-verification: googleacbe88ecc07eda71.html","date":"2016-05-17T09:27:37.000Z","updated":"2016-05-17T09:27:37.000Z","path":"googleacbe88ecc07eda71.html","title":"","comments":1,"layout":"page","_id":"cjutw4mal0002xbv8nlpe6iyq"},{"title":"categories","date":"2015-12-17T03:05:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-17 11:05:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-02-28T14:48:40.000Z","path":"categories/index.html","layout":"page","_id":"cjutw4mam0003xbv8tzsw7g9u"},{"title":"about","date":"2015-12-17T03:04:18.000Z","comments":0,"_content":"\n![jcsama](/images/jcsama1.jpg)\n\n* Name: Jceee Chan\n* php coder,Mac developer\n* E-mail:jceee@foxmail.com\n* nginx,mysql,php,memcache,redis,composer,mongo\n* git,svn\n* sublime,sequelPro,SourceTree,Iterm\n","source":"about/index副本.md","raw":"title: about\ndate: 2015-12-17 11:04:18\ncomments: false\n\n---\n\n![jcsama](/images/jcsama1.jpg)\n\n* Name: Jceee Chan\n* php coder,Mac developer\n* E-mail:jceee@foxmail.com\n* nginx,mysql,php,memcache,redis,composer,mongo\n* git,svn\n* sublime,sequelPro,SourceTree,Iterm\n","updated":"2016-02-28T14:48:40.000Z","path":"about/index副本.html","layout":"page","_id":"cjutw4man0004xbv8gach8tzo"},{"title":"about","date":"2015-12-17T03:04:18.000Z","comments":0,"_content":"\n* Jceee Chan\n* 喜欢养生的爆肝程序猿\n* 天蝎座\n* 肥宅\n","source":"about/index.md","raw":"title: about\ndate: 2015-12-17 11:04:18\ncomments: false\n\n---\n\n* Jceee Chan\n* 喜欢养生的爆肝程序猿\n* 天蝎座\n* 肥宅\n","updated":"2018-11-21T14:40:52.723Z","path":"about/index.html","layout":"page","_id":"cjutw4mao0005xbv8zm19k6f5"},{"_content":"##  jceee blog\n","source":"README.md","raw":"##  jceee blog\n","date":"2016-02-28T14:48:40.000Z","updated":"2016-02-28T14:48:40.000Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjutw4mdt004pxbv8zxytrdjz"}],"Post":[{"title":"GO学习笔记--defer篇","date":"2019-04-23T14:33:16.000Z","_content":"\n# 什么是defer\n\n# defer特别\n\n栈，后进先出\n\n# 什么场景下用defer\n\n程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。\n\n```\nfunc main (){\n\tf,err := os.Open(\"test.txt\")\n\tif err != nil {\n\t\tfmt.Print(err, \"\\n\")\n\t\treturn\n\t}\n\tdefer func() {\n\t\tfmt.Print(\"do close \\n\")\n\t\tcloseErr := f.Close()\n\t\tif closeErr != nil {\n\t\t\tfmt.Print(\"close file err \\n\")\n\t\t\treturn\n\t\t}\n\t}()\n\tfmt.Print(\"main end \\n\")\n}\n```\n\n# defer原理\n\n每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.\ndefer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。\n","source":"_posts/golang/defer.md","raw":"title: GO学习笔记--defer篇\ndate: 2019-04-23 22:33:16 \ntags: [golang,defer]  \ncategories: golang\n---\n\n# 什么是defer\n\n# defer特别\n\n栈，后进先出\n\n# 什么场景下用defer\n\n程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。\n\n```\nfunc main (){\n\tf,err := os.Open(\"test.txt\")\n\tif err != nil {\n\t\tfmt.Print(err, \"\\n\")\n\t\treturn\n\t}\n\tdefer func() {\n\t\tfmt.Print(\"do close \\n\")\n\t\tcloseErr := f.Close()\n\t\tif closeErr != nil {\n\t\t\tfmt.Print(\"close file err \\n\")\n\t\t\treturn\n\t\t}\n\t}()\n\tfmt.Print(\"main end \\n\")\n}\n```\n\n# defer原理\n\n每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.\ndefer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。\n","slug":"golang/defer","published":1,"updated":"2019-04-23T15:01:08.777Z","_id":"cjutwh9t100002sv8gdqoa69m","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"正则表达式","date":"2014-11-09T14:57:00.000Z","_content":"\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","source":"_posts/regex.md","raw":"title: 正则表达式\ndate: 2014-11-09 22:57\ntags: regEx\ncategories: regEx\n\n---\n\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","slug":"regex","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutwh9u2000f2sv8nu1c8413","sticky":0},{"title":"根据某字段对多维数组进行排序","date":"2015-01-09T13:06:35.000Z","_content":"\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php-sortArrByfield.md","raw":"title: 根据某字段对多维数组进行排序\ndate: 2015-01-09 21:06:35\ncategories: code\ntags: php\n\n---\n\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php-sortArrByfield","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutwh9ud000t2sv8ssq1xl17","sticky":0},{"title":"int值边界值","date":"2014-11-29T10:24:00.000Z","_content":"\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","source":"_posts/php-intMaxVal.md","raw":"title: int值边界值\ndate: 2014-11-29 18:24\ntags: intval\ncategories: php\n\n---\n\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","slug":"php-intMaxVal","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjutwh9uh000z2sv8pqi9i8wa","sticky":0},{"title":"修改用brew安装的mysql配置","date":"2015-10-18T07:35:33.000Z","_content":"\n## 用brew安装mysql\n\n[brew](http://brew.sh/)是OS X上的包管理工具，类型linux上的apt-get, yum等\n\n### 首先，需要先装好brew\n\n```\n\t$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### mysql install\n\n安装：\n\n```\n\t$ brew install mysql\n```\n\n设置开机启动:\n \n```\n \t$ ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n \t$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n \n## 修改mysql配置  \n \n### 查看配置文件引用的路径\n \n```\n\t$ mysqld --help --verbose | more\n```\n \n通过这命令，可以看出mysql默认调用的配置文件路径：\n\n```\n\tDefault options are read from the following files in the given order:\n\t/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n```\n\n### 创建配置文件 \n\nbrew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。\n先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  \n\n```\n\t$ ls $(brew --prefix mysql)/support-files/my-*\n```\n   \n复制到引用目录：\n\n```\n\t$ cp /usr/local/opt/mysql/support-files/my-default.cnf /etc/my.cnf\n```\n\t\n然后就可以按自己需求修改配置了\n\n## mysql启动命令\n\n重启mysql,  unload 是关闭， load是启动\n\n```\n\t$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n\t$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n\n为了文件管理可以把命令alias下：\n\n```\n\t$ vim ~/.bash_aliases\n```\n\n输入以下内容，保存\n\n```\n\talias mysql.start=\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.stop=\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.restart='mysql.stop && mysql.start'  \n```\n\n保存后添加到.bash_profile文件中\n\n```\n\techo \"[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases\" >> ~/.bash_profile     \n\tsource ~/.bash_profile\n```\n\n这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了\n\n```\n\t$ mysql.start\t\n\t$ mysql.stop\n\t$ mysql.restart\n```\n\n\n\n\n","source":"_posts/mysql/brew-mysql.md","raw":"title: 修改用brew安装的mysql配置\ndate: 2015-10-18 15:35:33\ncategories: mysql\ntags: brew\n---\n\n## 用brew安装mysql\n\n[brew](http://brew.sh/)是OS X上的包管理工具，类型linux上的apt-get, yum等\n\n### 首先，需要先装好brew\n\n```\n\t$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### mysql install\n\n安装：\n\n```\n\t$ brew install mysql\n```\n\n设置开机启动:\n \n```\n \t$ ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n \t$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n \n## 修改mysql配置  \n \n### 查看配置文件引用的路径\n \n```\n\t$ mysqld --help --verbose | more\n```\n \n通过这命令，可以看出mysql默认调用的配置文件路径：\n\n```\n\tDefault options are read from the following files in the given order:\n\t/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n```\n\n### 创建配置文件 \n\nbrew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。\n先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  \n\n```\n\t$ ls $(brew --prefix mysql)/support-files/my-*\n```\n   \n复制到引用目录：\n\n```\n\t$ cp /usr/local/opt/mysql/support-files/my-default.cnf /etc/my.cnf\n```\n\t\n然后就可以按自己需求修改配置了\n\n## mysql启动命令\n\n重启mysql,  unload 是关闭， load是启动\n\n```\n\t$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n\t$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n\n为了文件管理可以把命令alias下：\n\n```\n\t$ vim ~/.bash_aliases\n```\n\n输入以下内容，保存\n\n```\n\talias mysql.start=\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.stop=\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.restart='mysql.stop && mysql.start'  \n```\n\n保存后添加到.bash_profile文件中\n\n```\n\techo \"[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases\" >> ~/.bash_profile     \n\tsource ~/.bash_profile\n```\n\n这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了\n\n```\n\t$ mysql.start\t\n\t$ mysql.stop\n\t$ mysql.restart\n```\n\n\n\n\n","slug":"mysql/brew-mysql","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp531td0007z2v8dbeu2qmt","sticky":0},{"title":"brew安装mongodb","date":"2016-01-27T14:51:27.000Z","_content":"\n## 用brew安装mongodb\n\n\n### mongodb install\n\n安装：\n\n```\n\t$ brew install mongodb\n```\n\n安装好会出现以下内容:\n \n```\n==> Downloading https://homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring mongodb-3.0.7.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start mongodb at login:\n  ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\nOr, if you don't want/need launchctl, you can just run:\n  mongod --config /usr/local/etc/mongod.conf\n==> Summary\n🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M\n```\n\n最后提示了如何启动mongodb：\n\n```\n\tmongod --config /usr/local/etc/mongod.conf\n```\n\n--config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:\n\n```\nsystemLog:\n  destination: file\n  path: /usr/local/var/log/mongodb/mongo.log\n  logAppend: true\nstorage:\n  dbPath: /usr/local/var/mongodb\nnet:\n  bindIp: 127.0.0.1\n~\n~\n```\n\n### 连接mongodb\n\nmongod启动后，在命令行输入`mongo`命令可以连接到数据库:\n\n```\n\t$ mongo\n\tMongoDB shell version: 3.0.7\n\tconnecting to: test\n\t> use blog\n\tswitched to db blog\n\t> exit;\n```\n\n接下来就可以创表，增删查改等操作了\n\n\n\n\n\n","source":"_posts/mongo/brew-mongodb.md","raw":"title: brew安装mongodb  \ndate: 2016-01-27 22:51:27  \ncategories: mongodb  \ntags: [brew,mongodb]\n\n---\n\n## 用brew安装mongodb\n\n\n### mongodb install\n\n安装：\n\n```\n\t$ brew install mongodb\n```\n\n安装好会出现以下内容:\n \n```\n==> Downloading https://homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring mongodb-3.0.7.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start mongodb at login:\n  ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\nOr, if you don't want/need launchctl, you can just run:\n  mongod --config /usr/local/etc/mongod.conf\n==> Summary\n🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M\n```\n\n最后提示了如何启动mongodb：\n\n```\n\tmongod --config /usr/local/etc/mongod.conf\n```\n\n--config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:\n\n```\nsystemLog:\n  destination: file\n  path: /usr/local/var/log/mongodb/mongo.log\n  logAppend: true\nstorage:\n  dbPath: /usr/local/var/mongodb\nnet:\n  bindIp: 127.0.0.1\n~\n~\n```\n\n### 连接mongodb\n\nmongod启动后，在命令行输入`mongo`命令可以连接到数据库:\n\n```\n\t$ mongo\n\tMongoDB shell version: 3.0.7\n\tconnecting to: test\n\t> use blog\n\tswitched to db blog\n\t> exit;\n```\n\n接下来就可以创表，增删查改等操作了\n\n\n\n\n\n","slug":"mongo/brew-mongodb","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp531tg000az2v8hhm1lnpe","sticky":0},{"title":"设置HOMEBREW_GITHUB_API_TOKEN","date":"2015-10-01T12:50:00.000Z","_content":"\n在使用brew工具时，报了以下错误,github API 访问的权限限制:\n\n```\nError:GitHub API rate limit exceeded for [xxxx]. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\nTry again in 5 minutes 54 seconds, or create an personal access token:\n  https://github.com/settings/tokens\nand then set the token as: HOMEBREW_GITHUB_API_TOKEN\n```\n\n解决：\n\n按照报错说明\n\n首先打开  [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)\n\n登陆后，输入Homebrew，生成token\n\n设置环境变量HOMEBREW_GITHUB_API_TOKEN：\n\n将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:\n\n```\n\t$ export HOMEBREW_GITHUB_API_TOKEN=XXXXXXXXXX\n```","source":"_posts/macos/brew-token.md","raw":"title: 设置HOMEBREW_GITHUB_API_TOKEN\ndate: 2015-10-01 20:50\ncategories: 工作记录\ntags: homebrew\n---\n\n在使用brew工具时，报了以下错误,github API 访问的权限限制:\n\n```\nError:GitHub API rate limit exceeded for [xxxx]. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\nTry again in 5 minutes 54 seconds, or create an personal access token:\n  https://github.com/settings/tokens\nand then set the token as: HOMEBREW_GITHUB_API_TOKEN\n```\n\n解决：\n\n按照报错说明\n\n首先打开  [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)\n\n登陆后，输入Homebrew，生成token\n\n设置环境变量HOMEBREW_GITHUB_API_TOKEN：\n\n将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:\n\n```\n\t$ export HOMEBREW_GITHUB_API_TOKEN=XXXXXXXXXX\n```","slug":"macos/brew-token","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp531tk000ez2v8kma62w06","sticky":0},{"title":"使用hexo搭建个人博客 part2","date":"2015-10-11T13:06:35.000Z","_content":"\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/hexo/hexo-2-theme.md","raw":"title: 使用hexo搭建个人博客 part2\ndate: 2015-10-11 21:06:35\ncategories: node\ntags: hexo\n\n---\n\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"hexo/hexo-2-theme","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp531ts000kz2v8gew3r0m4","sticky":0},{"title":"http重定向状态码","date":"2016-01-20T14:48:38.000Z","_content":"\n>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx\n\n* 301 已移动 -- 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址\n* 302 临时移动 -- 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置\n* 303 请参阅其他 -- 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应\n* 304 目标未修改 -- 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据\n* 305 使用代理 -- 请求者只能使用代码访问请求的网页\n* 306 不再使用 -- 新版规范中，306已经不再被使用\n* 307 临时重定向 -- 请求的资源临时从不同的URL响应请求\n","source":"_posts/HTTP/http-redirect.md","raw":"title: http重定向状态码  \ndate: 2016-01-20 22:48:38  \ntags: http  \ncategories: http  \n\n---\n\n>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx\n\n* 301 已移动 -- 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址\n* 302 临时移动 -- 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置\n* 303 请参阅其他 -- 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应\n* 304 目标未修改 -- 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据\n* 305 使用代理 -- 请求者只能使用代码访问请求的网页\n* 306 不再使用 -- 新版规范中，306已经不再被使用\n* 307 临时重定向 -- 请求的资源临时从不同的URL响应请求\n","slug":"HTTP/http-redirect","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp562v6000nz2v8pc8eqryi","sticky":0},{"title":"java学习笔记[bean注解]","date":"2018-03-30T14:22:53.000Z","_content":"\n>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置...等等，这里对其作用做了笔记\n\n# Bean的声明\n\n* @Component 通用，无明确角色\n* @Repository. 数据访问层（Dao）层注解\n* @Controller  Controller层\n* @Service  业务逻辑Service层\n* @Configuration 配置文件\n\n# Scope\n\n## 作用域类型\n\n@Scope(“single”)    \n* single          每个IOC容器对一个bean定义创建唯一实例 \n* prototype    对一个bean定义，每次请求容器都会创建新的实例 \n* session         对一个bean定义，一次web会话创建一个实例 \n* request            对一个bean定义，一次web请求会创建一个实例 \n* global session    对一个bean定义，一次porlet会话创建一个实例 \n\n## 代理\nscoped-proxy的意义在关联bean之间的依赖\nproxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。\n\n```\n @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n```\n \n\n能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。\n如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。\n也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。\n\n\nproxyMode：代理方式\n\n```\n取值说明：  \nScopedProxyMode.DEFAULT:           默认  \nScopedProxyMode.NO:                不使用代理\nScopedProxyMode.INTERFACES:        接口    ---jdk动态代理\nScopedProxyMode.TARGET_CLASS:      类      ---cglib\n```\n\n# Configuration\n\n@Bean\n配置Bean\n\n# Bean的注入\n\n* @Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错\n* @Resource           JSR-250提供的注解.    \n* @Inject                JSR-330提供的注解\n\n## 区别\n\n‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。\n\n而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。\n\n下面是它们执行逻辑顺序的总结：\n\n`@Autowired和@Inject`\n\n按照类型匹配\n使用限定符进行类型限定\n按照名称匹配\n\n\n`@Resource`\n\n\n按照名称匹配\n按照类型匹配\n使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）\n\n\nPs: 使用@Inject需要Jsr-303的支持，添加依赖\n\n```\n\t\t<dependency>\n\t\t\t<groupId>javax.inject</groupId>\n\t\t\t<artifactId>javax.inject</artifactId>\n\t\t\t<version>1</version>\n\t\t</dependency>\n```\n\n# List,Map的注入\n\n```\nclass Example{\n    @Autowired\n\t\tprivate List<Bean> list;\n}\n```\n\n## Qualifier\n\n限定符\n\n# Required\n\n@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。\n\n```\nclass Demo{\n    private String name;\n\n    @Required\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\nClass Demo2 {\n    @Autowired(value=\"name\")\n    private Demo demo;\n}\n```\n\n\n# Meta-annotations元注解\n\n* @Retention：\n\n 可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：\n   1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。\n\n   2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。\n\n   3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。\n\n* @Target：\n\n 表示该新定义Annotation的作用目标，具体可参考API文档。\n    1.CONSTRUCTOR:用于描述构造器\n\n    2.FIELD:用于描述域（成员变量）\n\n    3.LOCAL_VARIABLE:用于描述局部变量\n\n    4.METHOD:用于描述方法\n\n    5.PACKAGE:用于描述包\n\n    6.PARAMETER:用于描述参数\n\n    7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n* @Documented\n\n 表示该新定义Annotation是否保留在Java Docs中。\n\n* @Inherited\n\n 表示使用该新定义Annotation可以继承。\n\n\n\n","source":"_posts/java/java-bean.md","raw":"title: java学习笔记[bean注解]\ndate: 2018-03-30 22:22:53\ntags: java\ncategories: java\n---\n\n>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置...等等，这里对其作用做了笔记\n\n# Bean的声明\n\n* @Component 通用，无明确角色\n* @Repository. 数据访问层（Dao）层注解\n* @Controller  Controller层\n* @Service  业务逻辑Service层\n* @Configuration 配置文件\n\n# Scope\n\n## 作用域类型\n\n@Scope(“single”)    \n* single          每个IOC容器对一个bean定义创建唯一实例 \n* prototype    对一个bean定义，每次请求容器都会创建新的实例 \n* session         对一个bean定义，一次web会话创建一个实例 \n* request            对一个bean定义，一次web请求会创建一个实例 \n* global session    对一个bean定义，一次porlet会话创建一个实例 \n\n## 代理\nscoped-proxy的意义在关联bean之间的依赖\nproxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。\n\n```\n @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n```\n \n\n能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。\n如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。\n也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。\n\n\nproxyMode：代理方式\n\n```\n取值说明：  \nScopedProxyMode.DEFAULT:           默认  \nScopedProxyMode.NO:                不使用代理\nScopedProxyMode.INTERFACES:        接口    ---jdk动态代理\nScopedProxyMode.TARGET_CLASS:      类      ---cglib\n```\n\n# Configuration\n\n@Bean\n配置Bean\n\n# Bean的注入\n\n* @Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错\n* @Resource           JSR-250提供的注解.    \n* @Inject                JSR-330提供的注解\n\n## 区别\n\n‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。\n\n而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。\n\n下面是它们执行逻辑顺序的总结：\n\n`@Autowired和@Inject`\n\n按照类型匹配\n使用限定符进行类型限定\n按照名称匹配\n\n\n`@Resource`\n\n\n按照名称匹配\n按照类型匹配\n使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）\n\n\nPs: 使用@Inject需要Jsr-303的支持，添加依赖\n\n```\n\t\t<dependency>\n\t\t\t<groupId>javax.inject</groupId>\n\t\t\t<artifactId>javax.inject</artifactId>\n\t\t\t<version>1</version>\n\t\t</dependency>\n```\n\n# List,Map的注入\n\n```\nclass Example{\n    @Autowired\n\t\tprivate List<Bean> list;\n}\n```\n\n## Qualifier\n\n限定符\n\n# Required\n\n@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。\n\n```\nclass Demo{\n    private String name;\n\n    @Required\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\nClass Demo2 {\n    @Autowired(value=\"name\")\n    private Demo demo;\n}\n```\n\n\n# Meta-annotations元注解\n\n* @Retention：\n\n 可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：\n   1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。\n\n   2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。\n\n   3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。\n\n* @Target：\n\n 表示该新定义Annotation的作用目标，具体可参考API文档。\n    1.CONSTRUCTOR:用于描述构造器\n\n    2.FIELD:用于描述域（成员变量）\n\n    3.LOCAL_VARIABLE:用于描述局部变量\n\n    4.METHOD:用于描述方法\n\n    5.PACKAGE:用于描述包\n\n    6.PARAMETER:用于描述参数\n\n    7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n* @Documented\n\n 表示该新定义Annotation是否保留在Java Docs中。\n\n* @Inherited\n\n 表示使用该新定义Annotation可以继承。\n\n\n\n","slug":"java/java-bean","published":1,"updated":"2019-04-03T15:54:50.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp56leu000qz2v8xm1lt3r8","sticky":0},{"title":"Ajax中的2个需要注意的地方","date":"2014-12-28T08:49:00.000Z","_content":"\n\n>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础\n\n## 异步获取数据\n\n异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:\n\n```\n\t $.ajax({\n\t  \n\t     url:'/test/test.api',\n\t     dataType:'json',\n\t     type:'get',\n\t      \n\t     success:function(data){\n\t          console.log(1);\n\t     }\n\t});\n\tconsole.log(2);\n\t//控制台结果：\n\t//2\n\t//1\n```\n\n你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。\n\n\n## ajax中的this作用域\n\n在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：\n\n```\n\tvar testObj = {\n\t   type : 'this is testObj.type',\n\t   test : function(){\n\t        console.log('this.type:' + this.type);\n\t        var _this = this;\n\t           \n\t        $.ajax({\n\t            url:'/test/test.php',\n\t            dataType:'json',\n\t            type:'get',\n\t            success:function(data){\n\t                console.log('this.type in ajax:' + this.type);\n\t                console.log('_this.type:' + _this.type);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\ttestObj.test();\n\t//控制台出现的数据是：\n\t//this.type:this is testObj.type \n\t//this.type in ajax:get \n\t//_this.type:this is testObj.type\n```\n\n要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this","source":"_posts/js/js-ajax.md","raw":"title: Ajax中的2个需要注意的地方  \ndate: 2014-12-28 16:49  \ntags: javascript  \ncategories: javascript  \n\n---\n\n\n>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础\n\n## 异步获取数据\n\n异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:\n\n```\n\t $.ajax({\n\t  \n\t     url:'/test/test.api',\n\t     dataType:'json',\n\t     type:'get',\n\t      \n\t     success:function(data){\n\t          console.log(1);\n\t     }\n\t});\n\tconsole.log(2);\n\t//控制台结果：\n\t//2\n\t//1\n```\n\n你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。\n\n\n## ajax中的this作用域\n\n在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：\n\n```\n\tvar testObj = {\n\t   type : 'this is testObj.type',\n\t   test : function(){\n\t        console.log('this.type:' + this.type);\n\t        var _this = this;\n\t           \n\t        $.ajax({\n\t            url:'/test/test.php',\n\t            dataType:'json',\n\t            type:'get',\n\t            success:function(data){\n\t                console.log('this.type in ajax:' + this.type);\n\t                console.log('_this.type:' + _this.type);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\ttestObj.test();\n\t//控制台出现的数据是：\n\t//this.type:this is testObj.type \n\t//this.type in ajax:get \n\t//_this.type:this is testObj.type\n```\n\n要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this","slug":"js/js-ajax","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp576us000tz2v8enuefm7g","sticky":0},{"title":"ajax请求时json对象数据变成字段串[object object]","date":"2015-08-14T14:41:00.000Z","_content":"\n在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。\n\najax很普通地如下：\n\n```javascript\n    ...\n\t$.ajax({\n\t     type: \"POST\",\n\t     url: _url\n\t     dataType: \"json\",\n\t     data: _data,\n\t     error: function(){\n\t         console.log('error');\n\t     },\n\t     success: function(data){\n\t         console.log(data);\n\t     }\n\t});\n```\n\najax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下\n\n\n```javascript\n\tvar _data = {\n\t    data: 'test',\n\t    id: 1\n\t};\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了\n\n```javascript\n\tvar _data = {\n\t    testData: {\n\t       test:  'test'\n\t    }\n\t    data: 'test',\n\t    id: 1\n\t}; \n\tconsole.log(_data);\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：\n\n```\ntestData: [object Object]\ndata: 'test'\nid: 1\n```\n\n正常的数据应该是这样的：\n\n```\ntestData['test']: 'test'\ndata: 'test'\nid: 1\n```\n\n后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。","source":"_posts/js/js-ajaxJsonToString.md","raw":"title: ajax请求时json对象数据变成字段串[object object]\ndate: 2015-08-14 22:41\ntags: javascript\ncategories: javascript\n\n---\n\n在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。\n\najax很普通地如下：\n\n```javascript\n    ...\n\t$.ajax({\n\t     type: \"POST\",\n\t     url: _url\n\t     dataType: \"json\",\n\t     data: _data,\n\t     error: function(){\n\t         console.log('error');\n\t     },\n\t     success: function(data){\n\t         console.log(data);\n\t     }\n\t});\n```\n\najax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下\n\n\n```javascript\n\tvar _data = {\n\t    data: 'test',\n\t    id: 1\n\t};\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了\n\n```javascript\n\tvar _data = {\n\t    testData: {\n\t       test:  'test'\n\t    }\n\t    data: 'test',\n\t    id: 1\n\t}; \n\tconsole.log(_data);\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：\n\n```\ntestData: [object Object]\ndata: 'test'\nid: 1\n```\n\n正常的数据应该是这样的：\n\n```\ntestData['test']: 'test'\ndata: 'test'\nid: 1\n```\n\n后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。","slug":"js/js-ajaxJsonToString","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp578lr000wz2v8bbshc573","sticky":0},{"title":"javascript创建DOM元素","date":"2014-03-15T07:49:00.000Z","_content":"\n2种创建DOM元素的方法\n\n## 创建一个element\n\n```\n\t/**\n\t * 赋值obj对象为一个创建input元素\n\t * 设置obj元素属性，可以直接以`.`赋值，也可以用`setAttribute`\n\t */\n \tvar obj = document.createElement('input');\n \t\n\tobj.name = 'name';\n\tobj.value = 'value';\n\n\tobj.setAttribute('id','idname');\n\tobj.setAttribute('type','typename');\n\t\n\t/**\n\t * 在id为before的元素后面插入obj\n\t */\n\tdocument.getElementById('before').appendChild(obj);\n```\n\n## 简单粗暴地输出标签\n\n```\n\tdocument.write(\"<inpt name='name' value='value' id='idname' type='typename'>\");\n```","source":"_posts/js/js-createElement.md","raw":"title: javascript创建DOM元素  \ndate: 2014-03-15 15:49  \ntags: javascript  \ncategories: javascript\n\n---\n\n2种创建DOM元素的方法\n\n## 创建一个element\n\n```\n\t/**\n\t * 赋值obj对象为一个创建input元素\n\t * 设置obj元素属性，可以直接以`.`赋值，也可以用`setAttribute`\n\t */\n \tvar obj = document.createElement('input');\n \t\n\tobj.name = 'name';\n\tobj.value = 'value';\n\n\tobj.setAttribute('id','idname');\n\tobj.setAttribute('type','typename');\n\t\n\t/**\n\t * 在id为before的元素后面插入obj\n\t */\n\tdocument.getElementById('before').appendChild(obj);\n```\n\n## 简单粗暴地输出标签\n\n```\n\tdocument.write(\"<inpt name='name' value='value' id='idname' type='typename'>\");\n```","slug":"js/js-createElement","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp57e5x000zz2v8rt1kxd4k","sticky":0},{"title":"通过二维码开放平台的API快速生成二维码","date":"2014-09-06T09:06:00.000Z","_content":"\n> 二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。\n\n现在很多网站都有通过扫二维码用手机连接的功能，[联图网](http://www.liantu.com/pingtai/)的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。\n\nhtml代码如下:(二维码将生成在这div下)\n\n```\n\t<div id='qrcode'></div>\n```\n\njs代码如下：\n\n```\nvar qrCode = {\n    //初始化属性\n    jsonData:{\n        content     : '',  //内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的\n        logo        : '',  //二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg\n        bgColor     : '',  //背景颜色，             格式 ：颜色代码            如fffaf0\n        fgColor     : '',  //前景颜色，即条纹颜色     格式 ：同上\n        gcColor     : '',  //渐变颜色,              格式 : 同上\n        ptColor     : '',  //定位点颜色(外框)        格式：同上\n        inptColor   : '',  //定位点颜色(内点)        格式：同上\n        eLevel      : '',  //纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h\n        w           : '',  //宽度尺寸               格式：像素值              如  200\n        m           : ''   //外边距尺寸               格式：如上\n    },\n    //获取二维码图片\n    getQrcode:function(divId){\n        //javascript写法\n        var divElement = document.getElementById(divId),\n            imgHtml    = this.setImgHeml(this.jsonData);\n        divElement.innerHTML = imgHtml;\n        /* //jQuery写法\n        var imgHtml    = this.setImgHeml(this.jsonData);\n        $(\"#\"+divId).append(imgHtml);*/\n    },\n    //构造图片\n    setImgHeml:function(jsonData){\n        var imgHtml = \"<img src='http://qr.liantu.com/api.php?\";\n        imgHtml += jsonData.content?\"&text=\"+jsonData.content:\"\";\n        imgHtml += jsonData.logo?\"&logo=\"+jsonData.logo:\"\";\n        imgHtml += jsonData.bgColor?\"&bg=\"+jsonData.bgColor:\"\";\n        imgHtml += jsonData.fgColor?\"&fg=\"+jsonData.fgColor:\"\";\n        imgHtml += jsonData.gcColor?\"&gc=\"+jsonData.gcColor:\"\";\n        imgHtml += jsonData.ptColor?\"&pg=\"+jsonData.ptColor:\"\";\n        imgHtml += jsonData.inptColor?\"&inpt=\"+jsonData.inptColor:\"\";\n        imgHtml += jsonData.eLevel?\"&el=\"+jsonData.eLevel:\"\";\n        imgHtml += jsonData.w?\"&w=\"+jsonData.w:\"\";\n        imgHtml += jsonData.m?\"&m=\"+jsonData.m:\"\";\n        imgHtml += \"'>\";\n        return imgHtml;\n    }\n};\n```\n\n调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置\n\n```\n\t//设置内容为当前url路径\n\tqrCode.jsonData.content =  window.location.href;\n\t//设置宽度尺寸\n\tqrCode.jsonData.w =  500;\n\t//设置外边框距\n\tqrCode.jsonData.m =  50;\n\t//在id为qrcode的元素下生成二维码图片\n\tqrCode.getQrcode('qrcode');\n```\n\n通过这几行设置代码，就可以轻松地生成二维码了.","source":"_posts/js/js-qrcode.md","raw":"title: 通过二维码开放平台的API快速生成二维码  \ndate: 2014-09-06 17:06  \ntags: javascript  \ncategories: javascript  \n\n---\n\n> 二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。\n\n现在很多网站都有通过扫二维码用手机连接的功能，[联图网](http://www.liantu.com/pingtai/)的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。\n\nhtml代码如下:(二维码将生成在这div下)\n\n```\n\t<div id='qrcode'></div>\n```\n\njs代码如下：\n\n```\nvar qrCode = {\n    //初始化属性\n    jsonData:{\n        content     : '',  //内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的\n        logo        : '',  //二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg\n        bgColor     : '',  //背景颜色，             格式 ：颜色代码            如fffaf0\n        fgColor     : '',  //前景颜色，即条纹颜色     格式 ：同上\n        gcColor     : '',  //渐变颜色,              格式 : 同上\n        ptColor     : '',  //定位点颜色(外框)        格式：同上\n        inptColor   : '',  //定位点颜色(内点)        格式：同上\n        eLevel      : '',  //纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h\n        w           : '',  //宽度尺寸               格式：像素值              如  200\n        m           : ''   //外边距尺寸               格式：如上\n    },\n    //获取二维码图片\n    getQrcode:function(divId){\n        //javascript写法\n        var divElement = document.getElementById(divId),\n            imgHtml    = this.setImgHeml(this.jsonData);\n        divElement.innerHTML = imgHtml;\n        /* //jQuery写法\n        var imgHtml    = this.setImgHeml(this.jsonData);\n        $(\"#\"+divId).append(imgHtml);*/\n    },\n    //构造图片\n    setImgHeml:function(jsonData){\n        var imgHtml = \"<img src='http://qr.liantu.com/api.php?\";\n        imgHtml += jsonData.content?\"&text=\"+jsonData.content:\"\";\n        imgHtml += jsonData.logo?\"&logo=\"+jsonData.logo:\"\";\n        imgHtml += jsonData.bgColor?\"&bg=\"+jsonData.bgColor:\"\";\n        imgHtml += jsonData.fgColor?\"&fg=\"+jsonData.fgColor:\"\";\n        imgHtml += jsonData.gcColor?\"&gc=\"+jsonData.gcColor:\"\";\n        imgHtml += jsonData.ptColor?\"&pg=\"+jsonData.ptColor:\"\";\n        imgHtml += jsonData.inptColor?\"&inpt=\"+jsonData.inptColor:\"\";\n        imgHtml += jsonData.eLevel?\"&el=\"+jsonData.eLevel:\"\";\n        imgHtml += jsonData.w?\"&w=\"+jsonData.w:\"\";\n        imgHtml += jsonData.m?\"&m=\"+jsonData.m:\"\";\n        imgHtml += \"'>\";\n        return imgHtml;\n    }\n};\n```\n\n调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置\n\n```\n\t//设置内容为当前url路径\n\tqrCode.jsonData.content =  window.location.href;\n\t//设置宽度尺寸\n\tqrCode.jsonData.w =  500;\n\t//设置外边框距\n\tqrCode.jsonData.m =  50;\n\t//在id为qrcode的元素下生成二维码图片\n\tqrCode.getQrcode('qrcode');\n```\n\n通过这几行设置代码，就可以轻松地生成二维码了.","slug":"js/js-qrcode","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp57hm60012z2v8k6n8qmkq","sticky":0},{"title":"linux-curl","date":"2016-04-10T14:26:50.000Z","_content":"\n>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n\n## 获取url内容\n\n```\n\t$ curl url\n```\n\n## 保存内容\n\n```\n\t$ curl -o filename url\n\t$ curl url >> filename\n```\n\n## 显示下载进度条`-#`\n\n```\n\t$ curl -# -o filename url\n```\n\n## 获取response header\n\n```\n\t$ curl -i url\n```\n\n## POST数据\n\n```\n\t$ curl -d \"key1=val1&key2=val2\" url\n```\n\n## PUT文件\n\n```\n\t$ curl -F \"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\" \\\n\t http://local.creed.com/curl\n```\n\n## UserAgent\n\n```\n\t$ curl -A \"USER AGENT\" URL\n```\n\n## COOKIE\n\nCookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：\n\n```\n\t$ curl -b stored_cookies_in_file \\\n\thttp://local.creed.com\n```\n\n可以通过请求登陆接口保存cookie文件：\n\n```\n\t$ curl -c stored_cookies_in_file \\\n\t-d  \"user=username&password=password\" \\\n\thttp://local.creed.com/login\n```\n\n## REFERER\n\n```\n\t$ curl -e http://www.baidu.com http://local.creed.com/curl\n```\n\n## 代理\n\n```\n\t$ curl -x ip:port http://local.creed.com/curl\n\n```\n\n## 伪造Ip\n\n仅限于用X-FORWARDED-FOR获取IP的地址\n\n```\n\t$ curl -H \"X-FORWARDED-FOR:202.103.229.11\"\\\n\t -H \"CLIENT-IP:202.103.229.11\"\\\n\t \"http://local.creed.com/curl\"\n```","source":"_posts/linux/linux-curl.md","raw":"title: linux-curl\ndate: 2016-04-10 22:26:50\ntags: linux\ncategories: linux\n\n---\n\n>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n\n## 获取url内容\n\n```\n\t$ curl url\n```\n\n## 保存内容\n\n```\n\t$ curl -o filename url\n\t$ curl url >> filename\n```\n\n## 显示下载进度条`-#`\n\n```\n\t$ curl -# -o filename url\n```\n\n## 获取response header\n\n```\n\t$ curl -i url\n```\n\n## POST数据\n\n```\n\t$ curl -d \"key1=val1&key2=val2\" url\n```\n\n## PUT文件\n\n```\n\t$ curl -F \"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\" \\\n\t http://local.creed.com/curl\n```\n\n## UserAgent\n\n```\n\t$ curl -A \"USER AGENT\" URL\n```\n\n## COOKIE\n\nCookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：\n\n```\n\t$ curl -b stored_cookies_in_file \\\n\thttp://local.creed.com\n```\n\n可以通过请求登陆接口保存cookie文件：\n\n```\n\t$ curl -c stored_cookies_in_file \\\n\t-d  \"user=username&password=password\" \\\n\thttp://local.creed.com/login\n```\n\n## REFERER\n\n```\n\t$ curl -e http://www.baidu.com http://local.creed.com/curl\n```\n\n## 代理\n\n```\n\t$ curl -x ip:port http://local.creed.com/curl\n\n```\n\n## 伪造Ip\n\n仅限于用X-FORWARDED-FOR获取IP的地址\n\n```\n\t$ curl -H \"X-FORWARDED-FOR:202.103.229.11\"\\\n\t -H \"CLIENT-IP:202.103.229.11\"\\\n\t \"http://local.creed.com/curl\"\n```","slug":"linux/linux-curl","published":1,"updated":"2016-04-25T14:59:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp57tfp0015z2v8il1tdjqx","sticky":0},{"title":"linux-find","date":"2016-07-04T07:02:12.000Z","_content":"\n>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。\n\n## 语法\n\n```\n\t$ find path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n下边列举常用的一些条件\n\n## path\n\n查找单个目录：\n\n```\n\t$ find /tmp   \n```\n\n查找多个目录:\n\n```\n\t$ find /tmp /opt /etc\n```\n\n## option\n\n### 按档案名\n\n查找后缀为`.md` 的档案\n\n```\n\t$ find path -name \"*.md\"\n```\n\n查找后缀为`.md`的档案，并不区分大小写(可以是`.MD`,`.Md`,`.mD`)\n\n```\n\t$ find path -iname \"*.md\"\n```\n\n### 按档案类型\n\n文件夹\n\n```\n\t$ find path -type d\n```\n\n符号连接\n\n```\n\t$ find path -type l\n```\n\n一般档案\n\n```\n\t$ find path -type f\n```\n\n字形装置\n\n```\n\t$ find path -type c\n```\n\n区块装置\n\n```\n\t$ find path -type b\n```\n\n具名贮列\n\n```\n\t$ find path -type p\n```\n\nsocket\n\n```\n\t$ find path -type s\n```\n\n### 时间\n\n类型\n\n* a (access) 访问时间\n* c (change) 状态改变时间(如修改,chmod,chown)\n* m (modification) 修改时间\n\n单位\n\n* min 以分钟为单位  \n* time 以天为单位  \n\n量\n\n* -n  在n单位时间内  \n* +n  在n单位时间前  \n* n   在n单位时间中  \n\n\n在n分钟前被访问|修改|改变过的档案\n\n```\n\t$ find path -amin +n\n\t$ find path -mmin +n\n\t$ find path -cmin +n\n```\n\n在n分钟内被访问|修改|改变过的档案\n\n```\n\t$ find path -amin -n\n\t$ find path -mmin -n\n\t$ find path -cmin -n\n```\n\n在前n分钟被访问|修改|改变过的档案\n\n```\n\t$ find path -amin n\n\t$ find path -mmin n\n\t$ find path -cmin n\n```\n\n\n最近[n天内|n天前|前n天]被访问|修改|改变过的档案\n\n```\n\t$ find path -atime [-n|+n|n]\n\t$ find path -mtime [-n|+n|n]\n\t$ find path -ctime [-n|+n|n]\n```\n\n比file档案更晚被访问|修改|改变过的档案\n\n```\n\t$ find path -anewer file\n\t$ find path -mnewer file\n\t$ find path -cnewer file\n```\n\n### 路径\n\n路径中含有path\n\n```\n\t$ find path -path \"*path*\"\n```\n\n路径含有path并不区分大小写\n\n```\n\t$ find path -ipath \"*PATH*\"\n```\n\n### 大小\n\n查找大于nk,小于nk的档案\n\n```\n\t$ find path -size +nk\n\t$ find path -size -nk\n```\n\n空档案\n\n```\n\t$ find path -empty\n```\n\n### 权限\n\nmode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 \n\n* -mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）\n* +mode 3种用户的权限只要有一个对上，则成功（如644能对622等）\n* mode 3种用户的权限都要跟mode准确对上才成功（如222对222）\n\n```\n\t$ find path -perm -mode\n\t$ find path -perm +mode\n\t$ find path -perm mode\n```\n\n## exec\n\n需要对搜索结果执行shell命令则用`-exec`,如\n\n```\n\t$ find / -type f -exec ls -lah {} \\;\n```\n\n## example\n\n把小于2k的文件搬到/tmp目录\n\n```\n\t$ find path -size -2k -exec mv {} /tmp \\;\n```\n\n找出档案名含有'abc' 的普通档案\n\n```\n\t$ find path -name '*abc*' -type f \n\t$ find -type f | grep abc\n```","source":"_posts/linux/linux-find.md","raw":"title: linux-find\ndate: 2016-07-04 15:02:12\ntags: linux\ncategories: linux\n\n---\n\n>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。\n\n## 语法\n\n```\n\t$ find path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n下边列举常用的一些条件\n\n## path\n\n查找单个目录：\n\n```\n\t$ find /tmp   \n```\n\n查找多个目录:\n\n```\n\t$ find /tmp /opt /etc\n```\n\n## option\n\n### 按档案名\n\n查找后缀为`.md` 的档案\n\n```\n\t$ find path -name \"*.md\"\n```\n\n查找后缀为`.md`的档案，并不区分大小写(可以是`.MD`,`.Md`,`.mD`)\n\n```\n\t$ find path -iname \"*.md\"\n```\n\n### 按档案类型\n\n文件夹\n\n```\n\t$ find path -type d\n```\n\n符号连接\n\n```\n\t$ find path -type l\n```\n\n一般档案\n\n```\n\t$ find path -type f\n```\n\n字形装置\n\n```\n\t$ find path -type c\n```\n\n区块装置\n\n```\n\t$ find path -type b\n```\n\n具名贮列\n\n```\n\t$ find path -type p\n```\n\nsocket\n\n```\n\t$ find path -type s\n```\n\n### 时间\n\n类型\n\n* a (access) 访问时间\n* c (change) 状态改变时间(如修改,chmod,chown)\n* m (modification) 修改时间\n\n单位\n\n* min 以分钟为单位  \n* time 以天为单位  \n\n量\n\n* -n  在n单位时间内  \n* +n  在n单位时间前  \n* n   在n单位时间中  \n\n\n在n分钟前被访问|修改|改变过的档案\n\n```\n\t$ find path -amin +n\n\t$ find path -mmin +n\n\t$ find path -cmin +n\n```\n\n在n分钟内被访问|修改|改变过的档案\n\n```\n\t$ find path -amin -n\n\t$ find path -mmin -n\n\t$ find path -cmin -n\n```\n\n在前n分钟被访问|修改|改变过的档案\n\n```\n\t$ find path -amin n\n\t$ find path -mmin n\n\t$ find path -cmin n\n```\n\n\n最近[n天内|n天前|前n天]被访问|修改|改变过的档案\n\n```\n\t$ find path -atime [-n|+n|n]\n\t$ find path -mtime [-n|+n|n]\n\t$ find path -ctime [-n|+n|n]\n```\n\n比file档案更晚被访问|修改|改变过的档案\n\n```\n\t$ find path -anewer file\n\t$ find path -mnewer file\n\t$ find path -cnewer file\n```\n\n### 路径\n\n路径中含有path\n\n```\n\t$ find path -path \"*path*\"\n```\n\n路径含有path并不区分大小写\n\n```\n\t$ find path -ipath \"*PATH*\"\n```\n\n### 大小\n\n查找大于nk,小于nk的档案\n\n```\n\t$ find path -size +nk\n\t$ find path -size -nk\n```\n\n空档案\n\n```\n\t$ find path -empty\n```\n\n### 权限\n\nmode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 \n\n* -mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）\n* +mode 3种用户的权限只要有一个对上，则成功（如644能对622等）\n* mode 3种用户的权限都要跟mode准确对上才成功（如222对222）\n\n```\n\t$ find path -perm -mode\n\t$ find path -perm +mode\n\t$ find path -perm mode\n```\n\n## exec\n\n需要对搜索结果执行shell命令则用`-exec`,如\n\n```\n\t$ find / -type f -exec ls -lah {} \\;\n```\n\n## example\n\n把小于2k的文件搬到/tmp目录\n\n```\n\t$ find path -size -2k -exec mv {} /tmp \\;\n```\n\n找出档案名含有'abc' 的普通档案\n\n```\n\t$ find path -name '*abc*' -type f \n\t$ find -type f | grep abc\n```","slug":"linux/linux-find","published":1,"updated":"2016-07-10T10:41:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp57w9o0018z2v8f6e9oc74","sticky":0},{"title":"Ubuntu下配置lnmp","date":"2016-06-19T14:10:25.000Z","_content":"\n>环境：Ubuntu Linux 14.04\n\n# 安装软件仓库管理器\n\n```\n\t$ sudo apt-get install python-software-properties;\n```\n\n# 安装PHP\n\n## 安装php及扩展\n\n```\n\t$ sudo apt-get install python-software-properties;\n\t$ sudo add-apt-repository ppa:ondrej/php5-5.6;\n\t$ sudo apt-get update\n\t$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;\n```\n\n查看版本信息\n\n```\n   $ php5-fpm -v\rPHP 5.6.22-1+donate.sury.org~trusty+1 (fpm-fcgi)\rCopyright (c) 1997-2016 The PHP Group\rZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\r    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans\n```\n\n## 常用命令\n\n### 关闭，开启，重启\n\n```\n\t$ sudo service php5-fpm stop \n\t$ sudo service php5-fpm start\n\t$ sudo service php5-fpm restart  \n```\n\n## 安装composer\n\n```\n\t$ sudo apt-get install curl\n\t$ sudo curl -sS https://getcomposer.org/installer | php\n\t$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n# 安装Nginx\n\n## 安装Nginx\n\n```\n\t$ sudo add-apt-repository ppa:nginx/stable;\n\t$ sudo apt-get update;\n\t$ sudo apt-get install nginx;\n```\n\n查看版本信息\n\n```\n\t$ sudo nginx -v\n```\n\n## 常用命令\n\n启动 ，关闭，重启，配置重载\n\n```\n\t$ sudo service nginx start\n\t$ sudo service nginx stop\n\t$ sudo service nginx restart\n\t$ sudo service nginx reload  \n```\n\n# 安装mysql\n\n```\n\t$ sudo add-apt-repository -y ppa:ondrej/mysql-5.6\n\t$ sudo apt-get update\n\t$ sudo apt-get -y install mysql-server\n```\n\n登陆mysql创建账号\n\n```\n\t$ mysql -u root \n\tmysql>create database wordpress;\n\tmysql>grant all privileges on *.* to jceee identified by '123456';\n\tmysql>flush privileges;\n\tmysql>exit;\n```\n\n# 使用wordpress测试环境\n\n## 安装git\n\n```\n\t$ apt-get install git\n```\n\n## 创建项目文件夹\n\n```\n\t$ sudo mkdir -p /opt/htdocs/\n```\n\n## 下载wordpress\n\n```\n\t$ sudo git clone https://github.com/WordPress/WordPress /opt/htdocs/wordpress\n\t$ sudo chown -R www-data /opt/htdocs\n```\n\n## 增加Nginx配置\n\n```\n\t$ sudo vi /etc/nginx/conf.d/wordpress.conf\n```\n\n写入以下内容，保存并重载Nginx配置\n\n```\nserver {\r\r    listen 80;\r    server_name www.wordpress.com;\r    root /opt/htdocs/wordpress;\r\r    index index.html index.php;\r\r    location / {\r        index index.html index.php;\r    }\r\r    location ~ \\.php$ {\n            include fastcgi.conf;                  \n            fastcgi_pass unix:/var/run/php5-fpm.sock;\r    }\r}\n```\n\n如果php-fpm是以TPC/IP\t方式监听,如127.0.0.1:9000，则把上方\n\n```\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n```\n\n改为\n\n```\n\tfastcgi_pass 127.0.0.1:9000;\n```\n\n## 修改hosts\n\n```\n\t$ sudo vi /etc/hosts\n```\n\n增加以下内容并保存退出\n\n```\n127.0.0.1 www.wordpress.com\n```\n\n## 测试\n\n在浏览器输入\n\n```\nhttp://www.wordpress.com\n```\n\n看访问结果\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux/linux-lnmp.md","raw":"title: Ubuntu下配置lnmp  \ndate: 2016-06-19 22:10:25  \ntags: linux   \ncategories: linux  \n \n---\n\n>环境：Ubuntu Linux 14.04\n\n# 安装软件仓库管理器\n\n```\n\t$ sudo apt-get install python-software-properties;\n```\n\n# 安装PHP\n\n## 安装php及扩展\n\n```\n\t$ sudo apt-get install python-software-properties;\n\t$ sudo add-apt-repository ppa:ondrej/php5-5.6;\n\t$ sudo apt-get update\n\t$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;\n```\n\n查看版本信息\n\n```\n   $ php5-fpm -v\rPHP 5.6.22-1+donate.sury.org~trusty+1 (fpm-fcgi)\rCopyright (c) 1997-2016 The PHP Group\rZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\r    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans\n```\n\n## 常用命令\n\n### 关闭，开启，重启\n\n```\n\t$ sudo service php5-fpm stop \n\t$ sudo service php5-fpm start\n\t$ sudo service php5-fpm restart  \n```\n\n## 安装composer\n\n```\n\t$ sudo apt-get install curl\n\t$ sudo curl -sS https://getcomposer.org/installer | php\n\t$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n# 安装Nginx\n\n## 安装Nginx\n\n```\n\t$ sudo add-apt-repository ppa:nginx/stable;\n\t$ sudo apt-get update;\n\t$ sudo apt-get install nginx;\n```\n\n查看版本信息\n\n```\n\t$ sudo nginx -v\n```\n\n## 常用命令\n\n启动 ，关闭，重启，配置重载\n\n```\n\t$ sudo service nginx start\n\t$ sudo service nginx stop\n\t$ sudo service nginx restart\n\t$ sudo service nginx reload  \n```\n\n# 安装mysql\n\n```\n\t$ sudo add-apt-repository -y ppa:ondrej/mysql-5.6\n\t$ sudo apt-get update\n\t$ sudo apt-get -y install mysql-server\n```\n\n登陆mysql创建账号\n\n```\n\t$ mysql -u root \n\tmysql>create database wordpress;\n\tmysql>grant all privileges on *.* to jceee identified by '123456';\n\tmysql>flush privileges;\n\tmysql>exit;\n```\n\n# 使用wordpress测试环境\n\n## 安装git\n\n```\n\t$ apt-get install git\n```\n\n## 创建项目文件夹\n\n```\n\t$ sudo mkdir -p /opt/htdocs/\n```\n\n## 下载wordpress\n\n```\n\t$ sudo git clone https://github.com/WordPress/WordPress /opt/htdocs/wordpress\n\t$ sudo chown -R www-data /opt/htdocs\n```\n\n## 增加Nginx配置\n\n```\n\t$ sudo vi /etc/nginx/conf.d/wordpress.conf\n```\n\n写入以下内容，保存并重载Nginx配置\n\n```\nserver {\r\r    listen 80;\r    server_name www.wordpress.com;\r    root /opt/htdocs/wordpress;\r\r    index index.html index.php;\r\r    location / {\r        index index.html index.php;\r    }\r\r    location ~ \\.php$ {\n            include fastcgi.conf;                  \n            fastcgi_pass unix:/var/run/php5-fpm.sock;\r    }\r}\n```\n\n如果php-fpm是以TPC/IP\t方式监听,如127.0.0.1:9000，则把上方\n\n```\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n```\n\n改为\n\n```\n\tfastcgi_pass 127.0.0.1:9000;\n```\n\n## 修改hosts\n\n```\n\t$ sudo vi /etc/hosts\n```\n\n增加以下内容并保存退出\n\n```\n127.0.0.1 www.wordpress.com\n```\n\n## 测试\n\n在浏览器输入\n\n```\nhttp://www.wordpress.com\n```\n\n看访问结果\n\n\n\n\n\n\n\n\n\n","slug":"linux/linux-lnmp","published":1,"updated":"2016-07-02T16:58:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp57yus001bz2v8wck3h462","sticky":0},{"title":"linux-lsof","date":"2016-02-04T14:18:46.000Z","_content":"\n>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。\n\n## lsof显示示例\n\nexample:以查看mongod进程为例子\n\n```\n\t$ lsof /usr/local/bin/mongod\n```\n\n结果：\n\n```\n\tCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME  \n\tmongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod\n```\n\n|COMMAND |PID |USER| FD |TYPE |DEVICE |SIZE |NODE| NAME|\n|---|---|---|---|---|---|---|---|---|\n|进程名称|进程标识符|进程所有者|文件描述符|文件类型|指定磁盘名|文件大小|索引节点|打开文件的确切名称|\n|\tmongod|  50995| jceee|  txt|    REG|    1,4 |27409336| 17133981| /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod|\n\n## lsof参数\n\n|命令|功能|\n|---|---|\n|lsof filename |显示打开指定文件的所有进程|\n|lsof -a| 表示两个参数都必须满足时才显示结果|\n|lsof -c string| 显示COMMAND列中包含指定字符的进程所有打开的文件|\n|lsof -u username |显示所属user进程打开的文件|\n|lsof -g gid |显示归属gid的进程情况|\n|lsof +d /DIR/| 显示目录下被进程打开的文件|\n|lsof +D /DIR/| 同上，但是会搜索目录下的所有目录，时间相对较长|\n|lsof -d FD |显示指定文件描述符的进程\n|lsof -n |不将IP转换为hostname，缺省是不加上-n参数\n|lsof -i |用以显示符合条件的进程情况\n|lsof -i[46] [protocol][@hostname / hostaddr][:service / port]|参数功能在下面|\n||46 --> IPv4 or IPv6|\n||protocol --> TCP or UDP|\n||hostname --> Internet host name|\n||hostaddr --> IPv4地址|\n||service --> /etc/service中的 service name (可以不只一个)|\n||port --> 端口号 (可以不只一个)|\n","source":"_posts/linux/linux-lsof.md","raw":"title: linux-lsof  \ndate: 2016-02-04 22:18:46  \ntags: linux    \ncategories: linux  \n\n---\n\n>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。\n\n## lsof显示示例\n\nexample:以查看mongod进程为例子\n\n```\n\t$ lsof /usr/local/bin/mongod\n```\n\n结果：\n\n```\n\tCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME  \n\tmongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod\n```\n\n|COMMAND |PID |USER| FD |TYPE |DEVICE |SIZE |NODE| NAME|\n|---|---|---|---|---|---|---|---|---|\n|进程名称|进程标识符|进程所有者|文件描述符|文件类型|指定磁盘名|文件大小|索引节点|打开文件的确切名称|\n|\tmongod|  50995| jceee|  txt|    REG|    1,4 |27409336| 17133981| /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod|\n\n## lsof参数\n\n|命令|功能|\n|---|---|\n|lsof filename |显示打开指定文件的所有进程|\n|lsof -a| 表示两个参数都必须满足时才显示结果|\n|lsof -c string| 显示COMMAND列中包含指定字符的进程所有打开的文件|\n|lsof -u username |显示所属user进程打开的文件|\n|lsof -g gid |显示归属gid的进程情况|\n|lsof +d /DIR/| 显示目录下被进程打开的文件|\n|lsof +D /DIR/| 同上，但是会搜索目录下的所有目录，时间相对较长|\n|lsof -d FD |显示指定文件描述符的进程\n|lsof -n |不将IP转换为hostname，缺省是不加上-n参数\n|lsof -i |用以显示符合条件的进程情况\n|lsof -i[46] [protocol][@hostname / hostaddr][:service / port]|参数功能在下面|\n||46 --> IPv4 or IPv6|\n||protocol --> TCP or UDP|\n||hostname --> Internet host name|\n||hostaddr --> IPv4地址|\n||service --> /etc/service中的 service name (可以不只一个)|\n||port --> 端口号 (可以不只一个)|\n","slug":"linux/linux-lsof","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp581bo001ez2v8n204xbj7","sticky":0},{"title":"linux-man","date":"2016-02-13T14:18:58.000Z","_content":"\n>man是manual的缩写，是系统中提供相关条目参考信息的命令。\n\n\n如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如\n\n```\n\t$ man ls\n```\n\n会得到下面结果：\n\n```\nLS(1)                     BSD General Commands Manual                    LS(1)\n\nNAME\n     ls -- list directory contents\n\nSYNOPSIS\n     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]\n\nDESCRIPTION\n     For each operand that names a file of a type other than directory, ls displays its name as well as any requested, associated information.  For each operand that names a file of type directory, ls displays the names of files con-\n     tained within that directory, as well as any requested, associated information.\n\n     If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, non-directory operands are displayed first; directory and non-directory operands are sorted separately and in lexi-\n     cographical order.\n\n     The following options are available:\n\n     -@      Display extended attribute keys and sizes in long (-l) output.\n\n     -1      (The numeric digit ``one''.)  Force output to be one entry per line.  This is the default when output is not to a terminal.\n\n     -A      List all entries except for . and ...  Always set for the super-user.\n     \n     ...\n```\n\n我们可以看到结果中显示了LS(1),(1)代表的是`一般用户可使用的命令`。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：\n\n|数字|意义|\n|---|---|\n|1| 用户在shell环境中可以操作的命令或可执行文件|\n|2| 系统内核可调用的函数与工具等|\n|3| 一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）|\n|4| 设备文件的说明，通常是在/dev下的文件|\n|5| 配置文件或者是某些文件的格式|\n|6| 游戏（games）|\n|7| 惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明|\n|8| 系统管理员可用的管理命令|\n|9| 跟kernel有关的文件|\n\n如\n\n```\n\t$ man 2 write\n```\n\n```\nWRITE(2)                    BSD System Calls Manual                   WRITE(2)\n\nNAME\n     pwrite, write, writev -- write output\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <unistd.h>\n\n     ssize_t\n     pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);\n\n     ssize_t\n     write(int fildes, const void *buf, size_t nbyte);\n\n     #include <sys/uio.h>\n\n     ssize_t\n     writev(int fildes, const struct iovec *iov, int iovcnt);\n\n```\n\n","source":"_posts/linux/linux-man.md","raw":"title: linux-man\ndate: 2016-02-13 22:18:58\ntags: linux    \ncategories: linux  \n\n---\n\n>man是manual的缩写，是系统中提供相关条目参考信息的命令。\n\n\n如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如\n\n```\n\t$ man ls\n```\n\n会得到下面结果：\n\n```\nLS(1)                     BSD General Commands Manual                    LS(1)\n\nNAME\n     ls -- list directory contents\n\nSYNOPSIS\n     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]\n\nDESCRIPTION\n     For each operand that names a file of a type other than directory, ls displays its name as well as any requested, associated information.  For each operand that names a file of type directory, ls displays the names of files con-\n     tained within that directory, as well as any requested, associated information.\n\n     If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, non-directory operands are displayed first; directory and non-directory operands are sorted separately and in lexi-\n     cographical order.\n\n     The following options are available:\n\n     -@      Display extended attribute keys and sizes in long (-l) output.\n\n     -1      (The numeric digit ``one''.)  Force output to be one entry per line.  This is the default when output is not to a terminal.\n\n     -A      List all entries except for . and ...  Always set for the super-user.\n     \n     ...\n```\n\n我们可以看到结果中显示了LS(1),(1)代表的是`一般用户可使用的命令`。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：\n\n|数字|意义|\n|---|---|\n|1| 用户在shell环境中可以操作的命令或可执行文件|\n|2| 系统内核可调用的函数与工具等|\n|3| 一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）|\n|4| 设备文件的说明，通常是在/dev下的文件|\n|5| 配置文件或者是某些文件的格式|\n|6| 游戏（games）|\n|7| 惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明|\n|8| 系统管理员可用的管理命令|\n|9| 跟kernel有关的文件|\n\n如\n\n```\n\t$ man 2 write\n```\n\n```\nWRITE(2)                    BSD System Calls Manual                   WRITE(2)\n\nNAME\n     pwrite, write, writev -- write output\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <unistd.h>\n\n     ssize_t\n     pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);\n\n     ssize_t\n     write(int fildes, const void *buf, size_t nbyte);\n\n     #include <sys/uio.h>\n\n     ssize_t\n     writev(int fildes, const struct iovec *iov, int iovcnt);\n\n```\n\n","slug":"linux/linux-man","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp584i1001hz2v8rhkkbnue","sticky":0},{"title":"linux-nohup","date":"2016-07-02T09:33:25.000Z","_content":"\n>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程\n\n## 功能\n\nnohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。\n如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 `nohup.out` 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 `$HOME/nohup.out` 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。\n\n## 语法 \n\n```\n\t$ nohup Command [ Arg ... ] [　& ]\n```\n\nexample:\n\n```\n\t$ nohup php test.php &\n\t$ nohup php test.php >~/outFile.out 2>&1 &\n```\n\n* 0 – stdin (standard input)\n* 1 – stdout (standard output)\n* 2 – stderr (standard error)  \n\n2>&1是将标准错误（2）重定向到标准输出（&1），标准输出（&1）再被重定向输入到myout.file文件中。\n\n## 查看任务列表\n\n用`jobs`可以看到正在运行的任务\n\n```\n\t$ jobs                                                                                                                   \n[1]  + running    nohup php test.php > ~/outFile.out 2>&1\n```\n\n## 关闭任务\n\nn为任务号\n\n```\n\t$ fg %n\n```\n\n\n\n","source":"_posts/linux/linux-nohup.md","raw":"title: linux-nohup\ndate: 2016-07-02 17:33:25\ntags: linux\ncategories: linux\n\n---\n\n>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程\n\n## 功能\n\nnohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。\n如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 `nohup.out` 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 `$HOME/nohup.out` 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。\n\n## 语法 \n\n```\n\t$ nohup Command [ Arg ... ] [　& ]\n```\n\nexample:\n\n```\n\t$ nohup php test.php &\n\t$ nohup php test.php >~/outFile.out 2>&1 &\n```\n\n* 0 – stdin (standard input)\n* 1 – stdout (standard output)\n* 2 – stderr (standard error)  \n\n2>&1是将标准错误（2）重定向到标准输出（&1），标准输出（&1）再被重定向输入到myout.file文件中。\n\n## 查看任务列表\n\n用`jobs`可以看到正在运行的任务\n\n```\n\t$ jobs                                                                                                                   \n[1]  + running    nohup php test.php > ~/outFile.out 2>&1\n```\n\n## 关闭任务\n\nn为任务号\n\n```\n\t$ fg %n\n```\n\n\n\n","slug":"linux/linux-nohup","published":1,"updated":"2016-07-02T16:49:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp58ahr001kz2v8ojfrp5fs","sticky":0},{"title":"linux-ps","date":"2016-02-06T14:32:53.000Z","_content":"\n>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。\n\n\n## ps进程状态码\n\nps几种主要的状态码是:\n\n* D 不可中断 uninterruptible sleep (usually IO) \n* R 运行 runnable (on run queue) \n* S 睡眠 sleeping \n* T 停止 traced or stopped \n* Z 僵死 a defunct (”zombie”) process\n\n\n## ps列名说明\n\n|列名|说明|\n|---|---|\n|USER|该 process 属于那个使用者账号的|\n|PID |该 process 的号码|\n|%CPU|该 process 使用掉的 CPU 资源百分比|\n|%MEM|该 process 所占用的物理内存百分比|\n|VSZ |该 process 使用掉的虚拟内存量 (Kbytes)|\n|RSS |该 process 占用的固定的内存量 (Kbytes)|\n|TTY |该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。|\n|STAT|该程序目前的状态，主要的状态可以参照上面提到的|\n|START|该 process 被触发启动的时间|\n|TIME |该 process 实际使用 CPU 运作的时间|\n|COMMAND|该程序的实际指令|\n\n## px参数\n\nps常用参数\n\n* -e 显示所有进程\n* -A 所有进程均显示，与-e具有同样效果\n* -a 显示当前终端上所有进程，包括其他用户的进程\n* -u 以用户来筛选进程\n* x 显示没有控制终端的进程\n* r 显示正在运行的进程\n* -f 全格式\n\n还有更多参数可以参考\n\n```\n\t$ man ps\n```\n\n## ps使用示例\n\n### 查看特定用户进程:\n\n`ps -u <用户名>`，如查看root用户的进程\n\n```\n\t$ ps -u root\n```\nresult:\n\n```\n\t UID   PID TTY           TIME CMD\n     0     1 ??        28:43.94 /sbin/launchd\n```\n\n\n### 查看所有进程\n\n```\n $ ps -e\n```\n\nresult:\n\n```\n  PID TTY           TIME CMD\n    1 ??        28:43.16 /sbin/launchd\n```\n\n### 查看全格式的全进程\n\n```\n\t$ ps -ef\n```\nresult:\n\n```\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n    0     1     0   0 24 116  ??        28:42.63 /sbin/launchd\n```\n\n### 查看当前所有进程cpu占用情况\n\n```\n\t$ ps aux \n```\nresult:\n\n```\nUSER      PID   %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\njceee    51422   0.1  0.6  3367032 107344   ??  S    四11下午   1:36.91 /Applications/Robomongo.app/Contents/MacOS/Robomongo\n```\n\n### 根据关键字查找相关进程\n\n`ps aux | grep <进程名>`\n\n```\n\t$ ps aux | grep php-fpm\n```\n\nresult:\n\n```\njceee      53756   0.0  0.0  2493396   3460   ??  S     5:53下午   0:00.02 /usr/local/opt/php56/sbin/php-fpm --fpm-config /usr/local/etc/php/5.6/php-fpm.conf\n```","source":"_posts/linux/linux-ps.md","raw":"title: linux-ps  \ndate: 2016-02-06 22:32:53  \ntags: linux    \ncategories: linux  \n\n---\n\n>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。\n\n\n## ps进程状态码\n\nps几种主要的状态码是:\n\n* D 不可中断 uninterruptible sleep (usually IO) \n* R 运行 runnable (on run queue) \n* S 睡眠 sleeping \n* T 停止 traced or stopped \n* Z 僵死 a defunct (”zombie”) process\n\n\n## ps列名说明\n\n|列名|说明|\n|---|---|\n|USER|该 process 属于那个使用者账号的|\n|PID |该 process 的号码|\n|%CPU|该 process 使用掉的 CPU 资源百分比|\n|%MEM|该 process 所占用的物理内存百分比|\n|VSZ |该 process 使用掉的虚拟内存量 (Kbytes)|\n|RSS |该 process 占用的固定的内存量 (Kbytes)|\n|TTY |该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。|\n|STAT|该程序目前的状态，主要的状态可以参照上面提到的|\n|START|该 process 被触发启动的时间|\n|TIME |该 process 实际使用 CPU 运作的时间|\n|COMMAND|该程序的实际指令|\n\n## px参数\n\nps常用参数\n\n* -e 显示所有进程\n* -A 所有进程均显示，与-e具有同样效果\n* -a 显示当前终端上所有进程，包括其他用户的进程\n* -u 以用户来筛选进程\n* x 显示没有控制终端的进程\n* r 显示正在运行的进程\n* -f 全格式\n\n还有更多参数可以参考\n\n```\n\t$ man ps\n```\n\n## ps使用示例\n\n### 查看特定用户进程:\n\n`ps -u <用户名>`，如查看root用户的进程\n\n```\n\t$ ps -u root\n```\nresult:\n\n```\n\t UID   PID TTY           TIME CMD\n     0     1 ??        28:43.94 /sbin/launchd\n```\n\n\n### 查看所有进程\n\n```\n $ ps -e\n```\n\nresult:\n\n```\n  PID TTY           TIME CMD\n    1 ??        28:43.16 /sbin/launchd\n```\n\n### 查看全格式的全进程\n\n```\n\t$ ps -ef\n```\nresult:\n\n```\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n    0     1     0   0 24 116  ??        28:42.63 /sbin/launchd\n```\n\n### 查看当前所有进程cpu占用情况\n\n```\n\t$ ps aux \n```\nresult:\n\n```\nUSER      PID   %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\njceee    51422   0.1  0.6  3367032 107344   ??  S    四11下午   1:36.91 /Applications/Robomongo.app/Contents/MacOS/Robomongo\n```\n\n### 根据关键字查找相关进程\n\n`ps aux | grep <进程名>`\n\n```\n\t$ ps aux | grep php-fpm\n```\n\nresult:\n\n```\njceee      53756   0.0  0.0  2493396   3460   ??  S     5:53下午   0:00.02 /usr/local/opt/php56/sbin/php-fpm --fpm-config /usr/local/etc/php/5.6/php-fpm.conf\n```","slug":"linux/linux-ps","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp58dus001nz2v8p91lz2eb","sticky":0},{"title":"mysql case的用法","date":"2016-01-14T15:15:47.000Z","_content":"\n>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 \n\n现在我们先建一个公司职员表来试一下：\n\n|id|department|name|wages|sex|\n|---|---|---|---|---|\n|1|人事部|aimer|8500|1|\n|2|人事部|jack|6000|2|\n|3|销售部|tom|15000|2|\n|4|销售部|tony|9000|2|\n|5|人事部|supercell|8500|1|\n|6|销售部|lisa|18000|1|\n\n## 在查询结果中用case\n\nsex字段中，1是女士，2是男士  \nwages字段中，薪酬的级别分布是这样：  \nt10: 5000 < wages <= 6500  \nt9: 6500 < wages <= 8500  \nt8: 8500 < wages <= 11000  \nt7: 11000 < wages <= 14000  \nt6: 14000 < wages <= 17500\nt5: 17500 < wages <= 22000\nt4: 22000 < wages <= 27000\n  \n如果我们要在查询结果中清析地表现出来可以这样：\n\n```\n\tSELECT \n\t\tdepartment,name,\n\t\t\tCASE \n\t\t\tWHEN 5000<wages AND wages<=6500 THEN 't10'\n\t\t\tWHEN 6500 < wages AND wages <= 8500 THEN 't9'\n\t\t\tWHEN 8500 < wages AND wages <= 11000 THEN 't8'\n\t\t\tWHEN 11000 < wages AND wages <= 14000 THEN 't7'\n\t\t\tWHEN 14000 < wages AND wages <= 17500 THEN 't6'\n\t\t\tWHEN 17500 < wages AND wages <= 22000 THEN 't5'\n\t\t\tWHEN 22000 < wages AND wages <= 27000 THEN 't6'\n            ELSE '未定义级别'\n            END as wages\n\t\t\t,\n\t\t\tCASE  \n\t\t\tWHEN sex = 1 THEN '女'\n\t\t\tWHEN sex = 2 THEN '男'\n\t\t\tELSE '未知性别'\n\t\t\tEND as sex\n\tFROM\n\t\t`cdb_member`\n```\n结果如下:\n\n|department|name|wages|sex|\n|---|---|---|---|\n|人事部|aimer|t9\t|女|\n|人事部|jack|t10|\t男|\n|销售部|tom|\tt6|\t女|\n|销售部|tony|t8\t|女|\n|人事部|supercell|t9|\t男|\n|销售部|lisa|t5\t|男|\n\n## 在统计结果中用case\n\n如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：\n\n```\n\tSELECT \n\t\tdepartment,\n\t\tSUM(CASE WHEN sex = 1 THEN 1 ELSE 0 END) as 'man',\n\t\tSUM(CASE WHEN sex = 2 THEN 1 ELSE 0 END) as 'woman',\n\t\tSUM(CASE WHEN 5000 < wages AND wages <= 6500 THEN 1 ELSE 0 END ) AS 't10',\n\t\tSUM(CASE WHEN 6500 < wages AND wages <= 8500 THEN 1 ELSE 0 END ) AS 't9',\n\t\tSUM(CASE WHEN 8500 < wages AND wages <= 11000 THEN 1 ELSE 0 END ) AS 't8',\n\t\tSUM(CASE WHEN 11000 < wages AND wages <= 14000 THEN 1 ELSE 0 END ) AS 't7',\n\t\tSUM(CASE WHEN 14000 < wages AND wages <= 17500 THEN 1 ELSE 0 END ) AS 't6',\n\t\tSUM(CASE WHEN 17500 < wages AND wages <= 22000 THEN 1 ELSE 0 END ) AS 't5',\n\t\tSUM(CASE WHEN 22000 < wages AND wages <= 27000 THEN 1 ELSE 0 END ) AS 't4'\n\tFROM\n\t\t`cdb_member`\n    GROUP BY \n    department\n```\n\n|department|man|woman|t10|t9|t8|t7|t6|t5|t4|\n|---|---|---|---|---|---|---|---|---|---|\n|人事部\t|1|\t2|\t1|\t2|\t0|\t0\t|0|\t0|\t0|\n|销售部\t|2\t|1|\t0\t|0|\t1|\t0\t|1\t|1|\t0|\n","source":"_posts/mysql/mysql-case.md","raw":"title: mysql case的用法  \ndate: 2016-01-14 23:15:47  \ncategories: mysql  \ntags: mysql  \n\n---\n\n>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 \n\n现在我们先建一个公司职员表来试一下：\n\n|id|department|name|wages|sex|\n|---|---|---|---|---|\n|1|人事部|aimer|8500|1|\n|2|人事部|jack|6000|2|\n|3|销售部|tom|15000|2|\n|4|销售部|tony|9000|2|\n|5|人事部|supercell|8500|1|\n|6|销售部|lisa|18000|1|\n\n## 在查询结果中用case\n\nsex字段中，1是女士，2是男士  \nwages字段中，薪酬的级别分布是这样：  \nt10: 5000 < wages <= 6500  \nt9: 6500 < wages <= 8500  \nt8: 8500 < wages <= 11000  \nt7: 11000 < wages <= 14000  \nt6: 14000 < wages <= 17500\nt5: 17500 < wages <= 22000\nt4: 22000 < wages <= 27000\n  \n如果我们要在查询结果中清析地表现出来可以这样：\n\n```\n\tSELECT \n\t\tdepartment,name,\n\t\t\tCASE \n\t\t\tWHEN 5000<wages AND wages<=6500 THEN 't10'\n\t\t\tWHEN 6500 < wages AND wages <= 8500 THEN 't9'\n\t\t\tWHEN 8500 < wages AND wages <= 11000 THEN 't8'\n\t\t\tWHEN 11000 < wages AND wages <= 14000 THEN 't7'\n\t\t\tWHEN 14000 < wages AND wages <= 17500 THEN 't6'\n\t\t\tWHEN 17500 < wages AND wages <= 22000 THEN 't5'\n\t\t\tWHEN 22000 < wages AND wages <= 27000 THEN 't6'\n            ELSE '未定义级别'\n            END as wages\n\t\t\t,\n\t\t\tCASE  \n\t\t\tWHEN sex = 1 THEN '女'\n\t\t\tWHEN sex = 2 THEN '男'\n\t\t\tELSE '未知性别'\n\t\t\tEND as sex\n\tFROM\n\t\t`cdb_member`\n```\n结果如下:\n\n|department|name|wages|sex|\n|---|---|---|---|\n|人事部|aimer|t9\t|女|\n|人事部|jack|t10|\t男|\n|销售部|tom|\tt6|\t女|\n|销售部|tony|t8\t|女|\n|人事部|supercell|t9|\t男|\n|销售部|lisa|t5\t|男|\n\n## 在统计结果中用case\n\n如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：\n\n```\n\tSELECT \n\t\tdepartment,\n\t\tSUM(CASE WHEN sex = 1 THEN 1 ELSE 0 END) as 'man',\n\t\tSUM(CASE WHEN sex = 2 THEN 1 ELSE 0 END) as 'woman',\n\t\tSUM(CASE WHEN 5000 < wages AND wages <= 6500 THEN 1 ELSE 0 END ) AS 't10',\n\t\tSUM(CASE WHEN 6500 < wages AND wages <= 8500 THEN 1 ELSE 0 END ) AS 't9',\n\t\tSUM(CASE WHEN 8500 < wages AND wages <= 11000 THEN 1 ELSE 0 END ) AS 't8',\n\t\tSUM(CASE WHEN 11000 < wages AND wages <= 14000 THEN 1 ELSE 0 END ) AS 't7',\n\t\tSUM(CASE WHEN 14000 < wages AND wages <= 17500 THEN 1 ELSE 0 END ) AS 't6',\n\t\tSUM(CASE WHEN 17500 < wages AND wages <= 22000 THEN 1 ELSE 0 END ) AS 't5',\n\t\tSUM(CASE WHEN 22000 < wages AND wages <= 27000 THEN 1 ELSE 0 END ) AS 't4'\n\tFROM\n\t\t`cdb_member`\n    GROUP BY \n    department\n```\n\n|department|man|woman|t10|t9|t8|t7|t6|t5|t4|\n|---|---|---|---|---|---|---|---|---|---|\n|人事部\t|1|\t2|\t1|\t2|\t0|\t0\t|0|\t0|\t0|\n|销售部\t|2\t|1|\t0\t|0|\t1|\t0\t|1\t|1|\t0|\n","slug":"mysql/mysql-case","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp58j2v001qz2v885wuebpc","sticky":0},{"title":"distinct 排重查询","date":"2015-01-11T13:06:35.000Z","_content":"\n>distinct 的作用是根据某字段或某些字段去除重复数据  \n\n\n example,student表结构数据如下    \n\nid | class | name   \n--- | --- | ---\n1 | 1 | jacky\n2 | 1 | jacky\n3 | 1 | tom\n4 | 2 | alen\n5 | 2 | jacky\n6 | 4 | jacky\n\n\n# 查询  \n\n## 查询粟子1:单个排重\n\n```\nselect distinct name from student\n```\n搜索结果：\n\n| name |   \n| --- |\n| jacky |\n| tom |\n| alen |\n\n对name进行去重，但搜索结果只有name这个字段\n\n## 查询粟子2：组合排重\n\n```\nselect distinct name, class from student\n\n```\n则是对 (name, class) 组合起来去重。搜索结果是：\n\n| name | class |\n| --- | --- |\n| jackey |\t1 |\n| tom |\t1 |\n| alen\t| 2 |\n| jackey\t| 2 |\n| jackey\t| 4 |\n\n# 统计  \n\n## 统计粟子1：单个排重统计\n\n```\nselect count(distinct name) from student\n```\n\n结果：3 (去重后的name只有jackey,tom,alen)  \n同理也可以进行组合去重统计\n\n## 统计粟子2： 组合排重统计\n\n```\nselect count(distinct name, class) from student\n\n```\n\n结果： 5\n\n---\n\n\n\n\n\n\n","source":"_posts/mysql/mysql-distinct.md","raw":"title: distinct 排重查询\ndate: 2015-1-11 21:06:35\ncategories: mysql\ntags: [mysql,distinct]\n\n---\n\n>distinct 的作用是根据某字段或某些字段去除重复数据  \n\n\n example,student表结构数据如下    \n\nid | class | name   \n--- | --- | ---\n1 | 1 | jacky\n2 | 1 | jacky\n3 | 1 | tom\n4 | 2 | alen\n5 | 2 | jacky\n6 | 4 | jacky\n\n\n# 查询  \n\n## 查询粟子1:单个排重\n\n```\nselect distinct name from student\n```\n搜索结果：\n\n| name |   \n| --- |\n| jacky |\n| tom |\n| alen |\n\n对name进行去重，但搜索结果只有name这个字段\n\n## 查询粟子2：组合排重\n\n```\nselect distinct name, class from student\n\n```\n则是对 (name, class) 组合起来去重。搜索结果是：\n\n| name | class |\n| --- | --- |\n| jackey |\t1 |\n| tom |\t1 |\n| alen\t| 2 |\n| jackey\t| 2 |\n| jackey\t| 4 |\n\n# 统计  \n\n## 统计粟子1：单个排重统计\n\n```\nselect count(distinct name) from student\n```\n\n结果：3 (去重后的name只有jackey,tom,alen)  \n同理也可以进行组合去重统计\n\n## 统计粟子2： 组合排重统计\n\n```\nselect count(distinct name, class) from student\n\n```\n\n结果： 5\n\n---\n\n\n\n\n\n\n","slug":"mysql/mysql-distinct","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp58mdk001tz2v8h4cuukav","sticky":0},{"title":"多条insert语句合并","date":"2014-09-14T14:37:00.000Z","_content":"\n表a君Article内容如下：\n\n|key|value|\n|---|---|\n|id | int|\n|name|string|\n|title|strit|\n\n\n现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：\n\n```\nINSERT INTO `Article`(`name`,`title`)VALUES ('name1','title1');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name2','title2');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name3','title3');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name4','title4');\n...\n```\n\n之后发现了sql的insert语句可以含多个参数:\n\n```\nINSERT INTO `Article`(`name`,`title`)\nVALUES ('name1','title1'),\nVALUES ('name2','title2'),\nVALUES ('name3','title3'),\nVALUES ('name4','title4'),\n...;\n```\n\n这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。\n\n所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。\n\n","source":"_posts/mysql/mysql-insertMoreThanOne.md","raw":"title: 多条insert语句合并  \ndate: 2014-09-14 22:37  \ncategories: mysql  \ntags: mysql  \n\n---\n\n表a君Article内容如下：\n\n|key|value|\n|---|---|\n|id | int|\n|name|string|\n|title|strit|\n\n\n现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：\n\n```\nINSERT INTO `Article`(`name`,`title`)VALUES ('name1','title1');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name2','title2');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name3','title3');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name4','title4');\n...\n```\n\n之后发现了sql的insert语句可以含多个参数:\n\n```\nINSERT INTO `Article`(`name`,`title`)\nVALUES ('name1','title1'),\nVALUES ('name2','title2'),\nVALUES ('name3','title3'),\nVALUES ('name4','title4'),\n...;\n```\n\n这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。\n\n所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。\n\n","slug":"mysql/mysql-insertMoreThanOne","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp58suz001xz2v81rhj13nl","sticky":0},{"title":"mysql修改表结构语句","date":"2015-09-24T15:02:00.000Z","_content":"\n## 首先，创建一个测试表 tableA\n\n```\n\tCREATE TABLE `tableA` (\n\t `createTime` int(10) unsigned NOT NULL default 0 COMMENT 'createTime'\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 增加字段\n\n格式：\n\n```\n\tALTER TABLE tableName ADD newField TYPE; \n```\n  \n增加主键粟子:\n\n```\n\tALTER TABLE tableA ADD id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT  COMMENT 'id' ,ADD PRIMARY KEY(id);\n```\n\n增加元素粟子:\n\n```\n\tALTER TABLE tableA ADD nameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `nameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n\n## 修改字段\n\n格式：\n\n```\n\tALTER TABLE tableName CHANGE oldField newField TYPE; \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除字段\n\n格式：\n\n```\n\tALTER TABLE tableName DROP COLUMN removeField;  \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA DROP COLUMN createTime;\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 创建索引\n\n格式：\n\n```\n\tCREATE INDEX KeyName ON tableName(fieldOneName,fieldTwoName);\n```\n\n粟子：\n\n```\n\tCREATE INDEX `newNameStr` ON `tableA`(newNameStr);\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`),\n\t  KEY `newNameStr` (`newNameStr`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除索引\n\n格式：\n\n```\n\tDROP INDEX KeyName ON tableName;\n```\n\n粟子：\n\n```\n\tDROP INDEX `newNameStr` ON `tableA`;\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```","source":"_posts/mysql/mysql-modifySql.md","raw":"title: mysql修改表结构语句\ndate: 2015-09-24 23:02\ncategories: mysql\ntags: mysql\n\n---\n\n## 首先，创建一个测试表 tableA\n\n```\n\tCREATE TABLE `tableA` (\n\t `createTime` int(10) unsigned NOT NULL default 0 COMMENT 'createTime'\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 增加字段\n\n格式：\n\n```\n\tALTER TABLE tableName ADD newField TYPE; \n```\n  \n增加主键粟子:\n\n```\n\tALTER TABLE tableA ADD id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT  COMMENT 'id' ,ADD PRIMARY KEY(id);\n```\n\n增加元素粟子:\n\n```\n\tALTER TABLE tableA ADD nameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `nameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n\n## 修改字段\n\n格式：\n\n```\n\tALTER TABLE tableName CHANGE oldField newField TYPE; \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除字段\n\n格式：\n\n```\n\tALTER TABLE tableName DROP COLUMN removeField;  \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA DROP COLUMN createTime;\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 创建索引\n\n格式：\n\n```\n\tCREATE INDEX KeyName ON tableName(fieldOneName,fieldTwoName);\n```\n\n粟子：\n\n```\n\tCREATE INDEX `newNameStr` ON `tableA`(newNameStr);\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`),\n\t  KEY `newNameStr` (`newNameStr`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除索引\n\n格式：\n\n```\n\tDROP INDEX KeyName ON tableName;\n```\n\n粟子：\n\n```\n\tDROP INDEX `newNameStr` ON `tableA`;\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```","slug":"mysql/mysql-modifySql","published":1,"updated":"2016-05-27T03:52:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp591k00020z2v8z6xgqu6c","sticky":0},{"title":"mysql[ON DUPLICE KEY UPDATE]","date":"2016-06-10T09:37:51.000Z","_content":"\n## ON DUPLICE KEY UPDATE\n\n[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.\n\n## 测试表\n\n表结构：\n\n```\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(70) COLLATE utf8_unicode_ci DEFAULT NULL,\n  `body` longtext COLLATE utf8_unicode_ci,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n其中`id`为PRIMARY KEY\n表数据：\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+--------+-------+\n\t| id | title  | body  |\n\t+----+--------+-------+\n\t|  1 | title1 | NULL  |\n\t|  2 | title2 | body2 |\n\t| 12 | title1 | body3 |\n\t| 13 | title1 | body4 |\n\t| 14 | NULL   | body5 |\n\t+----+--------+-------+\n```\n\n## 插入一条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 2 rows affected (0.00 sec)\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+-----------+----------+\n\t| id | title     | body     |\n\t+----+-----------+----------+\n\t|  1 | titleTest | bodyTest |\n\t|  2 | title2    | body2    |\n\t| 12 | title1    | body3    |\n\t| 13 | title1    | body4    |\n\t| 14 | NULL      | body5    |\n\t+----+-----------+----------+\n```\n\n## 插入多条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest'),('2','titleTest2','bodyTest2'),('3','titleTest3','bodyTest3') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 1  Warnings: 0\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;                                                                                                                                                           +----+------------+-----------+\n\t| id | title      | body      |\n\t+----+------------+-----------+\n\t|  1 | titleTest  | bodyTest  |\n\t|  2 | titleTest2 | bodyTest2 |\n\t|  3 | titleTest3 | bodyTest3 |\n\t| 12 | title1     | body3     |\n\t| 13 | title1     | body4     |\n\t| 14 | NULL       | body5     |\n\t+----+------------+-----------+\n\t6 rows in set (0.00 sec)\n```\n\n因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据","source":"_posts/mysql/mysql-on-duplice-key-update.md","raw":"title: mysql[ON DUPLICE KEY UPDATE]  \ndate: 2016-06-10 17:37:51  \ncategories: mysql\ntags: mysql\n\n---\n\n## ON DUPLICE KEY UPDATE\n\n[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.\n\n## 测试表\n\n表结构：\n\n```\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(70) COLLATE utf8_unicode_ci DEFAULT NULL,\n  `body` longtext COLLATE utf8_unicode_ci,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n其中`id`为PRIMARY KEY\n表数据：\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+--------+-------+\n\t| id | title  | body  |\n\t+----+--------+-------+\n\t|  1 | title1 | NULL  |\n\t|  2 | title2 | body2 |\n\t| 12 | title1 | body3 |\n\t| 13 | title1 | body4 |\n\t| 14 | NULL   | body5 |\n\t+----+--------+-------+\n```\n\n## 插入一条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 2 rows affected (0.00 sec)\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+-----------+----------+\n\t| id | title     | body     |\n\t+----+-----------+----------+\n\t|  1 | titleTest | bodyTest |\n\t|  2 | title2    | body2    |\n\t| 12 | title1    | body3    |\n\t| 13 | title1    | body4    |\n\t| 14 | NULL      | body5    |\n\t+----+-----------+----------+\n```\n\n## 插入多条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest'),('2','titleTest2','bodyTest2'),('3','titleTest3','bodyTest3') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 1  Warnings: 0\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;                                                                                                                                                           +----+------------+-----------+\n\t| id | title      | body      |\n\t+----+------------+-----------+\n\t|  1 | titleTest  | bodyTest  |\n\t|  2 | titleTest2 | bodyTest2 |\n\t|  3 | titleTest3 | bodyTest3 |\n\t| 12 | title1     | body3     |\n\t| 13 | title1     | body4     |\n\t| 14 | NULL       | body5     |\n\t+----+------------+-----------+\n\t6 rows in set (0.00 sec)\n```\n\n因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据","slug":"mysql/mysql-on-duplice-key-update","published":1,"updated":"2016-06-11T08:11:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5960j0023z2v822t9cu9i","sticky":0},{"title":"mysql 字符串函数","date":"2016-05-22T14:58:20.000Z","_content":"\n# test table\n\n使用一个测试表：\n\n```\nmysql> select * from news ;\n+----+--------+-------+\n| id | title  | body  |\n+----+--------+-------+\n|  1 | title1 | NULL  |\n|  2 | title2 | body2 |\n| 12 | title1 | body3 |\n| 13 | title1 | body4 |\n| 14 | NULL   | body5 |\n+----+--------+-------+\n```\n\n# concat\n\n使用方法：\n\n```\n\tCONCAT(str1,str2,...)\n```\n\n返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.\n\nEXAMPLE:\n\n```\nmysql> select concat(id, '-', title, '-', body) from news ;\n+-----------------------------------+\n| concat(id, '-', title, '-', body) |\n+-----------------------------------+\n| NULL                              |\n| 2-title2-body2                    |\n| 12-title1-body3                   |\n| 13-title1-body4                   |\n| NULL                              |\n+-----------------------------------+\n```\n\n# concat_ws\n\n使用方法：\n\n```\n\tCONCAT_WS(separator,str1,str2,...)\n```\n\nconcat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过\n\nEXAMPLE:\n\n```\nmysql> select concat_ws('-', title, body) from news ;\n+-----------------------------+\n| concat_ws('-', title, body) |\n+-----------------------------+\n| title1                      |\n| title2-body2                |\n| title1-body3                |\n| title1-body4                |\n| body5                       |\n+-----------------------------+\n```\n\n# group_concat\n\n使用方法\n\n```\n\tGROUP_CONCAT([DISTINCT] Field [ORDER BY ASC/DESC SortField] [separator Separator])\n```\n\ngroup_concat是把结果数据按字段Field连接起来，默认分隔符是`,`,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。\n\nEXAMPLE:\n\n```\nmysql> select group_concat(title) from news ;\n+-----------------------------+\n| group_concat(title)         |\n+-----------------------------+\n| title1,title2,title1,title1 |\n+-----------------------------+\n```\n\n```\nmysql> select group_concat(distinct title order by id desc separator ';') from news ;\n+-------------------------------------------------------------+\n| group_concat(distinct title order by id desc separator ';') |\n+-------------------------------------------------------------+\n| title2;title1                                               |\n+-------------------------------------------------------------+\n```\n\n```\nmysql> select title,group_concat(distinct body order by id desc separator ';') from news group by title;\n+--------+------------------------------------------------------------+\n| title  | group_concat(distinct body order by id desc separator ';') |\n+--------+------------------------------------------------------------+\n| NULL   | body5                                                      |\n| title1 | body4;body3                                                |\n| title2 | body2                                                      |\n+--------+------------------------------------------------------------+\n```\n\n# repeat\n\n使用方法\n\n```\nrepeat(str, repeatTime)\n```\n\n将str循环repeatTime次\n\nEXAMPLE\n\n```\nmysql> select repeat('test', 4);\n+-------------------+\n| repeat('test', 4) |\n+-------------------+\n| testtesttesttest  |\n+-------------------+\n```\n\n```\nmysql> select repeat(body, 4) from news;\n+----------------------+\n| repeat(body, 4)      |\n+----------------------+\n| NULL                 |\n| body2body2body2body2 |\n| body3body3body3body3 |\n| body4body4body4body4 |\n| body5body5body5body5 |\n+----------------------+\n```","source":"_posts/mysql/mysql-strimg.md","raw":"title: mysql 字符串函数  \ndate: 2016-05-22 22:58:20  \ncategories: mysql  \ntags: mysql  \n\n---\n\n# test table\n\n使用一个测试表：\n\n```\nmysql> select * from news ;\n+----+--------+-------+\n| id | title  | body  |\n+----+--------+-------+\n|  1 | title1 | NULL  |\n|  2 | title2 | body2 |\n| 12 | title1 | body3 |\n| 13 | title1 | body4 |\n| 14 | NULL   | body5 |\n+----+--------+-------+\n```\n\n# concat\n\n使用方法：\n\n```\n\tCONCAT(str1,str2,...)\n```\n\n返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.\n\nEXAMPLE:\n\n```\nmysql> select concat(id, '-', title, '-', body) from news ;\n+-----------------------------------+\n| concat(id, '-', title, '-', body) |\n+-----------------------------------+\n| NULL                              |\n| 2-title2-body2                    |\n| 12-title1-body3                   |\n| 13-title1-body4                   |\n| NULL                              |\n+-----------------------------------+\n```\n\n# concat_ws\n\n使用方法：\n\n```\n\tCONCAT_WS(separator,str1,str2,...)\n```\n\nconcat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过\n\nEXAMPLE:\n\n```\nmysql> select concat_ws('-', title, body) from news ;\n+-----------------------------+\n| concat_ws('-', title, body) |\n+-----------------------------+\n| title1                      |\n| title2-body2                |\n| title1-body3                |\n| title1-body4                |\n| body5                       |\n+-----------------------------+\n```\n\n# group_concat\n\n使用方法\n\n```\n\tGROUP_CONCAT([DISTINCT] Field [ORDER BY ASC/DESC SortField] [separator Separator])\n```\n\ngroup_concat是把结果数据按字段Field连接起来，默认分隔符是`,`,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。\n\nEXAMPLE:\n\n```\nmysql> select group_concat(title) from news ;\n+-----------------------------+\n| group_concat(title)         |\n+-----------------------------+\n| title1,title2,title1,title1 |\n+-----------------------------+\n```\n\n```\nmysql> select group_concat(distinct title order by id desc separator ';') from news ;\n+-------------------------------------------------------------+\n| group_concat(distinct title order by id desc separator ';') |\n+-------------------------------------------------------------+\n| title2;title1                                               |\n+-------------------------------------------------------------+\n```\n\n```\nmysql> select title,group_concat(distinct body order by id desc separator ';') from news group by title;\n+--------+------------------------------------------------------------+\n| title  | group_concat(distinct body order by id desc separator ';') |\n+--------+------------------------------------------------------------+\n| NULL   | body5                                                      |\n| title1 | body4;body3                                                |\n| title2 | body2                                                      |\n+--------+------------------------------------------------------------+\n```\n\n# repeat\n\n使用方法\n\n```\nrepeat(str, repeatTime)\n```\n\n将str循环repeatTime次\n\nEXAMPLE\n\n```\nmysql> select repeat('test', 4);\n+-------------------+\n| repeat('test', 4) |\n+-------------------+\n| testtesttesttest  |\n+-------------------+\n```\n\n```\nmysql> select repeat(body, 4) from news;\n+----------------------+\n| repeat(body, 4)      |\n+----------------------+\n| NULL                 |\n| body2body2body2body2 |\n| body3body3body3body3 |\n| body4body4body4body4 |\n| body5body5body5body5 |\n+----------------------+\n```","slug":"mysql/mysql-strimg","published":1,"updated":"2016-05-22T16:00:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp59fdt0026z2v8upf776q9","sticky":0},{"title":"mysql的时间转换函数","date":"2015-07-05T13:42:00.000Z","_content":"\n## 格式化时间戳FROM_UNIXTIME\n\n`FROM_UNIXTIME(unix_timestamp, format)`第一个参数是时间戳格式。 第二个是最终想转换的格式，如\n\n```\n\tSELECT FROM_UNIXTIME(1436102304,'%Y年%m月%d日') as date;\n```\n\n结果:\n                \n```\n\tdate     :       2015年07月05日\n```\n\n\n## 字符串转换unix时间戳UNIX_TIMESTAMP\n\n`UNIX_TIMESTAMP(date)` 是将时间转化为时间戳，如 \n\n```\n\tSELECT UNIX_TIMESTAMP('2015-07-05');  \n```\n\n结果是：\n\n```\n\t1436068800\n```\n\n示例：找出2015-05到2015-07 log表中的记录:\n\n```\n       SELECT id, FROM_UNIXTIME(time,'%Y-%m-%d') as date \n       FROM log \n       WHERE  time BETWEEN UNIX_TIMESTAMP('2015-05-01') AND UNIX_TIMESTAMP('2015-07-01');\n```       ","source":"_posts/mysql/mysql-timeMethod.md","raw":"title: mysql的时间转换函数\ndate: 2015-07-05 21:42\ncategories: mysql\ntags: mysql\n\n---\n\n## 格式化时间戳FROM_UNIXTIME\n\n`FROM_UNIXTIME(unix_timestamp, format)`第一个参数是时间戳格式。 第二个是最终想转换的格式，如\n\n```\n\tSELECT FROM_UNIXTIME(1436102304,'%Y年%m月%d日') as date;\n```\n\n结果:\n                \n```\n\tdate     :       2015年07月05日\n```\n\n\n## 字符串转换unix时间戳UNIX_TIMESTAMP\n\n`UNIX_TIMESTAMP(date)` 是将时间转化为时间戳，如 \n\n```\n\tSELECT UNIX_TIMESTAMP('2015-07-05');  \n```\n\n结果是：\n\n```\n\t1436068800\n```\n\n示例：找出2015-05到2015-07 log表中的记录:\n\n```\n       SELECT id, FROM_UNIXTIME(time,'%Y-%m-%d') as date \n       FROM log \n       WHERE  time BETWEEN UNIX_TIMESTAMP('2015-05-01') AND UNIX_TIMESTAMP('2015-07-01');\n```       ","slug":"mysql/mysql-timeMethod","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp59i1r0029z2v8a0adzqbo","sticky":0},{"title":"订阅发布者模式","date":"2016-04-04T09:21:45.000Z","_content":"\n>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。\n\n## 订阅发布者\n\n我们创建一个简单的订阅发布者，基本的4个方法：\n\n* registerSubscriber 注册订阅者\n* removeSubscriber   订阅的取消\n* publish            消息推送\n* sortList           消息推送排序\n\n```\n\nclass DispatcherPattern\n{\n    protected $subList = array();\n\n    public function registerSubscriber($name, $callback)\n    {\n        $this->subList[$name] = $callback;\n    }\n\n    public function removeSubscriber($name){\n        if (isset($this->subList[$name])) {\n            unset($this->subList[$name]);\n        }\n    }\n\n    public function publish($params)\n    {\n        if (empty($this->subList) || !is_array($this->subList)) {\n            return 'null';\n        }\n        foreach ($this->subList as $callback) {\n            call_user_func_array($callback, $params);\n        }\n    }\n\n    public function sortList()\n    {\n        ksort($this->subList);\n    }\n}\n```\n\n## 订阅体\n\n接着我们创建一个用户对象,用户对象有增加积分的功能\n\n```\nclass User\n{\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function addScore($score)\n    {\n        printf( $this->name . ' add Score :' . $score . \"\\r\\n\");\n    }\n}\n```\n\n## 通过订阅发布者模式为用户增加积分\n\n```\n$score = 1;\n\n$dispatcher = new DispatcherPattern();\n\n$dispatcher->registerSubscriber('0', function()\n{\n    printf( \"this is first handle \\r\\n\");\n});\n\n$dispatcher->registerSubscriber('3', array(new User('user3'), 'addScore'));\n$dispatcher->registerSubscriber('1', array(new User('user1'), 'addScore'));\n$dispatcher->registerSubscriber('2', array(new User('user2'), 'addScore'));\n\n$dispatcher->removeSubscriber('2');\n\n$dispatcher->sortList();\n$dispatcher->publish(array($score));\n\n```\n\nresult:\n\n```\nthis is first handle \nuser1 add Score :1 \nuser3 add Score :1 \n```","source":"_posts/patterns/pattern-pub-sub.md","raw":"title: 订阅发布者模式\ndate: 2016-04-04 17:21:45\ncategories: pattern \ntags: [pattern,php]\n\n---\n\n>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。\n\n## 订阅发布者\n\n我们创建一个简单的订阅发布者，基本的4个方法：\n\n* registerSubscriber 注册订阅者\n* removeSubscriber   订阅的取消\n* publish            消息推送\n* sortList           消息推送排序\n\n```\n\nclass DispatcherPattern\n{\n    protected $subList = array();\n\n    public function registerSubscriber($name, $callback)\n    {\n        $this->subList[$name] = $callback;\n    }\n\n    public function removeSubscriber($name){\n        if (isset($this->subList[$name])) {\n            unset($this->subList[$name]);\n        }\n    }\n\n    public function publish($params)\n    {\n        if (empty($this->subList) || !is_array($this->subList)) {\n            return 'null';\n        }\n        foreach ($this->subList as $callback) {\n            call_user_func_array($callback, $params);\n        }\n    }\n\n    public function sortList()\n    {\n        ksort($this->subList);\n    }\n}\n```\n\n## 订阅体\n\n接着我们创建一个用户对象,用户对象有增加积分的功能\n\n```\nclass User\n{\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function addScore($score)\n    {\n        printf( $this->name . ' add Score :' . $score . \"\\r\\n\");\n    }\n}\n```\n\n## 通过订阅发布者模式为用户增加积分\n\n```\n$score = 1;\n\n$dispatcher = new DispatcherPattern();\n\n$dispatcher->registerSubscriber('0', function()\n{\n    printf( \"this is first handle \\r\\n\");\n});\n\n$dispatcher->registerSubscriber('3', array(new User('user3'), 'addScore'));\n$dispatcher->registerSubscriber('1', array(new User('user1'), 'addScore'));\n$dispatcher->registerSubscriber('2', array(new User('user2'), 'addScore'));\n\n$dispatcher->removeSubscriber('2');\n\n$dispatcher->sortList();\n$dispatcher->publish(array($score));\n\n```\n\nresult:\n\n```\nthis is first handle \nuser1 add Score :1 \nuser3 add Score :1 \n```","slug":"patterns/pattern-pub-sub","published":1,"updated":"2016-04-04T09:26:01.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5b6n0002cz2v8je513djq","sticky":0},{"title":"PHP的自动加载","date":"2014-12-28T10:13:00.000Z","_content":"\n以前php的加载是通过`include()`,`require()`等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。\n\n这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:\n\n```\nfunction __autoload($classname)\n{\n\t$classpath = './' . $classname . '.php';\n\tif (file_exists($classpath)) {\n\t    require_once($classpath);\n\t}else {\n\t    echo 'class file'.$classpath.'not found!';\n\t}\n}\n \nvar_dump(spl_autoload_functions());\nspl_autoload_register('newAutoload');\nvar_dump(spl_autoload_functions());\n \n$testObj1 = getInstance('test');\n$testObj2 = getInstance('test');\n$testObj3 = getInstance('test');\n \nfunction getInstance($class, $returnInstance = false)\n{\n    return new $class();\n}\n \nfunction newAutoload($classname)\n{ \n    $classpath = './' . $classname . '.php';\n    if (file_exists($classpath)) {\n        var_dump('require success');\n        require_once($classpath);\n    } else {\n        echo 'class file ' . $classpath . ' not found!';\n    }\n}\n//array\n//  0 => string '__autoload' (length=10)\n//array\n//  0 => string 'newAutoload' (length=11)\n//string 'require success' (length=15)\n```\n\n`spl_autoload_functions()` 方法是用来查看当前自动加载的方法，当前有个`__autoload`魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 `spl_autoload_register()` 方法是通过方法名将一个方法注册到自动加载方法，这里用`newAutoload`方法来替换`__autoload`方法。\n\n`newAutoload`方法中，我们定义一下，每执行成功一次，打印一句'require success'，这里只打印了一次，说明了虽然实例了3次`test`，但因为`test`类已经加载过一次，就不会再执行自动加载的方法。通过`getInstance()`这种加载类的方法，比以前的`include()`之类的方便多了，只需要加载这个写了`getInstance()`方法的文件就可以了。\n\n重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。\n","source":"_posts/php/php-authoload.md","raw":"title: PHP的自动加载\ndate: 2014-12-28 18:13\ncategories: php  \ntags: php\n\n---\n\n以前php的加载是通过`include()`,`require()`等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。\n\n这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:\n\n```\nfunction __autoload($classname)\n{\n\t$classpath = './' . $classname . '.php';\n\tif (file_exists($classpath)) {\n\t    require_once($classpath);\n\t}else {\n\t    echo 'class file'.$classpath.'not found!';\n\t}\n}\n \nvar_dump(spl_autoload_functions());\nspl_autoload_register('newAutoload');\nvar_dump(spl_autoload_functions());\n \n$testObj1 = getInstance('test');\n$testObj2 = getInstance('test');\n$testObj3 = getInstance('test');\n \nfunction getInstance($class, $returnInstance = false)\n{\n    return new $class();\n}\n \nfunction newAutoload($classname)\n{ \n    $classpath = './' . $classname . '.php';\n    if (file_exists($classpath)) {\n        var_dump('require success');\n        require_once($classpath);\n    } else {\n        echo 'class file ' . $classpath . ' not found!';\n    }\n}\n//array\n//  0 => string '__autoload' (length=10)\n//array\n//  0 => string 'newAutoload' (length=11)\n//string 'require success' (length=15)\n```\n\n`spl_autoload_functions()` 方法是用来查看当前自动加载的方法，当前有个`__autoload`魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 `spl_autoload_register()` 方法是通过方法名将一个方法注册到自动加载方法，这里用`newAutoload`方法来替换`__autoload`方法。\n\n`newAutoload`方法中，我们定义一下，每执行成功一次，打印一句'require success'，这里只打印了一次，说明了虽然实例了3次`test`，但因为`test`类已经加载过一次，就不会再执行自动加载的方法。通过`getInstance()`这种加载类的方法，比以前的`include()`之类的方便多了，只需要加载这个写了`getInstance()`方法的文件就可以了。\n\n重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。\n","slug":"php/php-authoload","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5bcft002gz2v8ykwf8c4v","sticky":0},{"title":"php高精确度数值比较-bccomp","date":"2016-02-16T15:26:30.000Z","_content":"\n## bccomp\n\nbccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。\n\n`bccomp($left_operand, $right_operand [, $scale = 0]);`\n\n参数\n\n|参数|参数描述|属性|\n|---|---|---|\n|$left_operand |左边字符串|string|\n| $right_operand |右边字符串|string|\n| $scale(可不填，默认0) |返回值小数点后所需的位数|int|\n\n`bccomp`函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:\n\n```\necho '<pre>';\nvar_dump(bccomp('1', '2'));   // int(-1)\nvar_dump(bccomp('1.00001', '1', 3)); // int(0)\nvar_dump(bccomp('1.00001', '1', 5)); // int(1)\n```\n\n## 整数与浮点数对比\n\n举个例子：\n\n```\necho '<pre>';\nvar_dump(8160 == '81.6' * 100);          //false\nvar_dump('81.6' * 100);                  //float(8160)\nvar_dump('81.6' * 100 - 8160);           //float(-9.0949470177293E-13)\n```\n\n第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：\n\n```\nvar_dump(bccomp(8160, '81.60' * 100) === 0);  //bool(true)\n```\n\n如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比\n\n```\nvar_dump(8160 / 100 == '81.6');               //bool(true)\n```\n\n\n","source":"_posts/php/php-bccomp.md","raw":"title: php高精确度数值比较-bccomp  \ndate: 2016-02-16 23:26:30  \ncategories: php   \ntags: php\n\n---\n\n## bccomp\n\nbccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。\n\n`bccomp($left_operand, $right_operand [, $scale = 0]);`\n\n参数\n\n|参数|参数描述|属性|\n|---|---|---|\n|$left_operand |左边字符串|string|\n| $right_operand |右边字符串|string|\n| $scale(可不填，默认0) |返回值小数点后所需的位数|int|\n\n`bccomp`函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:\n\n```\necho '<pre>';\nvar_dump(bccomp('1', '2'));   // int(-1)\nvar_dump(bccomp('1.00001', '1', 3)); // int(0)\nvar_dump(bccomp('1.00001', '1', 5)); // int(1)\n```\n\n## 整数与浮点数对比\n\n举个例子：\n\n```\necho '<pre>';\nvar_dump(8160 == '81.6' * 100);          //false\nvar_dump('81.6' * 100);                  //float(8160)\nvar_dump('81.6' * 100 - 8160);           //float(-9.0949470177293E-13)\n```\n\n第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：\n\n```\nvar_dump(bccomp(8160, '81.60' * 100) === 0);  //bool(true)\n```\n\n如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比\n\n```\nvar_dump(8160 / 100 == '81.6');               //bool(true)\n```\n\n\n","slug":"php/php-bccomp","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5bfwz002jz2v8v21u21q5","sticky":0},{"title":"php魔术方法__call","date":"2015-04-11T09:34:00.000Z","_content":"\n>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.\n\n\n```\n\tclass test\n\t{\n\t\tpublic function emptyFunc()\n\t\t{\n\t\t\t$getArgs = func_get_args();\n\t\t\t$funcName = $getArgs[0];\n\t\t\t//$params = array_slice($getArgs, 1);\n\t\t\t//var_dump($params);  // this is params                \n\t\t\treturn $funcName . ' function is not exists';\n\t\t}\n\t\t \n\t\tpublic function __call($m, $params)\n\t\t{\n\t\t\t$arr[] = $m;\n\t\t\t$arr = array_merge($arr, $params);\n\t\t\treturn call_user_func_array(array($this, 'emptyFunc'), $arr);\n\t\t}\n \n\t\tprotected function nowToTest()\n\t\t{ \n\t\t\treturn 'this is nowToTest';\n\t\t}\n\t}\n\t \n\t$testObj = new test();\n\tvar_dump($testObj->nowToTest('params1','params1'));\n\t//var_dump result => string(29) \"nowToTest function is not exists\"\n```\n\n如上`test`类中，`nowToTest`方法是存在的，但修饰这方法的是`protected`(保护)，所以实例出来的对象没权限执行,这时就跑到`__call`中去了.\n\n`_call()`有2个参数，第一个`$m`是当前调用方法的名字，这里是`nowToTest`,第二个`$params`是调用`nowToTest`方法时传入的参数。以数组的形式组合在$params中。 \n\n`call_user_func_array($method, $params)`这个php方法的作用是调用 `$method`方法，参数为`$params`,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是`emptyFunc`方法。 \n\n`func_get_args()`的作用是以数组形式获取传入的所有参数。而这些参数在`__call`中传入的，第一个参数就是方法名。所以最后返回的结果是\n\n\n```\n\t\"nowToTest function is not exists\"\n```","source":"_posts/php/php-call.md","raw":"title: php魔术方法__call\ndate: 2015-04-11 17:34  \ncategories: php  \ntags: php\n\n---\n\n>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.\n\n\n```\n\tclass test\n\t{\n\t\tpublic function emptyFunc()\n\t\t{\n\t\t\t$getArgs = func_get_args();\n\t\t\t$funcName = $getArgs[0];\n\t\t\t//$params = array_slice($getArgs, 1);\n\t\t\t//var_dump($params);  // this is params                \n\t\t\treturn $funcName . ' function is not exists';\n\t\t}\n\t\t \n\t\tpublic function __call($m, $params)\n\t\t{\n\t\t\t$arr[] = $m;\n\t\t\t$arr = array_merge($arr, $params);\n\t\t\treturn call_user_func_array(array($this, 'emptyFunc'), $arr);\n\t\t}\n \n\t\tprotected function nowToTest()\n\t\t{ \n\t\t\treturn 'this is nowToTest';\n\t\t}\n\t}\n\t \n\t$testObj = new test();\n\tvar_dump($testObj->nowToTest('params1','params1'));\n\t//var_dump result => string(29) \"nowToTest function is not exists\"\n```\n\n如上`test`类中，`nowToTest`方法是存在的，但修饰这方法的是`protected`(保护)，所以实例出来的对象没权限执行,这时就跑到`__call`中去了.\n\n`_call()`有2个参数，第一个`$m`是当前调用方法的名字，这里是`nowToTest`,第二个`$params`是调用`nowToTest`方法时传入的参数。以数组的形式组合在$params中。 \n\n`call_user_func_array($method, $params)`这个php方法的作用是调用 `$method`方法，参数为`$params`,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是`emptyFunc`方法。 \n\n`func_get_args()`的作用是以数组形式获取传入的所有参数。而这些参数在`__call`中传入的，第一个参数就是方法名。所以最后返回的结果是\n\n\n```\n\t\"nowToTest function is not exists\"\n```","slug":"php/php-call","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5bo08002mz2v8lq9ze9rr","sticky":0},{"title":"php-config","date":"2016-10-14T09:39:00.000Z","_content":"\n>php配置\n\n# PHP config\n\n## 隐藏php版本号\n\n通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:44:22 GMT\nServer:nginx\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.6.16\n```\n\n我们想隐藏掉`X-Powered-By:PHP/5.6.16`只需修改一个地方：php.ini中的`expose_php`,把`On`改为`Off`即可\n\n```\nexpose_php = Off\n```\n\n效果如下\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:46:31 GMT\nServer:nginx\nTransfer-Encoding:chunked\n```\n","source":"_posts/php/php-config.md","raw":"title: php-config\ndate: 2016-10-14 17:39:00\ntags: php\ncategory: php\n\n---\n\n>php配置\n\n# PHP config\n\n## 隐藏php版本号\n\n通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:44:22 GMT\nServer:nginx\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.6.16\n```\n\n我们想隐藏掉`X-Powered-By:PHP/5.6.16`只需修改一个地方：php.ini中的`expose_php`,把`On`改为`Off`即可\n\n```\nexpose_php = Off\n```\n\n效果如下\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:46:31 GMT\nServer:nginx\nTransfer-Encoding:chunked\n```\n","slug":"php/php-config","published":1,"updated":"2016-10-14T09:46:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5bpl9002pz2v8ls5dq8jm","sticky":0},{"title":"PHP文件操作part1[文件路径]","date":"2014-09-25T14:07:00.000Z","_content":"\n# 绝对路径与相对路径\n\n>文件函数最常用的参数是什么？路径。  \n而路径参数大致分两种：绝对路径和相对路径。\n\n## 绝对路径 : 从盘开始的路径\n\nexample:\n\n```\n\t/Users/jceee/code/app/www/index.php（app项目中的index.php文件）\n```\n\n## 相对路径 : 以当前文件为基准所组成的路径\n\nexample:\n\n```\n\t./index.php(相对当前目录)\n\t../index.php(相对上级目录)\n```\n\n\n## 获取绝对路径\n\n### realpath\n\nphp中有通过相对路径获得绝对路径的方法`realpath($path)`\n\n```\nvar_dump(realpath('index.php'));\n//\"/Users/jceee/code/app/www/index.php\"\n```\n\n### Magic constants: `__FILE__`\n\n`__FILE__`可以获得当前文件的绝对路径\n\n```\n\tvar_dump(__FILE__);\n\t//\"/Users/jceee/code/app/www/index.php\"\n```\n### dirname\n\n`dirname(path)`获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径\n\n```\n\tvar_dump(dirname('./index.php'));\n\t//\".\"\n\tvar_dump(dirname(realpath('./index.php')));\n\t//\"/Users/jceee/code/app/www/\"\n```\n### getcwd()\n\n`getcwd`获取的是当前的工作目录,也就是index.php所在的目录。相当于`dirname(__FILE__)`\n\n```\n\tvar_dump(getcwd());\n\t//\"/Users/jceee/code/app/www/\"\n```\n\n### `$_SERVER['DOCUMENT_ROOT']`\n\n`$_SERVER['DOCUMENT_ROOT']` 获取的是项目在服务器定义的根目录\n\n```\n\tvar_dump($_SERVER['DOCUMENT_ROOT']);\n\t//\"/Users/jceee/code/app\"\n```\n\n","source":"_posts/php/php-filePath.md","raw":"title: PHP文件操作part1[文件路径]   \ndate: 2014-09-25 22:07  \ncategories: php   \ntags: php\n\n---\n\n# 绝对路径与相对路径\n\n>文件函数最常用的参数是什么？路径。  \n而路径参数大致分两种：绝对路径和相对路径。\n\n## 绝对路径 : 从盘开始的路径\n\nexample:\n\n```\n\t/Users/jceee/code/app/www/index.php（app项目中的index.php文件）\n```\n\n## 相对路径 : 以当前文件为基准所组成的路径\n\nexample:\n\n```\n\t./index.php(相对当前目录)\n\t../index.php(相对上级目录)\n```\n\n\n## 获取绝对路径\n\n### realpath\n\nphp中有通过相对路径获得绝对路径的方法`realpath($path)`\n\n```\nvar_dump(realpath('index.php'));\n//\"/Users/jceee/code/app/www/index.php\"\n```\n\n### Magic constants: `__FILE__`\n\n`__FILE__`可以获得当前文件的绝对路径\n\n```\n\tvar_dump(__FILE__);\n\t//\"/Users/jceee/code/app/www/index.php\"\n```\n### dirname\n\n`dirname(path)`获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径\n\n```\n\tvar_dump(dirname('./index.php'));\n\t//\".\"\n\tvar_dump(dirname(realpath('./index.php')));\n\t//\"/Users/jceee/code/app/www/\"\n```\n### getcwd()\n\n`getcwd`获取的是当前的工作目录,也就是index.php所在的目录。相当于`dirname(__FILE__)`\n\n```\n\tvar_dump(getcwd());\n\t//\"/Users/jceee/code/app/www/\"\n```\n\n### `$_SERVER['DOCUMENT_ROOT']`\n\n`$_SERVER['DOCUMENT_ROOT']` 获取的是项目在服务器定义的根目录\n\n```\n\tvar_dump($_SERVER['DOCUMENT_ROOT']);\n\t//\"/Users/jceee/code/app\"\n```\n\n","slug":"php/php-filePath","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5c0ry002sz2v8dodwvpen","sticky":0},{"title":"$GLOBALS [\"HTTP_RAW_POST_DATA\"]为空","date":"2015-07-29T14:28:00.000Z","_content":"\n## `$GLOBALS[\"HTTP_RAW_POST_DATA\"]` `$_POST` `file_get_contents('php://input')`    \n\n`$GLOBALS[\"HTTP_RAW_POST_DATA\"]`跟`$_POST`,`file_get_contents('php://input')`的效果差不多，用 `$GLOBALS [\"HTTP_RAW_POST_DATA\"]`或`file_get_contents('php://input')`的情况大多是为了获取`$_POST`无法接收的数据类型（如XML数据） \n\n## 获取`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`的值\n\n在`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`取不到值的情况下可以按以下方式排查：\n\n* 用`file_get_contents('php://input')`获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。\n\n* 如果`file_get_contents('php://input')`有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:\n   \n```\n\talways_populate_raw_post_data = On\n```","source":"_posts/php/php-HTTP-RAW-POST-DATA.md","raw":"title: $GLOBALS [\"HTTP_RAW_POST_DATA\"]为空\ndate: 2015-07-29 22:28\ncategories: php\ntags: php\n\n---\n\n## `$GLOBALS[\"HTTP_RAW_POST_DATA\"]` `$_POST` `file_get_contents('php://input')`    \n\n`$GLOBALS[\"HTTP_RAW_POST_DATA\"]`跟`$_POST`,`file_get_contents('php://input')`的效果差不多，用 `$GLOBALS [\"HTTP_RAW_POST_DATA\"]`或`file_get_contents('php://input')`的情况大多是为了获取`$_POST`无法接收的数据类型（如XML数据） \n\n## 获取`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`的值\n\n在`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`取不到值的情况下可以按以下方式排查：\n\n* 用`file_get_contents('php://input')`获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。\n\n* 如果`file_get_contents('php://input')`有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:\n   \n```\n\talways_populate_raw_post_data = On\n```","slug":"php/php-HTTP-RAW-POST-DATA","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5c8sw002vz2v8bpym3a33","sticky":0},{"title":"int值边界值","date":"2014-11-29T10:24:00.000Z","_content":"\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","source":"_posts/php/php-intMaxVal.md","raw":"title: int值边界值\ndate: 2014-11-29 18:24\ntags: intval\ncategories: php\n\n---\n\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","slug":"php/php-intMaxVal","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5cc0p002yz2v851nwp4rg","sticky":0},{"title":"根据某字段对多维数组进行排序","date":"2015-01-09T13:06:35.000Z","_content":"\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/php-sortArrByfield.md","raw":"title: 根据某字段对多维数组进行排序\ndate: 2015-01-09 21:06:35\ncategories: code\ntags: php\n\n---\n\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/php-sortArrByfield","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5cfnu0031z2v8eaewyex1","sticky":0},{"title":"stream_context_create","date":"2016-02-29T13:06:35.000Z","_content":"\n## 流\n\n流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。\n\n每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：\n\n```\n\t<scheme>://<target>\n```\n\n<scheme>是流的封装协议，<target>是流的数据源\n\n如：\n\n```\n\thttp://api.jceee.com/services/api.php?action=test\n\tphp://stdout\n\tfile:///etc/data.txt\n```\n\n## `stream_context_create`\n\nstream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。\n\n### file_get_content\n\n我们定义一个流的参数对象，使`file_get_content`发送`HTTP`的`POST`请求。\n\n```php\n\t$requestBody = json_encode(array('user'=>'jceee'));\n\t$context = stream_context_create(array(\n\t    'http' => array(\n\t        'method' => 'POST',\n\t        'header' => \"Content-Type: application/json;charset=utf-8;\\r\\n\" . \n\t                    \"Content-Length: \" . mb_strlen($requestBody),\n\t        'content' => $requestBody\n\t        )\n\t    ));\n\t\n\t$response = file_get_contents('http://api.jceee.com/api.php', false, $context);\n```\n\n最外层的键`http`定义了流封装协议，值是协议的具体内容。通过定义`http`协议，我们就创建了一个`file_get_content`可接收的流上下文对象。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/php-stream.md","raw":"title: stream_context_create  \ndate: 2016-02-29 21:06:35  \ncategories: php  \ntags: php  \n\n---\n\n## 流\n\n流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。\n\n每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：\n\n```\n\t<scheme>://<target>\n```\n\n<scheme>是流的封装协议，<target>是流的数据源\n\n如：\n\n```\n\thttp://api.jceee.com/services/api.php?action=test\n\tphp://stdout\n\tfile:///etc/data.txt\n```\n\n## `stream_context_create`\n\nstream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。\n\n### file_get_content\n\n我们定义一个流的参数对象，使`file_get_content`发送`HTTP`的`POST`请求。\n\n```php\n\t$requestBody = json_encode(array('user'=>'jceee'));\n\t$context = stream_context_create(array(\n\t    'http' => array(\n\t        'method' => 'POST',\n\t        'header' => \"Content-Type: application/json;charset=utf-8;\\r\\n\" . \n\t                    \"Content-Length: \" . mb_strlen($requestBody),\n\t        'content' => $requestBody\n\t        )\n\t    ));\n\t\n\t$response = file_get_contents('http://api.jceee.com/api.php', false, $context);\n```\n\n最外层的键`http`定义了流封装协议，值是协议的具体内容。通过定义`http`协议，我们就创建了一个`file_get_content`可接收的流上下文对象。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/php-stream","published":1,"updated":"2016-02-29T14:36:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5chdu0034z2v83kaa7tbr","sticky":0},{"title":"php性状(trait)","date":"2016-02-12T11:30:48.000Z","_content":"\n>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。\n\n性状有两个作用：\n\n* 表明类可以做什么（接口）；\n* 提供模块化实现（类）；\n\n## 创建性状\n\n```php\n\ttrait TestTrait\n\t{\n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t}\n```\n\n## 使用性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait;\n\t    protected $something = 'something';\n\t}\n\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: something\n\t */\n```\n\n## 抽象方法,静态方法与静态属性\n\nTrait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性\n\n```php\n\ttrait TestTrait\n\t{\n\t    static $num;\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t\n\t    abstract public function showHelloWorld();\n\t    \n\t    static public function getNew()\n\t    {\n\t        return date('Y-m-d H:i:s');\n\t    }\n\t\n\t    public function addNum()\n\t    {\n\t        self::$num ++;\n\t        return self::$num;\n\t    } \n\t}\n\t\n\tclass Test\n\t{\n\t    use TestTrait;\n\t\n\t    protected $something = 'something';\n\t\n\t    public function showHelloWorld()\n\t    {\n\t        var_dump('hello world');\n\t    }\n\t}\n\n\t$test = new Test();\n\t\n\t$test->showHelloWorld();\n\t\n\tvar_dump(Test::getNew());\n\t\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\t\n\t\n\t/** \n\t *result:\n\t * string(11) \"hello world\"\n\t * string(19) \"2016-02-12 21:11:27\"\n\t * int(1)\n\t * int(2)\n\t * int(3)\n\t * int(4)\n\t */\n```\n\n## Trait方法优先级\n\n性状定义的方法的优先级是：\n\n```\n当前类中的方法 > Trait的方法\b > 基类中的方法\n```\n\n## 使用多个Trait\n\n使用多个trait时，需要用`,`分隔开不同的性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait,OtherTrait;\n\t    protected $something = 'something';\n\t    ...\n\t}\n```\n\n## insteadof\n\n两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源\n\nTrait1::method insteadof Trait2\n\ninsteadof是将trait2中的方法method代替成trait1中的method\n\n\n```php\n\ttrait OtherTrait\n\t{\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something . ' from other';\n\t    }\n\t    \n\t    public function showOther()\n\t    {\n\t        return 'this is other';\n\t    }\n\t}\n\t\n\t\n\tclass Test\n\t{\n\t    use TestTrait, OtherTrait {\n\t        OtherTrait::getSomething insteadof TestTrait;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: \n\t * something from other\n\t */\n```\n\n## as\n\ntrait::method as public|protected|private otherMethodName\n\nas 是给方法取一个别名,同时还可以声明方法的访问控制\n\n```\n\tclass Test\n\t{\n\t    use TestTrait {\n\t        TestTrait::getSomething as public getSomethingPart2;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\tvar_dump($test->getSomethingPart2());\n\t\n\t/**\n\t * result: \n\t * something  \n\t * something\n\t */\n```\n\n## 组合\n\ntrait同样可以引用其他trait,用法跟类一致.\n\n```php\n\ttrait ThreeTrait\n\t{\n\t    use OtherTrait;\n\t}\n```\n","source":"_posts/php/php-trait.md","raw":"title: php性状(trait)  \ndate: 2016-02-12 19:30:48  \ncategories: php    \ntags: php  \n\n---\n\n>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。\n\n性状有两个作用：\n\n* 表明类可以做什么（接口）；\n* 提供模块化实现（类）；\n\n## 创建性状\n\n```php\n\ttrait TestTrait\n\t{\n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t}\n```\n\n## 使用性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait;\n\t    protected $something = 'something';\n\t}\n\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: something\n\t */\n```\n\n## 抽象方法,静态方法与静态属性\n\nTrait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性\n\n```php\n\ttrait TestTrait\n\t{\n\t    static $num;\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t\n\t    abstract public function showHelloWorld();\n\t    \n\t    static public function getNew()\n\t    {\n\t        return date('Y-m-d H:i:s');\n\t    }\n\t\n\t    public function addNum()\n\t    {\n\t        self::$num ++;\n\t        return self::$num;\n\t    } \n\t}\n\t\n\tclass Test\n\t{\n\t    use TestTrait;\n\t\n\t    protected $something = 'something';\n\t\n\t    public function showHelloWorld()\n\t    {\n\t        var_dump('hello world');\n\t    }\n\t}\n\n\t$test = new Test();\n\t\n\t$test->showHelloWorld();\n\t\n\tvar_dump(Test::getNew());\n\t\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\t\n\t\n\t/** \n\t *result:\n\t * string(11) \"hello world\"\n\t * string(19) \"2016-02-12 21:11:27\"\n\t * int(1)\n\t * int(2)\n\t * int(3)\n\t * int(4)\n\t */\n```\n\n## Trait方法优先级\n\n性状定义的方法的优先级是：\n\n```\n当前类中的方法 > Trait的方法\b > 基类中的方法\n```\n\n## 使用多个Trait\n\n使用多个trait时，需要用`,`分隔开不同的性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait,OtherTrait;\n\t    protected $something = 'something';\n\t    ...\n\t}\n```\n\n## insteadof\n\n两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源\n\nTrait1::method insteadof Trait2\n\ninsteadof是将trait2中的方法method代替成trait1中的method\n\n\n```php\n\ttrait OtherTrait\n\t{\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something . ' from other';\n\t    }\n\t    \n\t    public function showOther()\n\t    {\n\t        return 'this is other';\n\t    }\n\t}\n\t\n\t\n\tclass Test\n\t{\n\t    use TestTrait, OtherTrait {\n\t        OtherTrait::getSomething insteadof TestTrait;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: \n\t * something from other\n\t */\n```\n\n## as\n\ntrait::method as public|protected|private otherMethodName\n\nas 是给方法取一个别名,同时还可以声明方法的访问控制\n\n```\n\tclass Test\n\t{\n\t    use TestTrait {\n\t        TestTrait::getSomething as public getSomethingPart2;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\tvar_dump($test->getSomethingPart2());\n\t\n\t/**\n\t * result: \n\t * something  \n\t * something\n\t */\n```\n\n## 组合\n\ntrait同样可以引用其他trait,用法跟类一致.\n\n```php\n\ttrait ThreeTrait\n\t{\n\t    use OtherTrait;\n\t}\n```\n","slug":"php/php-trait","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5cl9c0037z2v848lie9d2","sticky":0},{"title":"php内置http服务器","date":"2016-01-26T13:52:27.000Z","_content":"\nphp5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。\n\n启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:\n\n```\n\tphp -S localhost:8000\n```\n\n在浏览器中输入`localhost:8000/index.php`就可以访问到当前目录下的index.php文件了。\n\n上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。\n\n如果需要对指向的php服务器指向非默认的php配置文件，可以用`-c`选项去指定对应的ini文件：\n\n```\n\tphp -S localhost:8000 -c app/config/php.ini\n```\n\n\n","source":"_posts/php/php-webserver.md","raw":"title: php内置http服务器  \ndate: 2016-01-26 21:52:27  \ncategories: php  \ntags: php  \n\n---\n\nphp5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。\n\n启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:\n\n```\n\tphp -S localhost:8000\n```\n\n在浏览器中输入`localhost:8000/index.php`就可以访问到当前目录下的index.php文件了。\n\n上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。\n\n如果需要对指向的php服务器指向非默认的php配置文件，可以用`-c`选项去指定对应的ini文件：\n\n```\n\tphp -S localhost:8000 -c app/config/php.ini\n```\n\n\n","slug":"php/php-webserver","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5cqar003az2v8a7z5ns3p","sticky":0},{"title":"正则表达式","date":"2014-11-09T14:57:00.000Z","_content":"\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","source":"_posts/regEx/regex.md","raw":"title: 正则表达式\ndate: 2014-11-09 22:57\ntags: regEx\ncategories: regEx\n\n---\n\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","slug":"regEx/regex","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5den6003dz2v8wqwnxcye","sticky":0},{"title":"Redis有序集合做订阅列表","date":"2016-01-18T14:33:00.000Z","_content":"\nRedis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。\n\n以有序集合的特性，可以用来做订阅列表的存储\n\n## 订阅功能\n\n订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  \n\n设计订阅表subscriber,以mysql为例 \n\n|field|type|comment|\n|---|---|---|\n|uid|int|用户id|\n|rUid|int|订阅目标id|\n|createTime|int|创建时间|\n|updateTime|int|修改时间|\n|status|int|状态 枚举:`-1`删除`0`正常|\n\n订阅表的基本功能需要满足：\n\n* 通过`uid`查出所有已经订阅的`rUid`的信息，并按`createTime`排序\n* 通过订阅目标`rUid`查出所有`uid`，并按`createTime`排序\n* 查找是否已经订阅\n* 取消订阅\n\n## 添加订阅\n\n按照基本功能的1和2，我们需要保持2个集合\n一个集合以用户为中心:\n\n```\n以用户为中心的key统一一个前缀，后面加上用户的uid:\nexampleKey(uid为1): subscriberUid1\n```\n\n一个集合以订阅目标为中心:\n\n```\n以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:\nexampleKey(rUid为100): subscriberRUid100\n```\n添加的命令是\n\n```\n\t# 增加1条数据\n\tZADD score member\n\t# 增加多条数据\n\tZADD score1 member1 [score2 member2]...\n```\n为了以时间排序，我们可以以时间戳为分数，保存订阅信息\n\n```\n\t127.0.0.1:6379>ZADD subscriberUid1 1453129638 100\n\t127.0.0.1:6379>ZADD subscriberRUid100 1453129638 1\n\n\t127.0.0.1:6379> ZADD subscriberUid1 1453129639 200 1453129640 300 1453129640 400 1453129641 500\t1453129638 10000\n\t127.0.0.1:6379> ZADD subscriberRUid100 1453129639 2 1453129640 3 1453129640 4 1453129641 5 1453129611 6\n```\n\n## 获取订阅列表\n\n获取集合的命令是\n\n```\n\t# 按分数正序排列 withscore 是指附带分数\n\tZRANGE key start stop [WITHSCORE]\n\t# 按分数倒序排列\n\tZREVRANGE key start stop [WITHSCORE]\n```\n\n我们现在来获取用户1的订阅列表：\n\n```\n   # 正序获取，从0开始，-1指取到尽头，相当于limit\n   127.0.0.1:6379> ZRANGE subscriberUid1 0 -1 WITHSCORES\n   # 结果如下\n\t 1) \"100\"\n\t 2) \"1453129638\"\n\t 3) \"10000\"\n\t 4) \"1453129638\"\n\t 5) \"200\"\n\t 6) \"1453129639\"\n\t 7) \"300\"\n\t 8) \"1453129640\"\n\t 9) \"400\"\n\t10) \"1453129640\"\n\t11) \"500\"\n\t12) \"1453129641\"\n```\n\n这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:\n\n```\n\t# 倒序获取，从0开始，-1指取到尽头\n   127.0.0.1:6379> ZREVRANGE subscriberUid1 0 -1\n   # 结果如下\n\t1) \"500\"\n\t2) \"400\"\n\t3) \"300\"\n\t4) \"200\"\n\t5) \"10000\"\n\t6) \"100\"\n```\n\n## 查找是否已订阅\n\n查找可以用一个方法来确认，查找对应成员的分数：\n\n```\n\tZSCORE key member\n```\n\n```\n127.0.0.1:6379> ZSCORE subscriberUid1 100\n\"1453129638\"\n127.0.0.1:6379> ZSCORE subscriberUid1 1000\n(nil)\n```\n\n每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。\n\n## 取消订阅\n\n删除成员操作\n\n```\n\t# 删除1个成员\n\tZREM key member\n\t# 删除1个或多个成员\n\tZREM key member [member ...]\n```\n因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：\n\n```\n\t# 删除用户为中心的集合\n\t127.0.0.1:6379> ZREM subscriberUid1 100\n\t(integer) 1\n\t127.0.0.1:6379> ZRANGE subscriberUid1 0 -1\n\t1) \"10000\"\n\t2) \"200\"\n\t3) \"300\"\n\t4) \"400\"\n\t5) \"500\"\n\n\t# 删除订阅目录为中心的集合\n\t127.0.0.1:6379>  ZREM subscriberRUid100 1\n\t(integer) 1\n\t127.0.0.1:6379>  ZRANGE subscriberRUid100 0 -1\n\t1) \"6\"\n\t2) \"2\"\n\t3) \"3\"\n\t4) \"4\"\n\t5) \"5\"\n```\n\n到此，我们的订阅功能就完成了。","source":"_posts/redis/redis-sortedSet.md","raw":"title: Redis有序集合做订阅列表\ndate: 2016-01-18 22:33\ncategories: redis\ntags: redis\n\n---\n\nRedis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。\n\n以有序集合的特性，可以用来做订阅列表的存储\n\n## 订阅功能\n\n订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  \n\n设计订阅表subscriber,以mysql为例 \n\n|field|type|comment|\n|---|---|---|\n|uid|int|用户id|\n|rUid|int|订阅目标id|\n|createTime|int|创建时间|\n|updateTime|int|修改时间|\n|status|int|状态 枚举:`-1`删除`0`正常|\n\n订阅表的基本功能需要满足：\n\n* 通过`uid`查出所有已经订阅的`rUid`的信息，并按`createTime`排序\n* 通过订阅目标`rUid`查出所有`uid`，并按`createTime`排序\n* 查找是否已经订阅\n* 取消订阅\n\n## 添加订阅\n\n按照基本功能的1和2，我们需要保持2个集合\n一个集合以用户为中心:\n\n```\n以用户为中心的key统一一个前缀，后面加上用户的uid:\nexampleKey(uid为1): subscriberUid1\n```\n\n一个集合以订阅目标为中心:\n\n```\n以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:\nexampleKey(rUid为100): subscriberRUid100\n```\n添加的命令是\n\n```\n\t# 增加1条数据\n\tZADD score member\n\t# 增加多条数据\n\tZADD score1 member1 [score2 member2]...\n```\n为了以时间排序，我们可以以时间戳为分数，保存订阅信息\n\n```\n\t127.0.0.1:6379>ZADD subscriberUid1 1453129638 100\n\t127.0.0.1:6379>ZADD subscriberRUid100 1453129638 1\n\n\t127.0.0.1:6379> ZADD subscriberUid1 1453129639 200 1453129640 300 1453129640 400 1453129641 500\t1453129638 10000\n\t127.0.0.1:6379> ZADD subscriberRUid100 1453129639 2 1453129640 3 1453129640 4 1453129641 5 1453129611 6\n```\n\n## 获取订阅列表\n\n获取集合的命令是\n\n```\n\t# 按分数正序排列 withscore 是指附带分数\n\tZRANGE key start stop [WITHSCORE]\n\t# 按分数倒序排列\n\tZREVRANGE key start stop [WITHSCORE]\n```\n\n我们现在来获取用户1的订阅列表：\n\n```\n   # 正序获取，从0开始，-1指取到尽头，相当于limit\n   127.0.0.1:6379> ZRANGE subscriberUid1 0 -1 WITHSCORES\n   # 结果如下\n\t 1) \"100\"\n\t 2) \"1453129638\"\n\t 3) \"10000\"\n\t 4) \"1453129638\"\n\t 5) \"200\"\n\t 6) \"1453129639\"\n\t 7) \"300\"\n\t 8) \"1453129640\"\n\t 9) \"400\"\n\t10) \"1453129640\"\n\t11) \"500\"\n\t12) \"1453129641\"\n```\n\n这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:\n\n```\n\t# 倒序获取，从0开始，-1指取到尽头\n   127.0.0.1:6379> ZREVRANGE subscriberUid1 0 -1\n   # 结果如下\n\t1) \"500\"\n\t2) \"400\"\n\t3) \"300\"\n\t4) \"200\"\n\t5) \"10000\"\n\t6) \"100\"\n```\n\n## 查找是否已订阅\n\n查找可以用一个方法来确认，查找对应成员的分数：\n\n```\n\tZSCORE key member\n```\n\n```\n127.0.0.1:6379> ZSCORE subscriberUid1 100\n\"1453129638\"\n127.0.0.1:6379> ZSCORE subscriberUid1 1000\n(nil)\n```\n\n每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。\n\n## 取消订阅\n\n删除成员操作\n\n```\n\t# 删除1个成员\n\tZREM key member\n\t# 删除1个或多个成员\n\tZREM key member [member ...]\n```\n因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：\n\n```\n\t# 删除用户为中心的集合\n\t127.0.0.1:6379> ZREM subscriberUid1 100\n\t(integer) 1\n\t127.0.0.1:6379> ZRANGE subscriberUid1 0 -1\n\t1) \"10000\"\n\t2) \"200\"\n\t3) \"300\"\n\t4) \"400\"\n\t5) \"500\"\n\n\t# 删除订阅目录为中心的集合\n\t127.0.0.1:6379>  ZREM subscriberRUid100 1\n\t(integer) 1\n\t127.0.0.1:6379>  ZRANGE subscriberRUid100 0 -1\n\t1) \"6\"\n\t2) \"2\"\n\t3) \"3\"\n\t4) \"4\"\n\t5) \"5\"\n```\n\n到此，我们的订阅功能就完成了。","slug":"redis/redis-sortedSet","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5dp3k003gz2v862lk55jq","sticky":0},{"title":"GO语言IDE篇--Vscode (Mac)","date":"2018-11-20T15:26:46.000Z","_content":"\n>工欲善其事，必先利其器\n>----《论语·卫灵公》\n\n## 前言\n\n当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： \n \n* 语法高亮(基本都有)\n* 支持DEBUG\n* 插件丰富\n* 集成终端\n* 颜值（这个也很重要啊喂！）\n\n对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高...最后我选择了满足了我的所有要求的Vscode，下面开始撸之～\n\n## 安装GO环境\n\n这里假设我们已经安装完基础环境并配置好了环境变量，略过...\n\n## 安装vscode\n\n[vscode官网](https://code.visualstudio.com/)下之\n\n## 安装go插件\n\n### 基础插件\n\n打开vscode，打开插件搜索，输入go，安装之:\n![插件安装](/images/go-vscode/go-extend.png)\n\n### 安装依赖包支持\n\n```\n$ mkdir -p $GOPAH/src/golang.org/x\n$ cd $GOPAH/src/golang.org/x\n$ git clone https://github.com/golang/tools.git tools\n\n$ go get -u  github.com/ramya-rao-a/go-outline\n$ go get -u  github.com/acroca/go-symbols\n$ go install golang.org/x/tools/cmd/guru\n$ go install golang.org/x/tools/cmd/gorename\n$ go get -u github.com/rogpeppe/godef\n$ go get -u github.com/sqs/goreturns\n$ go get -u github.com/ramya-rao-a/go-outline\n$ go get -u github.com/josharian/impl\n$ go get -u golang.org/x/lint/golint\n$ go get -u github.com/cweill/gotests/gotests\n```\n\n### 安装dlv\n\ngo的debug依赖于dlv\n\n安装dlv有2种途径:\n\n#### brew安装dlv\n\n这个帮你解决了证书等问题\n\n```\n$ brew install go-delve/delve/delve\n\n```\n\n#### go get安装dlv\n\n安装dlv\n\n```\n$ go get github.com/derekparker/delve/cmd/dlv\n\n-- 查看是否安装成功\n$ $GOPATH/bin/dlv version\n```\n\n把dlv从`GOPATH`移动到`GOROOT`\n\n```\n$ sudo mv $GOPATH/bin/dlv $GOROOT/bin/dlv\n```\n\n创建系统证书\n\n```\n1 打开\"钥匙串访问\"\n2 打开菜单 钥匙串访问/证书助理/创建证书...\n3 名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择\"让我覆盖这些默认值\"\n4 单击\"继续\", 有效期(天数): 365 这里你可以自己修改, 我改为3650\n5 一路继续下去, 直到看到\"指定用于该证书的位置\" 钥匙串 选择 \"系统\" 并单击\"创建\"按钮\n6 重启系统之后, 再打开\"钥匙串访问\", 选择\"系统\", 就会看到创建好的\"dlv-cert\"证书.\n7 右键\"dlv-cert\"证书, 选择\"显示简介\"->\"信任\"->\"代码签名\" 修改为: 始终信任\n```\n\n分配证书\n\n```\n$ sudo codesign -s \"dlv-cert\" $GOROOT/bin/dlv\n```\n\n如果调试时遇到下面问题：\n\n```\ncould not launch process: debugserver or lldb-server not found: install XCode's command line tools or lldb-server\n```\n\n可以安装一下xcode-select:\n\n```\nxcode-select --install\n```\n\n## 开始调试\n\n创建个必写的hello world文件：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar h string = \"こんにちは\"\n\tvar w string = \"世界\"\n\tfmt.Println(h, w)\n}\n\n```\n\n然后开始debug\n![开始debug](/images/go-vscode/start-debug.png)\n\n如果是第一次调试，会让你编辑launch.json文件\n\n我们加一个配置：\n```\n{\n    \"name\": \"helloword\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"env\": {},\n    \"program\": \"${workspaceRoot}/hello/helloworld.go\"\n}\n```\nprogram是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改\n\n保存，再跑一下debug：\n![开始debug](/images/go-vscode/debug.png)\n\n这样就完成了～\n\n\n","source":"_posts/IDE/vscode/go-ide-vscode.md","raw":"title: GO语言IDE篇--Vscode (Mac)  \ndate: 2018-11-20 23:26:46\ntags: [go,ide]\n---\n\n>工欲善其事，必先利其器\n>----《论语·卫灵公》\n\n## 前言\n\n当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： \n \n* 语法高亮(基本都有)\n* 支持DEBUG\n* 插件丰富\n* 集成终端\n* 颜值（这个也很重要啊喂！）\n\n对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高...最后我选择了满足了我的所有要求的Vscode，下面开始撸之～\n\n## 安装GO环境\n\n这里假设我们已经安装完基础环境并配置好了环境变量，略过...\n\n## 安装vscode\n\n[vscode官网](https://code.visualstudio.com/)下之\n\n## 安装go插件\n\n### 基础插件\n\n打开vscode，打开插件搜索，输入go，安装之:\n![插件安装](/images/go-vscode/go-extend.png)\n\n### 安装依赖包支持\n\n```\n$ mkdir -p $GOPAH/src/golang.org/x\n$ cd $GOPAH/src/golang.org/x\n$ git clone https://github.com/golang/tools.git tools\n\n$ go get -u  github.com/ramya-rao-a/go-outline\n$ go get -u  github.com/acroca/go-symbols\n$ go install golang.org/x/tools/cmd/guru\n$ go install golang.org/x/tools/cmd/gorename\n$ go get -u github.com/rogpeppe/godef\n$ go get -u github.com/sqs/goreturns\n$ go get -u github.com/ramya-rao-a/go-outline\n$ go get -u github.com/josharian/impl\n$ go get -u golang.org/x/lint/golint\n$ go get -u github.com/cweill/gotests/gotests\n```\n\n### 安装dlv\n\ngo的debug依赖于dlv\n\n安装dlv有2种途径:\n\n#### brew安装dlv\n\n这个帮你解决了证书等问题\n\n```\n$ brew install go-delve/delve/delve\n\n```\n\n#### go get安装dlv\n\n安装dlv\n\n```\n$ go get github.com/derekparker/delve/cmd/dlv\n\n-- 查看是否安装成功\n$ $GOPATH/bin/dlv version\n```\n\n把dlv从`GOPATH`移动到`GOROOT`\n\n```\n$ sudo mv $GOPATH/bin/dlv $GOROOT/bin/dlv\n```\n\n创建系统证书\n\n```\n1 打开\"钥匙串访问\"\n2 打开菜单 钥匙串访问/证书助理/创建证书...\n3 名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择\"让我覆盖这些默认值\"\n4 单击\"继续\", 有效期(天数): 365 这里你可以自己修改, 我改为3650\n5 一路继续下去, 直到看到\"指定用于该证书的位置\" 钥匙串 选择 \"系统\" 并单击\"创建\"按钮\n6 重启系统之后, 再打开\"钥匙串访问\", 选择\"系统\", 就会看到创建好的\"dlv-cert\"证书.\n7 右键\"dlv-cert\"证书, 选择\"显示简介\"->\"信任\"->\"代码签名\" 修改为: 始终信任\n```\n\n分配证书\n\n```\n$ sudo codesign -s \"dlv-cert\" $GOROOT/bin/dlv\n```\n\n如果调试时遇到下面问题：\n\n```\ncould not launch process: debugserver or lldb-server not found: install XCode's command line tools or lldb-server\n```\n\n可以安装一下xcode-select:\n\n```\nxcode-select --install\n```\n\n## 开始调试\n\n创建个必写的hello world文件：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar h string = \"こんにちは\"\n\tvar w string = \"世界\"\n\tfmt.Println(h, w)\n}\n\n```\n\n然后开始debug\n![开始debug](/images/go-vscode/start-debug.png)\n\n如果是第一次调试，会让你编辑launch.json文件\n\n我们加一个配置：\n```\n{\n    \"name\": \"helloword\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"env\": {},\n    \"program\": \"${workspaceRoot}/hello/helloworld.go\"\n}\n```\nprogram是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改\n\n保存，再跑一下debug：\n![开始debug](/images/go-vscode/debug.png)\n\n这样就完成了～\n\n\n","slug":"IDE/vscode/go-ide-vscode","published":1,"updated":"2018-11-20T16:39:04.318Z","_id":"ckqp5ej4g003jz2v8mxjyueca","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"sublime text中文乱码解决","date":"2015-10-14T15:08:00.000Z","_content":"\n编辑器打开代码时乱码基本都是字符编码不一致所造成的。\n\nsublime Text编辑器可以通过安装2个扩展来解决乱码问题：\n\n【ConvertToUTF8】 和 【GBK Encoding Support】\n\n## 安装扩展包管理工具【Package Control】\n\n使用快捷键【control + ~】 打开控制台，参考[package control](https://packagecontrol.io/installation)，根据版本不同选择输入以下代码：\n\nsublime Text2:\n\n```\n\timport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\nsublime Text3:\n\n```\n\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n## 安装扩展包\n\n 扩展包控制安装好了之后就可以开始安装扩展了：\n\n 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。\n","source":"_posts/IDE/sublime/sublime-Encode.md","raw":"title: sublime text中文乱码解决\ndate: 2015-10-14 23:08\ncategories: 工作记录\ntags: sublime\n\n---\n\n编辑器打开代码时乱码基本都是字符编码不一致所造成的。\n\nsublime Text编辑器可以通过安装2个扩展来解决乱码问题：\n\n【ConvertToUTF8】 和 【GBK Encoding Support】\n\n## 安装扩展包管理工具【Package Control】\n\n使用快捷键【control + ~】 打开控制台，参考[package control](https://packagecontrol.io/installation)，根据版本不同选择输入以下代码：\n\nsublime Text2:\n\n```\n\timport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\nsublime Text3:\n\n```\n\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n## 安装扩展包\n\n 扩展包控制安装好了之后就可以开始安装扩展了：\n\n 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。\n","slug":"IDE/sublime/sublime-Encode","published":1,"updated":"2016-02-28T14:48:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqp5euld003mz2v8zxwcmjpx","sticky":0},{"title":"hexo添加百度统计","date":"2016-01-25T13:52:27.000Z","_content":"\n想为hexo添加百度统计可以分为以下几步\n\n## 注册百度统计\n\n### 注册\n\n如果已经有了账号可以跳过注册这步，\n注册账号的地址是\n[百度统计](http://tongji.baidu.com/web/welcome/login)\n\n## 获取百度统计代码\n\n登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:\n\n```\n\t<script>\n\tvar _hmt = _hmt || [];\n\t(function() {\n\t  var hm = document.createElement(\"script\");\n\t  hm.src = \"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; \n\t  s.parentNode.insertBefore(hm, s);\n\t})();\n\t</script>\n```\n\n统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的`//hm.baidu.com/hm.js?`后面的key值不同。\n\n## 在页面添加百度统计代码\n\n### 自带统计模板\n\n大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的`layout`/`_scripts`/`analytics`统计模板文件夹下已经有了`baidu-analytics.swig`文件:\n\n```\n\t{% if theme.baidu_analytics %}\n\t  <script type=\"text/javascript\">\n\t    var _hmt = _hmt || [];\n\t    (function() {\n\t      var hm = document.createElement(\"script\");\n\t      hm.src = \"//hm.baidu.com/hm.js?{{ theme.baidu_analytics }}\";\n\t      var s = document.getElementsByTagName(\"script\")[0];\n\t      s.parentNode.insertBefore(hm, s);\n\t    })();\n\t  </script>\n\t{% endif %}\n```\n\n只要条件满足：`theme.baidu_analytics`为true便插入这段代码。统计代码的key值已经被抽取到主题`_config.yml`中的`baidu_analytics`属性了。\n\n接下来，在主题的`_config.yml`中添加上百度统计的key就行了\n\n```\n\t# Baidu Analytics ID\n\tbaidu_analytics: your key\n```\n\n### 手动添加统计模板\n\n若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹`layout`/`_scripts`/`analytics`，新建`baidu-analytics.swig`文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。\n\n```\n\t{% include 'analytics/baidu-analytics.swig' %}\n```\n","source":"_posts/js/hexo/hexo-baido-analytics.md","raw":"title: hexo添加百度统计  \ndate: 2016-01-25 21:52:27  \ncategories: node  \ntags: hexo  \n\n---\n\n想为hexo添加百度统计可以分为以下几步\n\n## 注册百度统计\n\n### 注册\n\n如果已经有了账号可以跳过注册这步，\n注册账号的地址是\n[百度统计](http://tongji.baidu.com/web/welcome/login)\n\n## 获取百度统计代码\n\n登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:\n\n```\n\t<script>\n\tvar _hmt = _hmt || [];\n\t(function() {\n\t  var hm = document.createElement(\"script\");\n\t  hm.src = \"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; \n\t  s.parentNode.insertBefore(hm, s);\n\t})();\n\t</script>\n```\n\n统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的`//hm.baidu.com/hm.js?`后面的key值不同。\n\n## 在页面添加百度统计代码\n\n### 自带统计模板\n\n大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的`layout`/`_scripts`/`analytics`统计模板文件夹下已经有了`baidu-analytics.swig`文件:\n\n```\n\t{% if theme.baidu_analytics %}\n\t  <script type=\"text/javascript\">\n\t    var _hmt = _hmt || [];\n\t    (function() {\n\t      var hm = document.createElement(\"script\");\n\t      hm.src = \"//hm.baidu.com/hm.js?{{ theme.baidu_analytics }}\";\n\t      var s = document.getElementsByTagName(\"script\")[0];\n\t      s.parentNode.insertBefore(hm, s);\n\t    })();\n\t  </script>\n\t{% endif %}\n```\n\n只要条件满足：`theme.baidu_analytics`为true便插入这段代码。统计代码的key值已经被抽取到主题`_config.yml`中的`baidu_analytics`属性了。\n\n接下来，在主题的`_config.yml`中添加上百度统计的key就行了\n\n```\n\t# Baidu Analytics ID\n\tbaidu_analytics: your key\n```\n\n### 手动添加统计模板\n\n若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹`layout`/`_scripts`/`analytics`，新建`baidu-analytics.swig`文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。\n\n```\n\t{% include 'analytics/baidu-analytics.swig' %}\n```\n","slug":"js/hexo/hexo-baido-analytics","published":1,"updated":"2016-02-28T14:48:40.000Z","_id":"ckqp5fce4003pz2v8umv93l8c","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"使用hexo搭建个人博客 part2","date":"2015-10-11T13:06:35.000Z","_content":"\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/hexo/hexo-2-theme.md","raw":"title: 使用hexo搭建个人博客 part2\ndate: 2015-10-11 21:06:35\ncategories: node\ntags: hexo\n\n---\n\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/hexo/hexo-2-theme","published":1,"updated":"2016-02-28T14:48:40.000Z","_id":"ckqp5fce9003sz2v8f57pff51","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"使用hexo搭建个人博客 part1","date":"2015-09-18T13:06:35.000Z","_content":"\n\n>代码段中的\"$ \"指在命令行下执行\n\n---\n\n### 安装hexo\n\n安装首先环境中要装好：\n\n* node.js\n* npm\n\n这2个的安装这里不详细介绍，在安装完的情况下：\n\n\n```\n    $ npm install -g hexo\n```\n\n### 初始化项目\n\n初始化blog项目\n\n\n```\n    $ hexo init blog\n```\n\n或者创建一个项目blog,在项目中初始化\n\n```\n    $ mkdir blog\n    $ cd blog\n    $ hexo init\n```\n\n### 安装依赖\n\n```\n    $ npm install\n```\n\n### 开启服务\n\nhexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：\n\n```\n    $ npm install hexo-server --sav\n```\n\n开启服务\n\n```\n    $ hexo server -p 4000\n```\n\n-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入[http://localhost:4000](http://localhost:4000)就可以看到效果了：\n\n```\n INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n### 新增文章\n\n文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：\n\n```\n   $ hexo new post example\n```\n这样，在source/_posts/下就多了个example.md的文件了:\n\n```\ntitle: example\ndate: 2015-09-18 21:04:03\ntags:\n---\n```\n\ntitle是文章的标题;  \ndate是文章的时间;  \ntags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,...];\ncategories是分类，如果你想添加到对应的分类，可以加上;  \n---之后的内容就是文章的主体了，以md的格式写之就可以了\n\n### 生成静态文件\n\n生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务\n\n```\n    $ hexo generate\n```\n\n### 部署项目文件\n\n部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)\n\n用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。\n\n部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置\n\n```yml\ndeploy:\n  type: git\n  repository: https://github.com/yourGithubRespository\n  branch: master\n  message: hexo deploy message\n```\n\ntype是部署类型，repository是仓库地址，branch我选了主线\n\n在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    \n\n之后就可以开始部署了：\nhexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\n之后就可以开始部署了：\n\n```\n    $ hexo deploy\n```\n\n每次部署前都需要重新生成文件，2步可以合成一起：\n\n```\n    $ hexo deploy -generate\n```\n\n### 命令缩写\n\nhexo的命令有缩写模式，有些命令中的单词可以简化成头字母：\n\n```\n    $ hexo server  =>  $ hexo s\n    $ hexo deploy  =>  $ hexo d\n    $ hexo generate  =>  $ hexo g\n    $ hexo deploy -generate  =>  $ hexo d -g\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/hexo/hexo-1-install.md","raw":"title: 使用hexo搭建个人博客 part1\ndate: 2015-09-18 21:06:35\ncategories: node\ntags: hexo\n\n---\n\n\n>代码段中的\"$ \"指在命令行下执行\n\n---\n\n### 安装hexo\n\n安装首先环境中要装好：\n\n* node.js\n* npm\n\n这2个的安装这里不详细介绍，在安装完的情况下：\n\n\n```\n    $ npm install -g hexo\n```\n\n### 初始化项目\n\n初始化blog项目\n\n\n```\n    $ hexo init blog\n```\n\n或者创建一个项目blog,在项目中初始化\n\n```\n    $ mkdir blog\n    $ cd blog\n    $ hexo init\n```\n\n### 安装依赖\n\n```\n    $ npm install\n```\n\n### 开启服务\n\nhexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：\n\n```\n    $ npm install hexo-server --sav\n```\n\n开启服务\n\n```\n    $ hexo server -p 4000\n```\n\n-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入[http://localhost:4000](http://localhost:4000)就可以看到效果了：\n\n```\n INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n### 新增文章\n\n文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：\n\n```\n   $ hexo new post example\n```\n这样，在source/_posts/下就多了个example.md的文件了:\n\n```\ntitle: example\ndate: 2015-09-18 21:04:03\ntags:\n---\n```\n\ntitle是文章的标题;  \ndate是文章的时间;  \ntags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,...];\ncategories是分类，如果你想添加到对应的分类，可以加上;  \n---之后的内容就是文章的主体了，以md的格式写之就可以了\n\n### 生成静态文件\n\n生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务\n\n```\n    $ hexo generate\n```\n\n### 部署项目文件\n\n部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)\n\n用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。\n\n部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置\n\n```yml\ndeploy:\n  type: git\n  repository: https://github.com/yourGithubRespository\n  branch: master\n  message: hexo deploy message\n```\n\ntype是部署类型，repository是仓库地址，branch我选了主线\n\n在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    \n\n之后就可以开始部署了：\nhexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\n之后就可以开始部署了：\n\n```\n    $ hexo deploy\n```\n\n每次部署前都需要重新生成文件，2步可以合成一起：\n\n```\n    $ hexo deploy -generate\n```\n\n### 命令缩写\n\nhexo的命令有缩写模式，有些命令中的单词可以简化成头字母：\n\n```\n    $ hexo server  =>  $ hexo s\n    $ hexo deploy  =>  $ hexo d\n    $ hexo generate  =>  $ hexo g\n    $ hexo deploy -generate  =>  $ hexo d -g\n```\n\n\n\n\n\n\n\n\n\n","slug":"js/hexo/hexo-1-install","published":1,"updated":"2016-02-28T14:48:40.000Z","_id":"ckqp5fcek003vz2v81iny0j2a","comments":1,"layout":"post","photos":[],"link":"","sticky":0},{"title":"拆分Git仓库并保存提交记录","date":"2021-06-26T14:48:38.000Z","_content":"\n>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作\n\n## 基本设定\n\n父项目为 `https://github.com/xxx/demo.git`\n\n父仓库目录：/demo\n\n当前子仓库目录：/demo/target_child\n\n目标是把target_child拆到新项目：`https://github.com/xxx/target_child.git`\n\n\n\n##  step1 clone 一份原仓库文件到本地，目录为目标文件夹\n\n\n\n\n\n```\n\n​cd ~/git/code/\n​\n​git clone https://github.com/xxx/demo.git target_child\n​\n\n```\n\n\n\n## step2 删掉原仓库的remote\n\n\n```\n\ncd target_child\n\ngit remote rm origin\n\n\n```\n\n\n\n## step3 过滤无用的历史记录\n\n过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。\n\n```\n\n\ngit filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all\n\n\n```\n\n\n\n| 参数|作用 |\n|---|---|\n|--tag-name-filter |该参数控制我们要如何处理旧的 tag，cat 即表示原样输出|\n|--prune-empty |删除空的（对子目录没有影响的）提交|\n|--subdirectory-filter |指定子目录路径, 如`./target_child`|\n|-- --all |该参数必须跟在`--`后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。|\n\n\n\n## step 4 清理.git的object\n\n`.git` 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.\n\nPS: `git gc`操作耗时比较久,请耐心等待.\n\n\n\n```\n\n\ngit reset --hard\n\ngit for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d\n\ngit reflog expire --expire=now --all\n\ngit gc --aggressive --prune=now\n\n\n```\n\n## step 5 将新的本地仓库推送到远端\n\n先创建新的仓库：`https://github.com/xxx/target_child.git`\n\n```\n\n\n//添加远端分支\n\ngit remote add origin https://github.com/xxx/target_child.git\n\n//强制推送到远端\n\ngit push --fore origin master\n\n\n```\n\nPS:\n\n若master分支为保护状态，强制推送时会遇到如下错误：\n\n```\n\nremote: GitLab: You are not allowed to force push code to a protected branch on this project.\n\n```\n\n须解除master分支的保护状态，推完之后再改回来","source":"_posts/git/split-git-repository.md","raw":"title: 拆分Git仓库并保存提交记录  \ndate: 2021-06-26 22:48:38  \ntags: git   \ncategories: git\n\n---\n\n>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作\n\n## 基本设定\n\n父项目为 `https://github.com/xxx/demo.git`\n\n父仓库目录：/demo\n\n当前子仓库目录：/demo/target_child\n\n目标是把target_child拆到新项目：`https://github.com/xxx/target_child.git`\n\n\n\n##  step1 clone 一份原仓库文件到本地，目录为目标文件夹\n\n\n\n\n\n```\n\n​cd ~/git/code/\n​\n​git clone https://github.com/xxx/demo.git target_child\n​\n\n```\n\n\n\n## step2 删掉原仓库的remote\n\n\n```\n\ncd target_child\n\ngit remote rm origin\n\n\n```\n\n\n\n## step3 过滤无用的历史记录\n\n过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。\n\n```\n\n\ngit filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all\n\n\n```\n\n\n\n| 参数|作用 |\n|---|---|\n|--tag-name-filter |该参数控制我们要如何处理旧的 tag，cat 即表示原样输出|\n|--prune-empty |删除空的（对子目录没有影响的）提交|\n|--subdirectory-filter |指定子目录路径, 如`./target_child`|\n|-- --all |该参数必须跟在`--`后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。|\n\n\n\n## step 4 清理.git的object\n\n`.git` 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.\n\nPS: `git gc`操作耗时比较久,请耐心等待.\n\n\n\n```\n\n\ngit reset --hard\n\ngit for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d\n\ngit reflog expire --expire=now --all\n\ngit gc --aggressive --prune=now\n\n\n```\n\n## step 5 将新的本地仓库推送到远端\n\n先创建新的仓库：`https://github.com/xxx/target_child.git`\n\n```\n\n\n//添加远端分支\n\ngit remote add origin https://github.com/xxx/target_child.git\n\n//强制推送到远端\n\ngit push --fore origin master\n\n\n```\n\nPS:\n\n若master分支为保护状态，强制推送时会遇到如下错误：\n\n```\n\nremote: GitLab: You are not allowed to force push code to a protected branch on this project.\n\n```\n\n须解除master分支的保护状态，推完之后再改回来","slug":"git/split-git-repository","published":1,"updated":"2021-07-04T15:05:17.279Z","_id":"ckqpb8jv40001ngv8jtqvzyuf","comments":1,"layout":"post","photos":[],"link":"","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cjutwh9t100002sv8gdqoa69m","category_id":"cjutwh9t500012sv8jq7vlbzr","_id":"ckqp531r70003z2v8w52lqpp9"},{"post_id":"ckqp531td0007z2v8dbeu2qmt","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp531te0008z2v8n8ngofci"},{"post_id":"ckqp531tg000az2v8hhm1lnpe","category_id":"cjutw4mds004kxbv853mljenc","_id":"ckqp531th000bz2v8qviqqs4o"},{"post_id":"ckqp531tk000ez2v8kma62w06","category_id":"cjutw4mav0007xbv8l70j723p","_id":"ckqp531tl000fz2v8jif0978d"},{"post_id":"ckqp562v6000nz2v8pc8eqryi","category_id":"cjutw4md9003oxbv8halimzkf","_id":"ckqp562v7000oz2v80we4qlxu"},{"post_id":"ckqp56leu000qz2v8xm1lt3r8","category_id":"cjutw4md5003jxbv87hgzrys2","_id":"ckqp56lew000rz2v8v7ugyi2a"},{"post_id":"ckqp576us000tz2v8enuefm7g","category_id":"cjutw4mcx0035xbv8bl06joa7","_id":"ckqp576ut000uz2v8g44t3axx"},{"post_id":"ckqp578lr000wz2v8bbshc573","category_id":"cjutw4mcx0035xbv8bl06joa7","_id":"ckqp578lr000xz2v889wf7i6b"},{"post_id":"ckqp57e5x000zz2v8rt1kxd4k","category_id":"cjutw4mcx0035xbv8bl06joa7","_id":"ckqp57e5z0010z2v8bn53bh6v"},{"post_id":"ckqp57hm60012z2v8k6n8qmkq","category_id":"cjutw4mcx0035xbv8bl06joa7","_id":"ckqp57hm70013z2v8c3liuuhi"},{"post_id":"ckqp57tfp0015z2v8il1tdjqx","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp57tfp0016z2v8zy19yckw"},{"post_id":"ckqp57w9o0018z2v8f6e9oc74","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp57w9q0019z2v875hk895x"},{"post_id":"ckqp57yus001bz2v8wck3h462","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp57yuu001cz2v8evmo3kll"},{"post_id":"ckqp581bo001ez2v8n204xbj7","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp581bp001fz2v8phy5lstg"},{"post_id":"ckqp584i1001hz2v8rhkkbnue","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp584i2001iz2v8ye524bgd"},{"post_id":"ckqp58ahr001kz2v8ojfrp5fs","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp58ahs001lz2v8aivanfx5"},{"post_id":"ckqp58dus001nz2v8p91lz2eb","category_id":"cjutw4mch002ixbv8dz4xkqmg","_id":"ckqp58dus001oz2v8foe6v2so"},{"post_id":"ckqp58j2v001qz2v885wuebpc","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp58j2w001rz2v8anrf3t1c"},{"post_id":"ckqp58mdk001tz2v8h4cuukav","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp58mdl001uz2v8tstrsy7z"},{"post_id":"ckqp58suz001xz2v81rhj13nl","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp58sv0001yz2v89v6bd0na"},{"post_id":"ckqp591k00020z2v8z6xgqu6c","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp591k10021z2v823yt40o0"},{"post_id":"ckqp5960j0023z2v822t9cu9i","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp5960j0024z2v8xspuu3ph"},{"post_id":"ckqp59fdt0026z2v8upf776q9","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp59fdt0027z2v8qnldtb98"},{"post_id":"ckqp59i1r0029z2v8a0adzqbo","category_id":"cjutw4mc2001txbv8565zypo8","_id":"ckqp59i1t002az2v8fq4dzhda"},{"post_id":"ckqp5b6n0002cz2v8je513djq","category_id":"cjutw4mbz001nxbv8qujioi63","_id":"ckqp5b6n1002dz2v8slglvep2"},{"post_id":"ckqp5bcft002gz2v8ykwf8c4v","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5bcfu002hz2v8rvvk28c4"},{"post_id":"ckqp5bfwz002jz2v8v21u21q5","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5bfx1002kz2v8ymvmr1oi"},{"post_id":"ckqp5bo08002mz2v8lq9ze9rr","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5bo09002nz2v8kd7xiesu"},{"post_id":"ckqp5bpl9002pz2v8ls5dq8jm","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5bpla002qz2v83l9r8c4g"},{"post_id":"ckqp5c0ry002sz2v8dodwvpen","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5c0rz002tz2v8lv7v8mjx"},{"post_id":"ckqp5c8sw002vz2v8bpym3a33","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5c8sy002wz2v8cohapi23"},{"post_id":"ckqp5cc0p002yz2v851nwp4rg","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5cc0q002zz2v8d78ns0d2"},{"post_id":"ckqp5cfnu0031z2v8eaewyex1","category_id":"cjutw4mbd000xxbv8evjnngls","_id":"ckqp5cfnv0032z2v8so01hl8c"},{"post_id":"ckqp5chdu0034z2v83kaa7tbr","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5chdu0035z2v8gn6kc5rd"},{"post_id":"ckqp5cl9c0037z2v848lie9d2","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5cl9d0038z2v85a8ogsd8"},{"post_id":"ckqp5cqar003az2v8a7z5ns3p","category_id":"cjutw4mb4000mxbv85tb20f02","_id":"ckqp5cqas003bz2v8exfhw7j3"},{"post_id":"ckqp5den6003dz2v8wqwnxcye","category_id":"cjutw4mb0000cxbv8gjpoim8w","_id":"ckqp5den7003ez2v8uvqzgztg"},{"post_id":"ckqp5dp3k003gz2v862lk55jq","category_id":"cjutw4mb2000hxbv8qn0sseqb","_id":"ckqp5dp3k003hz2v8r2fv8cfi"},{"post_id":"ckqp5euld003mz2v8zxwcmjpx","category_id":"cjutw4mav0007xbv8l70j723p","_id":"ckqp5eule003nz2v8uso4m33s"},{"post_id":"ckqp5fce9003sz2v8f57pff51","category_id":"cjutw4mda003txbv8ygf1pvwi","_id":"ckqp5fces003yz2v8bcay0x6n"},{"post_id":"ckqp5fce4003pz2v8umv93l8c","category_id":"cjutw4mda003txbv8ygf1pvwi","_id":"ckqp5fcet003zz2v8jke70zs7"},{"post_id":"ckqp5fcek003vz2v81iny0j2a","category_id":"cjutw4mda003txbv8ygf1pvwi","_id":"ckqp5fcev0040z2v8hyxkqu1i"},{"post_id":"ckqpb8jv40001ngv8jtqvzyuf","category_id":"ckqpb9syk0004ngv8ij3rle1y","_id":"ckqpbt8y70003s3v8122adk77"}],"PostTag":[{"post_id":"cjutwh9t100002sv8gdqoa69m","tag_id":"cjutwh9t500022sv8a20tfoy8","_id":"cjutwh9t800052sv89n7vjldh"},{"post_id":"cjutwh9t100002sv8gdqoa69m","tag_id":"cjutwh9t700032sv8l8d3whcm","_id":"cjutwh9t800062sv86nxhuu7k"},{"post_id":"ckqp531td0007z2v8dbeu2qmt","tag_id":"cjutwh9wi003z2sv8hnp5sc49","_id":"ckqp531tf0009z2v85gh0kzxp"},{"post_id":"ckqp531tg000az2v8hhm1lnpe","tag_id":"cjutwh9wi003z2sv8hnp5sc49","_id":"ckqp531th000cz2v8uql8jpsg"},{"post_id":"ckqp531tg000az2v8hhm1lnpe","tag_id":"cjutwh9wm00472sv8ph4w9nu1","_id":"ckqp531th000dz2v841l1yeyw"},{"post_id":"ckqp531tk000ez2v8kma62w06","tag_id":"cjutwh9wj00432sv8g7w7btcv","_id":"ckqp531tl000gz2v82xgwgsjf"},{"post_id":"ckqp562v6000nz2v8pc8eqryi","tag_id":"cjutwh9w7003k2sv8ob17j7h3","_id":"ckqp562v7000pz2v8yl2sm8ze"},{"post_id":"ckqp56leu000qz2v8xm1lt3r8","tag_id":"cjutwh9w3003c2sv8lh0k12fk","_id":"ckqp56lex000sz2v8m3dd8ipw"},{"post_id":"ckqp576us000tz2v8enuefm7g","tag_id":"cjutwh9vr002z2sv8xfmbo9ub","_id":"ckqp576ut000vz2v8bxnxupsg"},{"post_id":"ckqp578lr000wz2v8bbshc573","tag_id":"cjutwh9vr002z2sv8xfmbo9ub","_id":"ckqp578lr000yz2v81di32l7d"},{"post_id":"ckqp57e5x000zz2v8rt1kxd4k","tag_id":"cjutwh9vr002z2sv8xfmbo9ub","_id":"ckqp57e5z0011z2v8qg480g6w"},{"post_id":"ckqp57hm60012z2v8k6n8qmkq","tag_id":"cjutwh9vr002z2sv8xfmbo9ub","_id":"ckqp57hm70014z2v83csvyw13"},{"post_id":"ckqp57tfp0015z2v8il1tdjqx","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp57tfp0017z2v876yisvz9"},{"post_id":"ckqp57w9o0018z2v8f6e9oc74","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp57w9q001az2v8a9kddv81"},{"post_id":"ckqp57yus001bz2v8wck3h462","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp57yuu001dz2v842cltete"},{"post_id":"ckqp581bo001ez2v8n204xbj7","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp581bp001gz2v8hrza8e21"},{"post_id":"ckqp584i1001hz2v8rhkkbnue","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp584i2001jz2v8w20p4rws"},{"post_id":"ckqp58ahr001kz2v8ojfrp5fs","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp58ahs001mz2v8pyiters0"},{"post_id":"ckqp58dus001nz2v8p91lz2eb","tag_id":"cjutwh9va002d2sv8rpugxh1b","_id":"ckqp58dut001pz2v8qtwp2g4x"},{"post_id":"ckqp58j2v001qz2v885wuebpc","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp58j2w001sz2v8p4mq33f7"},{"post_id":"ckqp58mdk001tz2v8h4cuukav","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp58mdm001vz2v8iz0ix7fq"},{"post_id":"ckqp58mdk001tz2v8h4cuukav","tag_id":"cjutwh9v500252sv8gr336573","_id":"ckqp58mdm001wz2v87m23bska"},{"post_id":"ckqp58suz001xz2v81rhj13nl","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp58sv0001zz2v8g3vyh6qf"},{"post_id":"ckqp591k00020z2v8z6xgqu6c","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp591k10022z2v8yvj3o5xi"},{"post_id":"ckqp5960j0023z2v822t9cu9i","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp5960j0025z2v85ux92bxx"},{"post_id":"ckqp59fdt0026z2v8upf776q9","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp59fdt0028z2v8h0vjqmjb"},{"post_id":"ckqp59i1r0029z2v8a0adzqbo","tag_id":"cjutwh9uw001p2sv815n1cfl9","_id":"ckqp59i1t002bz2v8850ycwve"},{"post_id":"ckqp5b6n0002cz2v8je513djq","tag_id":"cjutwh9uu001k2sv8o89r2j8n","_id":"ckqp5b6n1002ez2v8ee3yz3as"},{"post_id":"ckqp5b6n0002cz2v8je513djq","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5b6n1002fz2v8ox6frqrq"},{"post_id":"ckqp5bcft002gz2v8ykwf8c4v","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5bcfz002iz2v88dmnv936"},{"post_id":"ckqp5bfwz002jz2v8v21u21q5","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5bfx1002lz2v8ezdxvly0"},{"post_id":"ckqp5bo08002mz2v8lq9ze9rr","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5bo09002oz2v8acbi246u"},{"post_id":"ckqp5bpl9002pz2v8ls5dq8jm","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5bpla002rz2v8qazbm0w9"},{"post_id":"ckqp5c0ry002sz2v8dodwvpen","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5c0rz002uz2v81auzrcvr"},{"post_id":"ckqp5c8sw002vz2v8bpym3a33","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5c8sy002xz2v8z0z6w6ae"},{"post_id":"ckqp5cc0p002yz2v851nwp4rg","tag_id":"cjutwh9uh00112sv8jvfgwyqn","_id":"ckqp5cc0q0030z2v8lvcmggi8"},{"post_id":"ckqp5cfnu0031z2v8eaewyex1","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5cfnv0033z2v8my91po7q"},{"post_id":"ckqp5chdu0034z2v83kaa7tbr","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5chdu0036z2v8ozf42xli"},{"post_id":"ckqp5cl9c0037z2v848lie9d2","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5cl9d0039z2v8m78rv59s"},{"post_id":"ckqp5cqar003az2v8a7z5ns3p","tag_id":"cjutwh9u7000l2sv891mn2rp9","_id":"ckqp5cqas003cz2v84xjyg655"},{"post_id":"ckqp5den6003dz2v8wqwnxcye","tag_id":"cjutwh9u4000h2sv86rtn5n7v","_id":"ckqp5den7003fz2v85gjikwib"},{"post_id":"ckqp5dp3k003gz2v862lk55jq","tag_id":"cjutwh9u0000d2sv8s4bjctqt","_id":"ckqp5dp3k003iz2v8domr1bdk"},{"post_id":"ckqp5ej4g003jz2v8mxjyueca","tag_id":"cjutwh9wd003q2sv8uly7jky7","_id":"ckqp5ej4i003kz2v8ma6k9yea"},{"post_id":"ckqp5ej4g003jz2v8mxjyueca","tag_id":"cjutwh9wd003r2sv8ajg72oz0","_id":"ckqp5ej4i003lz2v872uh2g0w"},{"post_id":"ckqp5euld003mz2v8zxwcmjpx","tag_id":"cjutwh9tf00092sv85nzuwnmf","_id":"ckqp5eule003oz2v80auypaxw"},{"post_id":"ckqp5fce4003pz2v8umv93l8c","tag_id":"cjutwh9w5003g2sv8q27kgu40","_id":"ckqp5fce6003rz2v8znhishv1"},{"post_id":"ckqp5fce9003sz2v8f57pff51","tag_id":"cjutwh9w5003g2sv8q27kgu40","_id":"ckqp5fcea003uz2v8ia2g7qia"},{"post_id":"ckqp5fcek003vz2v81iny0j2a","tag_id":"cjutwh9w5003g2sv8q27kgu40","_id":"ckqp5fceq003xz2v8f3x7g2zm"},{"post_id":"ckqpb8jv40001ngv8jtqvzyuf","tag_id":"ckqpb9syl0005ngv8pjp840ii","_id":"ckqpb9syn0006ngv8ige52ejd"}],"Tag":[{"name":"golang","_id":"cjutwh9t500022sv8a20tfoy8"},{"name":"defer","_id":"cjutwh9t700032sv8l8d3whcm"},{"name":"sublime","_id":"cjutwh9tf00092sv85nzuwnmf"},{"name":"redis","_id":"cjutwh9u0000d2sv8s4bjctqt"},{"name":"regEx","_id":"cjutwh9u4000h2sv86rtn5n7v"},{"name":"php","_id":"cjutwh9u7000l2sv891mn2rp9"},{"name":"intval","_id":"cjutwh9uh00112sv8jvfgwyqn"},{"name":"pattern","_id":"cjutwh9uu001k2sv8o89r2j8n"},{"name":"mysql","_id":"cjutwh9uw001p2sv815n1cfl9"},{"name":"distinct","_id":"cjutwh9v500252sv8gr336573"},{"name":"linux","_id":"cjutwh9va002d2sv8rpugxh1b"},{"name":"javascript","_id":"cjutwh9vr002z2sv8xfmbo9ub"},{"name":"java","_id":"cjutwh9w3003c2sv8lh0k12fk"},{"name":"hexo","_id":"cjutwh9w5003g2sv8q27kgu40"},{"name":"http","_id":"cjutwh9w7003k2sv8ob17j7h3"},{"name":"go","_id":"cjutwh9wd003q2sv8uly7jky7"},{"name":"ide","_id":"cjutwh9wd003r2sv8ajg72oz0"},{"name":"brew","_id":"cjutwh9wi003z2sv8hnp5sc49"},{"name":"homebrew","_id":"cjutwh9wj00432sv8g7w7btcv"},{"name":"mongodb","_id":"cjutwh9wm00472sv8ph4w9nu1"},{"name":"git","_id":"ckqpb9syl0005ngv8pjp840ii"}]}}