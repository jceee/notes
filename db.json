{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/avata2r.jpeg","path":"images/avata2r.jpeg","modified":1,"renderable":0},{"_id":"source/images/default_avatar1.jpg","path":"images/default_avatar1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/images/go-vscode/debug.png","path":"images/go-vscode/debug.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/images/go-vscode/go-extend.png","path":"images/go-vscode/go-extend.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/images/go-vscode/start-debug.png","path":"images/go-vscode/start-debug.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"ab2ab2c31abca80b0607edff1bfded9460d60376","modified":1649497478247},{"_id":"source/CNAME","hash":"d7c5400fce94deb5eb92bd0e45a7b1d28b824c4c","modified":1628489705367},{"_id":"source/README.md","hash":"255ad4e7c21a6883f61bdd58d298398e32500ea7","modified":1628489705367},{"_id":"source/favicon.ico","hash":"e145393bba620d545bf0bc718d8afde70d5244ed","modified":1628489705370},{"_id":"source/googleacbe88ecc07eda71.html","hash":"a7fe7c727c8ce17d7b79087c2425e79f65a0786b","modified":1628489705370},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1625411759000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1625411759000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1625411759000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1625411759000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1625411758000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1625411759000},{"_id":"themes/next/README.md","hash":"0b709591995001cd860384d6c189e51d91690714","modified":1625411759000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1625411758000},{"_id":"themes/next/_config.yml","hash":"0f06059fac58c84c3cb3b6f9fbc7cd761e21cabc","modified":1625411759000},{"_id":"themes/next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1625411759000},{"_id":"themes/next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1625411758000},{"_id":"themes/next/_config_back.yml","hash":"a6c44cff60417384b378435041fa5e349609eea8","modified":1625411759000},{"_id":"themes/next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1625411759000},{"_id":"source/404/index.md","hash":"519c7f7858c12b5c921b2d1546eb3438bec73607","modified":1628489705366},{"_id":"source/_posts/.DS_Store","hash":"6a3bb787dee4dcde2476dc1b4bb88e88d0f54871","modified":1649497478249},{"_id":"source/about/index.md","hash":"b1510ecd4f3208f363271f76bb4dae394350ff79","modified":1628489705370},{"_id":"source/about/index副本.md","hash":"189dde3590ba087e4272a9db4a022041f4a68855","modified":1628489705370},{"_id":"source/categories/index.md","hash":"449f53ceb1cff097e1416836bd3c339a0c95ad39","modified":1628489705370},{"_id":"source/images/.DS_Store","hash":"fc76dc057c91ec44f2740ea51cf12c2d11fb1411","modified":1632988340604},{"_id":"source/images/avata2r.jpeg","hash":"9660b0f2f5698f2593ca4adf3a1e9651a5c31343","modified":1628489705370},{"_id":"source/images/default_avatar1.jpg","hash":"0487f298a5757494b578cb0c0d1775ade3b5bc4c","modified":1628489705370},{"_id":"source/tags/index.md","hash":"34478bc69d4658512a576b2dc7e659e71d23fb5e","modified":1628489705374},{"_id":"themes/next/.git/FETCH_HEAD","hash":"d6abf2bd4e559c3ed0cd404d66c1e0850132a33c","modified":1625411759000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"a3bc498b7b1cc5ce4fdee9083514345b0c95fcb7","modified":1625411759000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1625411759000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1625411759000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1625411759000},{"_id":"themes/next/.git/index","hash":"8b5a886962d87f9776c99be528c7cc29ca5f9d88","modified":1625411759000},{"_id":"themes/next/.git/packed-refs","hash":"fd738a7f9cd385a378211d6c8b7da8287c6e2f85","modified":1625411759000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1625411759000},{"_id":"source/_posts/HTTP/http-redirect.md","hash":"6c7d7f437a7b9648c32bbdafe020800309bcdbd5","modified":1628489705367},{"_id":"source/_posts/git/split-git-repository.md","hash":"76ab21901c4531c7a98ec02b8e937df75aac7cdf","modified":1628489705367},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1625411758000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1625411758000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1625411758000},{"_id":"themes/next/layout/index.swig","hash":"38b1ad401b748965369296b86327d23082a1fe93","modified":1625411758000},{"_id":"themes/next/layout/post.swig","hash":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1625411758000},{"_id":"themes/next/layout/_layout.swig","hash":"4c752913837a1c1f9e89c8e4030718b1578145f1","modified":1625411758000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1625411758000},{"_id":"source/_posts/golang/defer.md","hash":"facb0b63b021bf63546d09c6dd2f38db7ce82168","modified":1628489705367},{"_id":"source/_posts/java/java-bean.md","hash":"678b2ab891b84ce2c866f5e68a566cce663aee3e","modified":1628489705367},{"_id":"source/_posts/js/.DS_Store","hash":"49b733b2562302eb65a1764b7631b64336bb21d0","modified":1634032836763},{"_id":"source/_posts/golang/.DS_Store","hash":"420e7bc46128bbbcae0891601504326e394cb24b","modified":1647596996421},{"_id":"source/_posts/js/js-ajax.md","hash":"59d82808b4a1c0f9967451756d01eae5a7d54d85","modified":1628489705367},{"_id":"source/_posts/js/js-ajaxJsonToString.md","hash":"724d29da74192cd1a604ee753d342a39a834f112","modified":1628489705367},{"_id":"source/_posts/js/js-createElement.md","hash":"8860437458e84935f446f3dffd2020f80b525a05","modified":1628489705367},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1625411759000},{"_id":"source/_posts/js/js-qrcode.md","hash":"f4f1cf80a315530c6e97ea64312cf0eb92b07f04","modified":1628489705368},{"_id":"source/_posts/golang/docker.md","hash":"8d15349afc34d7fa817069f988365e0649f44ea6","modified":1638009598889},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1625411759000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1625411759000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1625411759000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1625411759000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1625411759000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1625411759000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1625411759000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1625411759000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1625411758000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1625411758000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1625411758000},{"_id":"source/_posts/linux/linux-curl.md","hash":"d78de91b6a7ceb945cceda11d3bd8b9127d7dcce","modified":1628489705368},{"_id":"source/_posts/linux/linux-find.md","hash":"88e1686dd7514a82f52e178fa3b9d68162999705","modified":1628489705368},{"_id":"source/_posts/linux/linux-lsof.md","hash":"58bde492477d02c148529e49127243b8545b2dce","modified":1628489705368},{"_id":"source/_posts/linux/linux-man.md","hash":"585fea6b8bfbaf49f26de6023d44ecd1881ac9c8","modified":1628489705368},{"_id":"source/_posts/linux/linux-nohup.md","hash":"2ad90d56a768a5306f0bbfc3ca9b5afa1f123f7b","modified":1628489705368},{"_id":"source/_posts/linux/linux-lnmp.md","hash":"b19aa143e727ffe804d1f11de366aea8fbbc8c8d","modified":1628489705368},{"_id":"source/_posts/linux/linux-ps.md","hash":"e7e3b3e83c3d8486bce6a7a84e5f6689fff9cd8b","modified":1628489705368},{"_id":"source/_posts/patterns/pattern-pub-sub.md","hash":"2e8c71bb641dafdfda008936d46788fdf25532d2","modified":1628489705369},{"_id":"source/_posts/php/php-HTTP-RAW-POST-DATA.md","hash":"3763f2dc7444cf554119c0bdee1850476028652f","modified":1628489705369},{"_id":"source/_posts/php/php-authoload.md","hash":"18713ca5c5d1cfed508ad9d16988829ebf0bcbbf","modified":1628489705369},{"_id":"source/_posts/php/php-bccomp.md","hash":"57b8234e1656724b171bc86931f8bd4dd7dbc92e","modified":1628489705369},{"_id":"source/_posts/php/php-call.md","hash":"7bc319e81bd1e98fe6d2272e34c09a294d5e8de3","modified":1628489705369},{"_id":"source/_posts/php/php-filePath.md","hash":"ae14a5b626fd184dcb1582cb2ad6fd0c8ebb7533","modified":1628489705369},{"_id":"source/_posts/php/php-config.md","hash":"c4f2840126db0e0435515ea7b05f83fb5fbea377","modified":1628489705369},{"_id":"source/_posts/php/php-sortArrByfield.md","hash":"6570aa8c138d6ef7d32c15bfc16178faa15c88a1","modified":1628489705369},{"_id":"source/_posts/php/php-intMaxVal.md","hash":"5d528c6ec41b9e0bc45f141a8d26a3a99059f208","modified":1628489705369},{"_id":"source/_posts/php/php-stream.md","hash":"2eb8673e30fcbdae93df1cf03172f37047b14800","modified":1628489705369},{"_id":"source/_posts/php/php-webserver.md","hash":"ffd736ec158a2a0fce7652f4ca050c900cc9a546","modified":1628489705369},{"_id":"source/_posts/php/php-fpm-signal-exited.md","hash":"20c436b8d2ced5192aaafbeb427d2ceb6ca73bcc","modified":1647515366209},{"_id":"source/_posts/php/php-trait.md","hash":"2709791f2cf8cfb19da37f730a0fe863b3cfd9aa","modified":1633665881697},{"_id":"source/_posts/php/php_mysql_charset.md","hash":"b7e1e3ae8f8ea7dd830b5067b1a918975fea1ebb","modified":1647592232836},{"_id":"source/_posts/php/php_thinkphp3.1_db_bug.md","hash":"5c95088f04cbaef4fb39dd85dccc57df96e702da","modified":1649733144378},{"_id":"source/_posts/mongo/brew-mongodb.md","hash":"aed74210821f1edfa9f20d3a14c1ec39aa9ac5d7","modified":1628489705368},{"_id":"source/_posts/mysql/brew-mysql.md","hash":"3f1d54d57141408db28dee1ab3a3579effcea386","modified":1628489705368},{"_id":"source/_posts/mysql/mysql-abs.md","hash":"d79442d39e662590343d3706b2fdf296cc72d645","modified":1628489705368},{"_id":"source/_posts/mysql/mysql-case.md","hash":"2f0cbcffb8632713953c870a1f6e16c389db68e2","modified":1628489705368},{"_id":"source/_posts/mysql/mysql-distinct.md","hash":"925fb0bec75ff6a721d64733ac3ae3ac90b41880","modified":1628489705368},{"_id":"source/_posts/mysql/mysql-insertMoreThanOne.md","hash":"84189fff496956143008550baab361d3c3ef62ca","modified":1628489705368},{"_id":"source/_posts/mysql/mysql-modifySql.md","hash":"d4f4d1c3064054b2afd5f675844b100b5fc78518","modified":1628489705369},{"_id":"source/_posts/macos/brew-token.md","hash":"2fd760e65937becc9eb5543a15c0c1ab9c7abda0","modified":1647592131174},{"_id":"source/_posts/mysql/mysql-on-duplice-key-update.md","hash":"37f81f4ce861aaf4f99a037ee2c75f8325006f16","modified":1628489705369},{"_id":"source/_posts/mysql/mysql-strimg.md","hash":"2b441b299674ac31f24f1ac3ac66f3864fbf2074","modified":1628489705369},{"_id":"source/_posts/mysql/mysql-timeMethod.md","hash":"d799e03357d671a46f649a7903f6fc4d91d0a8af","modified":1628489705369},{"_id":"source/_posts/redis/redis-sortedSet.md","hash":"36ea717c694afc05a4365c34b2c87e23798d7f91","modified":1628489705369},{"_id":"source/_posts/mysql/.DS_Store","hash":"24aefb9b7fb66ea63bd17fe756a5aef30ec1db80","modified":1649587262104},{"_id":"source/_posts/regEx/regex.md","hash":"e29882c8399d758e240a80315f74bc0f9d2a935f","modified":1628489705369},{"_id":"source/_posts/mysql/mysqlslap.md","hash":"8c44d94d5618210dad6943a7cee174c26117dbdf","modified":1649587248171},{"_id":"source/_posts/mysql/mysql-proxy.md","hash":"40a1a1cb0817d8056caf85632f3b7eb8d1a716ad","modified":1640782613761},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1625411759000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1625411759000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1625411759000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1625411759000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1625411759000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1625411759000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1625411759000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1625411759000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1625411759000},{"_id":"themes/next/.git/logs/HEAD","hash":"54ec3038890a84b1bc2624b3ad71044e57705cce","modified":1625411759000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1625411759000},{"_id":"themes/next/scripts/filters/sticky.js","hash":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1625411759000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1625411759000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1625411759000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1625411759000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1625411759000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1625411759000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1625411759000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1625411759000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1625411759000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1625411759000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1625411759000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1625411759000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1625411759000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1625411759000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1625411759000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1625411759000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1625411759000},{"_id":"source/_posts/IDE/sublime/sublime-Encode.md","hash":"eafb6953f1eddf0d0225199e71a835b83870d3a8","modified":1628489705367},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1625411758000},{"_id":"themes/next/layout/_macro/post.swig","hash":"0674b9bf3103ca32e04f16c7f7a6adad7e32e011","modified":1625411758000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1625411758000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5ba14151b34af05c39bc16f03695a099d5c731ff","modified":1625411758000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1625411758000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0723351816bd6e1ffa0e037e4ffc0beecbdd9cd7","modified":1625411758000},{"_id":"source/_posts/IDE/vscode/go-ide-vscode.md","hash":"bc0de24cce588dbf38c02e86fd20b4739002527e","modified":1638007078923},{"_id":"themes/next/layout/_partials/head.swig","hash":"7edcc47b01b60e565b39b2baf3a87c20b61c7eaf","modified":1625411758000},{"_id":"themes/next/layout/_partials/header.swig","hash":"4286af7fe6eeab974e52d704a28290e7c7ed5490","modified":1625411758000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1625411758000},{"_id":"themes/next/layout/_partials/search.swig","hash":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1625411758000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1625411758000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1625411758000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1625411758000},{"_id":"source/_posts/js/hexo/hexo-1-install.md","hash":"5666e1d9e48923faac6e420692c61c265dcc1397","modified":1628489705367},{"_id":"source/_posts/js/hexo/hexo-2-theme.md","hash":"4f6aebed18ce7c2ad2a31207330b4c38a07d8ca5","modified":1628489705367},{"_id":"source/_posts/js/hexo/hexo-baido-analytics.md","hash":"6804cf5504e51b576b5e1b04412dfec115529437","modified":1628489705367},{"_id":"source/_posts/js/hexo/.DS_Store","hash":"bc75a14a3dbb5b11a8c6ea448b81d80867564c04","modified":1634036269985},{"_id":"source/_posts/golang/learn/error.md","hash":"f039ad3d7b7725be1c506d6a37dff3a93c0d1f10","modified":1647158756459},{"_id":"source/_posts/js/hexo/hexo-gitpage-404.md","hash":"14fcdff5e2f179263ec8eed9a7ebc5d54c34f862","modified":1634034662553},{"_id":"source/images/go-vscode/debug.png","hash":"270ae395d68343f35784e922f96266f35d1c1835","modified":1628489705371},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411759000},{"_id":"themes/next/layout/_scripts/bootstrap/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411758000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411758000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1625411758000},{"_id":"themes/next/.git/objects/05/421460fdda3755edb4cb84f4221ecabf22213a","hash":"c9efe850b1bd77b069355a0f79007790cdc48f79","modified":1625411759000},{"_id":"themes/next/.git/objects/00/b611c630e8fb334dec5e5b30ea35e1021f9d03","hash":"8a021cfd2b593fa1a212ec8e29d9e30db6d08f2a","modified":1625411759000},{"_id":"themes/next/.git/objects/1e/290fecf8db589e24f8985916636a096aa466c0","hash":"8cf20ecd203e0041975ef1c1e8004b217d8866e4","modified":1625411759000},{"_id":"themes/next/.git/objects/23/0a64a8678fda0699618359d39ea45b729e9c9c","hash":"01baf9f5e05372e10a722409d469bf0e4cef6db8","modified":1625411759000},{"_id":"themes/next/.git/objects/21/b90af0e12724efb5593563b19a29cbc1eb3758","hash":"6cdb1ee6d438df0860f95b9e78250722e640ffee","modified":1625411759000},{"_id":"themes/next/.git/objects/2c/c622d8d43df500db846e5dde7d504c942ff576","hash":"e3793db91fb03d4e9be8eae634b16045a10aa4af","modified":1625411759000},{"_id":"themes/next/.git/objects/15/f36c22c05b1b5bfff29756320107397e69c075","hash":"18f507c0b52f9cf2f8e8d37a7f85780e805560fe","modified":1625411759000},{"_id":"themes/next/.git/objects/2f/55e1b3b6de8ddaea93d3c07f1eb2ffe7b53203","hash":"96b93066f369e708a96c2bb5ff60fa9155003cb3","modified":1625411759000},{"_id":"themes/next/.git/objects/2d/33612d94cbc9020d7bda471c26347a93f51f30","hash":"918d1c4a442c781600d75274a97cc4bb7e05c6f1","modified":1625411759000},{"_id":"themes/next/.git/objects/3c/fc9b5f3606bfadf09c47c3172defb6cb41b8d0","hash":"1b03c493c971e1889efea9037b2748f66e3f768d","modified":1625411759000},{"_id":"themes/next/.git/objects/42/c629e426923b1907e9d200def029462983fc3d","hash":"5cc59d68829055798c0b956a421105a3272eee74","modified":1625411759000},{"_id":"themes/next/.git/objects/39/ccb26ac4efe767bd0150837be14c2849147894","hash":"f386a2063c5dea44de3783ad9c598564b2038812","modified":1625411759000},{"_id":"themes/next/.git/objects/44/109266fbd2d67dfa8b884c9373f4e61b4c5266","hash":"552ac6c43f5fc0ff10b9e256f86fbea5611ccd8c","modified":1625411759000},{"_id":"themes/next/.git/objects/4f/e6d9d129b967296004aeba00e317547c64ef17","hash":"a3d0007ebb539e621911f008bcb611f8c75c8749","modified":1625411759000},{"_id":"themes/next/.git/objects/54/4128d391341431bd438eafba24afeada8594a2","hash":"ab87c0df1eb7a870ab14ecb47b476f268fa2b78b","modified":1625411759000},{"_id":"themes/next/.git/objects/57/89141366367381d15ea759cb0a3a231b05be04","hash":"569f607e5a3bc0f593a640a15a9f0f34a46f1980","modified":1625411759000},{"_id":"themes/next/.git/objects/72/8b3388c3e27619a40d46e83f66351411ffb67d","hash":"34529d876744480f660913c64e943e8482a4fe3d","modified":1625411759000},{"_id":"themes/next/.git/objects/6d/14f248d51bd14f57c1fd7b6cf082bae48f4c57","hash":"dbe39c8dbf71a60cd61fef2438d0ebb568ae5f1f","modified":1625411759000},{"_id":"themes/next/.git/objects/75/c289e469d0cb20a4ef839ca1cfdf30c901808f","hash":"fd825e49f811efe731f3c85a25584b9dd4d72619","modified":1625411759000},{"_id":"themes/next/.git/objects/81/18458e50c967eb6709d146c18d64a81cc37c84","hash":"a465a347148f4af62b6f65080d3729119168662f","modified":1625411759000},{"_id":"themes/next/.git/objects/81/7da0510083c6f3154eafaeaa7a2c87e1778591","hash":"d0ffeb8d4fe17632081a800c2cd1ef6d6fa4954b","modified":1625411759000},{"_id":"themes/next/.git/objects/92/4548a6eecdc658751c44ccc3a7ba2b4f3af8da","hash":"1b8c1c86eb780095fb6056ba4527ebc64ab6e7a9","modified":1625411759000},{"_id":"themes/next/.git/objects/8a/5d1ff53c1f6724bb2d3e0efe5a49aa01cca557","hash":"48fc44452a764b839563c504f9d36e8c6745dce9","modified":1625411759000},{"_id":"themes/next/.git/objects/8a/81ccf5a0c401ab206fdf12f16053a2eaec8a6c","hash":"ad16d94723c8330f60b756b7ce3b38d61a578c03","modified":1625411759000},{"_id":"themes/next/.git/objects/89/f26eb15b045d071a43361f201eea0ea956918e","hash":"0410d5ee64e11605352a708bb8505859a391016d","modified":1625411759000},{"_id":"themes/next/.git/objects/98/ae74237c8909a90c37d704b7e6fa628e3491cb","hash":"f7f82809f3e2cb0485dea52af23cd338eec229bb","modified":1625411759000},{"_id":"themes/next/.git/objects/9c/5eaa6ca71eda7eb8809636bf951d53783fabcb","hash":"5b20f1a55600c4ac949961fbf44d71b1b0b94481","modified":1625411759000},{"_id":"themes/next/.git/objects/88/d992c04a40e3d19ad8ae5ea2166e3404464647","hash":"dbcd58e0b41a2736ecd7e9ae84d80e2ebff3dad3","modified":1625411759000},{"_id":"themes/next/.git/objects/a0/78d2a32d36c8e40797eaa5dc6edcaebd878650","hash":"a5edcdec5c66e397a158d2b86b2a3f3a45f64238","modified":1625411759000},{"_id":"themes/next/.git/objects/b9/9e3d822fd4ee1c5b26a4372f7be935c67482a3","hash":"d228c603df157a3204549604084d97d8431b99df","modified":1625411759000},{"_id":"themes/next/.git/objects/c6/0750431297a47c009e2f76e6686cdb46b81eb0","hash":"b0432686f00a5e4c296cf817f36e3555ac843d3c","modified":1625411759000},{"_id":"themes/next/.git/objects/cf/9e1e61e875611d71fff8664682619cf0299fd3","hash":"1f2a9aee3b05c77991b58a190bbb9ee51dde6494","modified":1625411759000},{"_id":"themes/next/.git/objects/bc/77294cd7c5f8e3a660e22e9aaea651a7a60642","hash":"c8e215615631268f000362b5bfd4cf2ca8ae5877","modified":1625411759000},{"_id":"themes/next/.git/objects/c4/c51dbb2eee3915dc9eae84a9cd193d244e4986","hash":"e870b0b0e93be66a5164bb582e966278714120ec","modified":1625411759000},{"_id":"themes/next/.git/objects/dc/d0cbde488b3eaae8b8abf0b34357c77ed321c4","hash":"ddd0ba0a6780f3a85cbffdcab15295277e511fd7","modified":1625411759000},{"_id":"themes/next/.git/objects/d9/932a7fbb370f2b87d8d62cb0bc6949295913e2","hash":"d88b4802bc02fc0470740e00388661e11bfe8b23","modified":1625411759000},{"_id":"themes/next/.git/objects/a0/80090d4d73cb9d82fe673aaf4f8bf98858c685","hash":"5bc33d5a8bb27cc7a16073ef77515a4002894b91","modified":1625411759000},{"_id":"themes/next/.git/objects/dc/4305a82ebd8cf16d4390313328b55a3ebe98f2","hash":"8e111308273f23ec20bdd04cb7fb8e2ab69dd034","modified":1625411759000},{"_id":"themes/next/.git/objects/e1/b28ecf7a7528fe7029dbfb53e11afbdc6085be","hash":"72dafb88fad8ae11bc2f3633d8dcc2320eec370d","modified":1625411759000},{"_id":"themes/next/.git/objects/ec/d1b87cc0f804772d6585fcbaee9a1836d563f3","hash":"2077b0f57270bc1d71617925f5e098bc82a42800","modified":1625411759000},{"_id":"themes/next/.git/objects/ee/2c53e1d840b7ce5c585111ac350a7e352dc1c6","hash":"2a658ef8ad01e8181d0616669650337a08aae0d2","modified":1625411759000},{"_id":"themes/next/.git/objects/f0/fbe5f79090fe143a73f327b8ab0b65ed683bf1","hash":"9186e57d842e9bd9434edde516d0411d3c118ddf","modified":1625411759000},{"_id":"themes/next/.git/objects/fd/17662c8168d091fd3391bde763cd931ad0d41a","hash":"6f661951d16d5b6b946852d51fb39aa43df885df","modified":1625411759000},{"_id":"themes/next/.git/objects/e3/3be0dec1f8a3207492f913b3b5e1c75341540e","hash":"976c6d886ceb882eed5944b0fdd8f20e2e3bd5ee","modified":1625411759000},{"_id":"themes/next/.git/refs/heads/master","hash":"c0069ac29ec64d5a0d669d22f9b8197310a59fbf","modified":1625411759000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1625411759000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1625411759000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"72d1fe35024ea91ebfd0298d1fbc8df82abd4ce7","modified":1625411759000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1625411759000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1625411759000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1625411759000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1625411759000},{"_id":"themes/next/source/js/src/motion.js","hash":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1625411759000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1625411759000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1625411758000},{"_id":"themes/next/source/js/src/utils.js","hash":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1625411759000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1625411758000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1625411759000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1625411759000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1625411759000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1625411758000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1625411759000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1625411759000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1625411759000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1625411759000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1625411758000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1625411758000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1625411758000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1625411758000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1625411758000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1625411758000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1625411758000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1625411758000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"2b8f8c63abfcc805fad42b1c174cf61b6233d345","modified":1625411758000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1625411758000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/baidushare.swig","hash":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"d79bd946f07b83b47926dd67bb9d40e652b94769","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1625411758000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1625411758000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"54ec3038890a84b1bc2624b3ad71044e57705cce","modified":1625411759000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1625411759000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"c0069ac29ec64d5a0d669d22f9b8197310a59fbf","modified":1625411759000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"6fce199d83342aa9964449b8b8264772558336b9","modified":1625411759000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","hash":"54ef223d6683ad9ed21b24e8091c4dd63001316f","modified":1625411759000},{"_id":"themes/next/source/css/_common/_section/header.styl","hash":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1625411759000},{"_id":"themes/next/.git/objects/pack/pack-400a1168cc31fb7792795669b123efa6bd3b05be.idx","hash":"131585d2404eb22c240e2570e93ad9a8a8e41ca0","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"1631a430655eadb485574d1a9bedd49460988b11","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"b28187c610bf5f05e27732f72c3486494689bbfe","modified":1625411759000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1625411759000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"2432b833add17ddd35aad098bf300d3f951375d2","modified":1625411759000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1625411759000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1625411759000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1625411759000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1625411759000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1625411759000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1625411758000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1625411758000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1625411758000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1625411758000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"10fbbafbd5deccccafd5128bdf387adf55496a4a","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1625411758000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1625411758000},{"_id":"source/images/go-vscode/go-extend.png","hash":"7bd377a86c9777ee4405ddc5cfff56bbc16894e2","modified":1628489705372},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1625411759000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1625411759000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1625411759000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1625411759000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1625411758000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"aaf1d7c5641351494d2d24ccadf64ae0d096be83","modified":1625411759000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5b34698d58b7446959192255cf730171e71c9028","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"5d189b059c0a475917d771b349582dacdd575951","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"719e09bb2e8fb82183381fadb0708aa761f1e0b4","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1625411759000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1625411759000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1625411758000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1625411758000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1625411759000},{"_id":"source/images/go-vscode/start-debug.png","hash":"e1604fd8f69f7ead2026aa7e1b22f0e24dbb27c0","modified":1628489705374},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1625411759000},{"_id":"source/images/avatar.jpeg","hash":"12f4f5fa1d01897089f867cf8bf0dde41be1f578","modified":1610900155000},{"_id":"themes/next/.git/objects/pack/pack-400a1168cc31fb7792795669b123efa6bd3b05be.pack","hash":"65d52e80b30aa37da99fd1585ee322e9edb1e91c","modified":1625411759000},{"_id":"public/atom.xml","hash":"7b6bad9b027ab147ef648ec1512c35fdd76840ea","modified":1649733170498},{"_id":"public/README.html","hash":"3e120a1c81544db89b9e2fb8adc790a15f44b261","modified":1649733171024},{"_id":"public/googleacbe88ecc07eda71.html","hash":"b4f38653fcb90bcbbeaf355e85c3167633a19e89","modified":1649733171028},{"_id":"public/404/index.html","hash":"6e7d8aab0ab06ba8dfc34b500ce661776234c103","modified":1649733171028},{"_id":"public/about/index副本.html","hash":"1e53f011783d78fda1dbd3d2b680f20af99e2777","modified":1649733171037},{"_id":"public/about/index.html","hash":"59e55df6301ff27679c222edbdaadf661d9ea80a","modified":1649733171037},{"_id":"public/tags/index.html","hash":"c43ad20180bc1d6cf93506b3f2bd094da52dc386","modified":1649733171037},{"_id":"public/categories/index.html","hash":"022a7574af681b30c420dd2af21e343e77fb0322","modified":1649733171037},{"_id":"public/archives/index.html","hash":"640fc3355fba5527b9f94d58f6f422ef679c427f","modified":1649733171037},{"_id":"public/archives/page/2/index.html","hash":"fe49d4d2d19a20a69693582e5186f29bea237929","modified":1649733171037},{"_id":"public/archives/page/3/index.html","hash":"a4fa2a70e847fd80e49f5670edee183602e4bf4e","modified":1649733171037},{"_id":"public/archives/page/4/index.html","hash":"e7ef3837818c119d9cf9d1a88a78ac9573647d11","modified":1649733171037},{"_id":"public/archives/page/5/index.html","hash":"65dccb5ac5a6db67459b6d1ea71863d297b7d3a7","modified":1649733171037},{"_id":"public/archives/page/6/index.html","hash":"4092343f1d503c3d8ac48718efcdf01805c539f8","modified":1649733171037},{"_id":"public/archives/page/7/index.html","hash":"6d251943cd108221e2ad3917d49d9ec9d058e90d","modified":1649733171037},{"_id":"public/archives/page/8/index.html","hash":"e461ce8604d9c23323d36ee56a4f9b3603691830","modified":1649733171037},{"_id":"public/archives/page/9/index.html","hash":"a59bf471930b7ac4ad6ea111e57ccde930d530ac","modified":1649733171037},{"_id":"public/archives/page/10/index.html","hash":"6b089d743a01390593c9c8ea156c3f8d94d34524","modified":1649733171037},{"_id":"public/2022/03/13/golang/learn/error/index.html","hash":"3320ba61e11f5860dfd69e8c4d9ee1edb9c97edb","modified":1649733171037},{"_id":"public/2021/11/27/golang/docker/index.html","hash":"805bcdd8e4d8161b490734775f08feba0f67a272","modified":1649733171037},{"_id":"public/2021/10/03/js/hexo/hexo-gitpage-404/index.html","hash":"7ad8816662206afe01b32e7adcf589344d92972f","modified":1649733171037},{"_id":"public/2021/09/11/php/php_mysql_charset/index.html","hash":"85e0650f51a1dcfd8b0a9444418d53254f7db422","modified":1649733171038},{"_id":"public/2021/06/26/git/split-git-repository/index.html","hash":"ff20308ba1cde12669e34bb4977a83487823ed6a","modified":1649733171038},{"_id":"public/2021/06/10/mysql/mysql-abs/index.html","hash":"ed4b694d7b5ce0f7cbd80f627a84d3f0d781ed17","modified":1649733171038},{"_id":"public/2019/04/23/golang/defer/index.html","hash":"367cd3d78f4ea918f5c35ecee7ab13d308d0dec0","modified":1649733171038},{"_id":"public/2018/11/20/IDE/vscode/go-ide-vscode/index.html","hash":"a4fffa36e5f466e6ba2c5a98b763df1f421c7375","modified":1649733171038},{"_id":"public/2018/03/30/java/java-bean/index.html","hash":"254b45e61ea23e21d04453d1639d5974c3569e30","modified":1649733171038},{"_id":"public/2016/10/14/php/php-config/index.html","hash":"4b0aafb1c2306bb83282ae37f2dc411e0e85345a","modified":1649733171038},{"_id":"public/2016/07/04/linux/linux-find/index.html","hash":"eb0266ea9d90ce67586ea0fda37a8eaa86e36fcd","modified":1649733171038},{"_id":"public/2016/07/02/linux/linux-nohup/index.html","hash":"c0bdfc662faebf397ad7030409e4d584e7dbfc0a","modified":1649733171038},{"_id":"public/2016/06/19/linux/linux-lnmp/index.html","hash":"72bcd787d04a2834818b95dbd91fd48c613d88ec","modified":1649733171038},{"_id":"public/2016/06/10/mysql/mysql-on-duplice-key-update/index.html","hash":"57156ae841a80877c570eb6cdc19b4d612930a72","modified":1649733171038},{"_id":"public/2016/05/22/mysql/mysql-strimg/index.html","hash":"92ab7b473153b2a41404f79007816f9439220855","modified":1649733171038},{"_id":"public/2016/04/10/linux/linux-curl/index.html","hash":"72f76def78c02302b068f38cfe97e48ce9117ee0","modified":1649733171038},{"_id":"public/2016/04/04/patterns/pattern-pub-sub/index.html","hash":"7ce8a10769eb53c07f0496bbc653fa7dc6541897","modified":1649733171038},{"_id":"public/2016/02/29/php/php-stream/index.html","hash":"5f45d9006ba551b7bcf7dc565f7dbebcdd4bf45c","modified":1649733171038},{"_id":"public/2016/02/16/php/php-bccomp/index.html","hash":"f90703761a69bde8b31b4ee429c7eb1871798470","modified":1649733171038},{"_id":"public/2016/02/13/linux/linux-man/index.html","hash":"b7346e97766332f7c394877f55f7f8cac5105ae0","modified":1649733171038},{"_id":"public/2016/02/12/php/php-trait/index.html","hash":"c02873f52545697a55c19b0a4c9c4ffbd35fc2ca","modified":1649733171038},{"_id":"public/2016/02/06/linux/linux-ps/index.html","hash":"934c377c9c1240345dc89224501c634fd2b33ec6","modified":1649733171038},{"_id":"public/2016/02/04/linux/linux-lsof/index.html","hash":"60c7f0fc9813a5cd9d089819f5b21907381cd26c","modified":1649733171038},{"_id":"public/2016/01/27/mongo/brew-mongodb/index.html","hash":"8833723bd142af79ddc40e801a565ed84fff21c3","modified":1649733171038},{"_id":"public/2016/01/26/php/php-webserver/index.html","hash":"838973d235108a05a5ac200cdc94d900fe30a492","modified":1649733171038},{"_id":"public/2016/01/25/js/hexo/hexo-baido-analytics/index.html","hash":"9d1eb1c2288ecf08a34ec49e1b2077099f069481","modified":1649733171038},{"_id":"public/2016/01/20/HTTP/http-redirect/index.html","hash":"6f5ba6b055b81a0093079890b57b333061583c8b","modified":1649733171038},{"_id":"public/2016/01/18/redis/redis-sortedSet/index.html","hash":"339dd04c2cbe9db6d40a5701e7c5e90200df6484","modified":1649733171038},{"_id":"public/2016/01/14/mysql/mysql-case/index.html","hash":"db27127bb4130383f89f366e09601dbdd296ff7f","modified":1649733171038},{"_id":"public/2015/10/18/mysql/brew-mysql/index.html","hash":"a1b2e45aaaba6f838f882600a57f7b859d5d906c","modified":1649733171038},{"_id":"public/2015/10/14/IDE/sublime/sublime-Encode/index.html","hash":"fbc7444c9c526425926d08628d7c8d5958dc83e6","modified":1649733171038},{"_id":"public/2015/10/11/js/hexo/hexo-2-theme/index.html","hash":"1c012e794cf483c254b2c19a8e5befd4f1ee929a","modified":1649733171038},{"_id":"public/2015/10/01/macos/brew-token/index.html","hash":"6916f0278524cc629056692e061b0dcc3e6746ed","modified":1649733171038},{"_id":"public/2015/09/24/mysql/mysql-modifySql/index.html","hash":"fc94318f4b9603c248f1d680df65866720afc37c","modified":1649733171038},{"_id":"public/2015/09/18/js/hexo/hexo-1-install/index.html","hash":"3760970c5afe2182626aaf9d3532d4f6d83b0ade","modified":1649733171038},{"_id":"public/2015/08/14/js/js-ajaxJsonToString/index.html","hash":"004725375172feebc0f4bc12914a8a026c9eae07","modified":1649733171038},{"_id":"public/2015/07/29/php/php-HTTP-RAW-POST-DATA/index.html","hash":"84506d296063ebb656a1a1e2675b37594c4ad0a9","modified":1649733171038},{"_id":"public/2015/07/05/mysql/mysql-timeMethod/index.html","hash":"641b798502b7a1521fe35073f1b19dea26b8cbe0","modified":1649733171038},{"_id":"public/2015/04/11/php/php-call/index.html","hash":"b110a5d534a2421af094810539ad7465d1922939","modified":1649733171038},{"_id":"public/2015/01/11/mysql/mysql-distinct/index.html","hash":"38a38f5ac5766555df78c9956fe05d9be579412c","modified":1649733171038},{"_id":"public/2015/01/09/php/php-sortArrByfield/index.html","hash":"7185ef99959dcb22a56f5ec0ba1dc4761f8d8db2","modified":1649733171038},{"_id":"public/2014/12/28/php/php-authoload/index.html","hash":"98de4911fa8c6907c17e37e0e0b7b7b3ec613eaa","modified":1649733171038},{"_id":"public/2014/12/28/js/js-ajax/index.html","hash":"4d900a0b9f77c0fbc767d629a0f9cae7fb319e13","modified":1649733171038},{"_id":"public/2014/11/29/php/php-intMaxVal/index.html","hash":"f0afba3f98a80bb65040b2af2ac556ae076af708","modified":1649733171038},{"_id":"public/2014/11/09/regEx/regex/index.html","hash":"cd51397b6968f2e843f8560484a82c6c8eea73aa","modified":1649733171038},{"_id":"public/2014/09/25/php/php-filePath/index.html","hash":"93afc701643bab6cccffb90844325ee547c60171","modified":1649733171038},{"_id":"public/2014/09/14/mysql/mysql-insertMoreThanOne/index.html","hash":"2002c84a673c627895a2beaea4ff592fc34bcf07","modified":1649733171038},{"_id":"public/2014/09/06/js/js-qrcode/index.html","hash":"07f8f5470b1640ee3ce4dec816f3b496292f7740","modified":1649733171038},{"_id":"public/2014/03/15/js/js-createElement/index.html","hash":"e6c5f50d56e58a06b4ce8503f7c8225ab6e6919b","modified":1649733171038},{"_id":"public/archives/2014/index.html","hash":"bad3f04816af16bf40e4b48e23e966428f350ebc","modified":1649733171055},{"_id":"public/archives/2014/page/2/index.html","hash":"5a0c7735c5351edde499f4861f0f8bd6d909f97a","modified":1649733171055},{"_id":"public/archives/2014/03/index.html","hash":"ab5de6a1e8b94d2022116e3e5a2b5e71538b72af","modified":1649733171055},{"_id":"public/archives/2014/09/index.html","hash":"b477ebdeeda5615d8e61cac0efe0a96f5710d88d","modified":1649733171055},{"_id":"public/archives/2014/11/index.html","hash":"33c9b08944afae61dea67501d904cc9b720d2d8f","modified":1649733171055},{"_id":"public/archives/2014/12/index.html","hash":"54e92b2611c34fc3c6bff668a76c851feb624dd3","modified":1649733171055},{"_id":"public/archives/2015/index.html","hash":"f458fc1cd863fbb863fee9ef472007be0c806060","modified":1649733171055},{"_id":"public/archives/2015/page/2/index.html","hash":"1270c6c8a6c8573aa81ca10610d1fe6f45ba2463","modified":1649733171055},{"_id":"public/archives/2015/page/3/index.html","hash":"828f25f302766d691a05832d6b5de0a7d0c97c5b","modified":1649733171055},{"_id":"public/archives/2015/01/index.html","hash":"7e304e450a37077b332347f5237973c6c652746d","modified":1649733171055},{"_id":"public/archives/2015/04/index.html","hash":"0f157f2bb532cdd101d6cfa049a8ce00ab8c7536","modified":1649733171055},{"_id":"public/archives/2015/07/index.html","hash":"e4b4aca28b78e5ab23314b06d39227b7fa3fee54","modified":1649733171055},{"_id":"public/archives/2015/08/index.html","hash":"e65007bca58534854b6868c5b57b61e8c8f97484","modified":1649733171055},{"_id":"public/archives/2015/09/index.html","hash":"b6730b839967297c07122ac86a05357f3c9c821b","modified":1649733171055},{"_id":"public/archives/2015/10/index.html","hash":"2ac7a93485596702c8300f4b7158e383bce831e6","modified":1649733171055},{"_id":"public/archives/2016/index.html","hash":"62346685c623c5903d471e57941f06a8d1e3142d","modified":1649733171055},{"_id":"public/archives/2016/page/2/index.html","hash":"65f20da77920f9cb4278bd464219430ffa39a2fa","modified":1649733171055},{"_id":"public/archives/2016/page/3/index.html","hash":"74b46d3665d5cfb75c522bd41d61ce2d716ab5a3","modified":1649733171055},{"_id":"public/archives/2016/page/4/index.html","hash":"82e2b7bef2932cf763559658c3a3fc242eaf19da","modified":1649733171055},{"_id":"public/archives/2016/01/index.html","hash":"7f5462682723d0015ca304dbdcb34abcff243e04","modified":1649733171055},{"_id":"public/archives/2016/01/page/2/index.html","hash":"65ae8e6853b8f6a341039838d88d98221c12c66a","modified":1649733171055},{"_id":"public/archives/2016/02/index.html","hash":"dc4569c7b1766bf6a2dc7d77f5b605ecf528c27b","modified":1649733171055},{"_id":"public/archives/2016/02/page/2/index.html","hash":"508e35c63ee976a851e3c4dc3930ca08a5a31e16","modified":1649733171055},{"_id":"public/archives/2016/04/index.html","hash":"e2db540eacf206a57d3f3a3ee9ddee7bdd02fa2e","modified":1649733171055},{"_id":"public/archives/2016/05/index.html","hash":"1fc6bad294964596be665ed9d57a04d98192a29a","modified":1649733171055},{"_id":"public/archives/2016/06/index.html","hash":"340f525317da425a2e3d1951dc950195a107275d","modified":1649733171055},{"_id":"public/archives/2016/07/index.html","hash":"3b2f8857532a4d41275afe5677292258bff542de","modified":1649733171055},{"_id":"public/archives/2016/10/index.html","hash":"ba3fe81eb1d3ab1835967602095378c77623c78c","modified":1649733171055},{"_id":"public/archives/2018/index.html","hash":"6c42cc209b63255ee90f3d3059b3d0a3d7574bf5","modified":1649733171055},{"_id":"public/archives/2018/03/index.html","hash":"e844ff5183e00377137b2c6d997ffbeb914b6a2a","modified":1649733171055},{"_id":"public/archives/2018/11/index.html","hash":"2fb17ca9e4b31571ed23b0d13b6975f36d9d9eaf","modified":1649733171056},{"_id":"public/archives/2019/index.html","hash":"d38c60dae4f6c1db99fd4005b4ce5ead1119be04","modified":1649733171056},{"_id":"public/archives/2019/04/index.html","hash":"92eeb6aa3c9296ae964b0298f0a1ea2cee4c43fe","modified":1649733171056},{"_id":"public/archives/2021/index.html","hash":"f63a3d1f8699a1bc10cea60bd0f772fb537d0ebb","modified":1649733171056},{"_id":"public/archives/2021/page/2/index.html","hash":"1c75176a7302e9a93729436997f4db09914b84fe","modified":1649733171056},{"_id":"public/archives/2021/06/index.html","hash":"769dcebc224cfbdab3b9623ee1624c39e875f916","modified":1649733171056},{"_id":"public/archives/2021/09/index.html","hash":"eeef9fe3e27f0b5b138d6d4b2e3150e396e758c3","modified":1649733171056},{"_id":"public/archives/2021/10/index.html","hash":"203bc5d56279b6a43a7844290115c7da29e3dcdb","modified":1649733171056},{"_id":"public/archives/2021/11/index.html","hash":"6af9a7c3a1e8a5ff2bef3651f0aeaad1a4e4af9b","modified":1649733171056},{"_id":"public/archives/2021/12/index.html","hash":"0e9836406f4bcc31eb0a174fd293790628acbb0f","modified":1649733171056},{"_id":"public/archives/page/11/index.html","hash":"a385d03573a1022d6623105cdfc3889d91401d4c","modified":1649733171056},{"_id":"public/archives/2022/04/index.html","hash":"542abc1bce956bb4eef573a18d9133665904acba","modified":1649733171056},{"_id":"public/categories/http/index.html","hash":"aa4ac8f7ea162396a68b8238d4341f0c7b13978b","modified":1649733171056},{"_id":"public/categories/git/index.html","hash":"1b393b901706ecbc02c3241bcf6d007e57fe47a1","modified":1649733171056},{"_id":"public/categories/golang/index.html","hash":"9a4264616e5b857f97448c71b151bfc7f40c0458","modified":1649733171056},{"_id":"public/categories/java/index.html","hash":"b3ebcbe9daf0280e06bb8477257767d37b473c03","modified":1649733171056},{"_id":"public/categories/javascript/index.html","hash":"1163bc212ed701f2484b202514b9f49fa73d945a","modified":1649733171056},{"_id":"public/categories/linux/index.html","hash":"54c861ceb6996314109d35947768976f3a77f74c","modified":1649733171056},{"_id":"public/categories/linux/page/2/index.html","hash":"ac059906798205ba27d57c0981ac72c59c6c92ee","modified":1649733171056},{"_id":"public/categories/php/index.html","hash":"7cdbd5971786576dd1c8a0512acf76400417fc2c","modified":1649733171056},{"_id":"public/categories/php/page/2/index.html","hash":"db5d6686ce80a33e61b71d0d733ecd107c96e747","modified":1649733171056},{"_id":"public/categories/php/page/3/index.html","hash":"24ef621bfa929a1065c5c1fce09b6acc18910032","modified":1649733171056},{"_id":"public/categories/code/index.html","hash":"d503f04418671c23286294d8b0d604e07d99540f","modified":1649733171056},{"_id":"public/categories/mongodb/index.html","hash":"14ee01394f91584c6fbfded35c2224a5214a1b3b","modified":1649733171056},{"_id":"public/categories/mysql/index.html","hash":"e3d23e4eb8e46a697e5c408b8ac9678bf7c6ec00","modified":1649733171056},{"_id":"public/categories/mysql/page/2/index.html","hash":"bc84df681e2b10701a90b55db9e9dc3b6a2eb118","modified":1649733171056},{"_id":"public/categories/mysql/page/3/index.html","hash":"74ba13d00e23688e0283c3b5ff936df9fce9aa74","modified":1649733171056},{"_id":"public/categories/pattern/index.html","hash":"bdf27648fdbf426cb3e031f25a1499a7010aa1e5","modified":1649733171056},{"_id":"public/categories/regEx/index.html","hash":"a4d88d5c9d10d7f9b31c7308a36a933ec2c3d92b","modified":1649733171056},{"_id":"public/categories/redis/index.html","hash":"c88e9ce97ec1f0575f6bef3df5b41298ac67a12c","modified":1649733171056},{"_id":"public/categories/Mac/index.html","hash":"c514ca6ac03430dc7072c62043fa8b7a87b2a472","modified":1649733171056},{"_id":"public/categories/工作记录/index.html","hash":"d80fcdad3bdf4269f3b7d4dc5401e9b408e38624","modified":1649733171056},{"_id":"public/categories/node/index.html","hash":"266824e1a38c1d6a13306f6ef0c0843b06c7f217","modified":1649733171056},{"_id":"public/page/7/index.html","hash":"bb00938addc2133467e84284cd0b5e949a3fa546","modified":1649733171056},{"_id":"public/tags/http/index.html","hash":"ca04e29ddc1963dc1077212d6961de70df194c78","modified":1649733171056},{"_id":"public/tags/git/index.html","hash":"3d9132c5bd535491ab048244ce069de466264f74","modified":1649733171056},{"_id":"public/tags/golang/index.html","hash":"0c603b15408c9142a7c338ab0fe5a3d95a803195","modified":1649733171056},{"_id":"public/tags/defer/index.html","hash":"f6e15dcfced99e47bdeb296b1aa923a07dc685a5","modified":1649733171056},{"_id":"public/tags/java/index.html","hash":"cb3ff8ccb5640c504acf3094e0a0be1497408ee4","modified":1649733171056},{"_id":"public/tags/javascript/index.html","hash":"5aabdb6c30aab9507291f3d689a50b3ad4faa6c7","modified":1649733171056},{"_id":"public/tags/docker/index.html","hash":"b6a68aec92842e705e2c9be415b7937ea2333f59","modified":1649733171056},{"_id":"public/tags/linux/index.html","hash":"b24cbd65c6806d07922e1ffd075fbcc2d617f1fc","modified":1649733171056},{"_id":"public/tags/linux/page/2/index.html","hash":"a14f1136588afe8f11be73afd703fb1cc1c7e481","modified":1649733171056},{"_id":"public/tags/php/index.html","hash":"96baecf06bf5fbe6dae1b016a895ca32b090abdd","modified":1649733171056},{"_id":"public/tags/php/page/2/index.html","hash":"10251414902482ecda43161098fdd14f4510fa5a","modified":1649733171056},{"_id":"public/tags/php/page/3/index.html","hash":"30d6deff787d8b8ea08cc88a4e5d83560bc0183a","modified":1649733171056},{"_id":"public/tags/intval/index.html","hash":"f9da73674bb80ea623e1c746a1284475be867f38","modified":1649733171056},{"_id":"public/tags/mysql/index.html","hash":"e52593e1615c8e0d2ea3b433fd8dbab5cb08b105","modified":1649733171056},{"_id":"public/tags/mysql/page/2/index.html","hash":"a792ce278da6ef927999362ac081f6d0d5c7a1fd","modified":1649733171056},{"_id":"public/tags/mysql/page/3/index.html","hash":"f3cc3bd6afbd80327691d1aeb893371c8deb2acb","modified":1649733171056},{"_id":"public/tags/brew/index.html","hash":"9231f174c0c37dcc7b5c844757de6a3431e2afb6","modified":1649733171056},{"_id":"public/tags/mongodb/index.html","hash":"e8d3f95c0f00b73b5f2c75a63d7564219a7f3694","modified":1649733171056},{"_id":"public/tags/distinct/index.html","hash":"39fa3b7d81991ea69e8cc9a94ee29020d30df9c8","modified":1649733171056},{"_id":"public/tags/pattern/index.html","hash":"1237e9376eec094f01dbba856f254255d38ba0eb","modified":1649733171056},{"_id":"public/tags/regEx/index.html","hash":"b1605083f837c8839cea9f16110ed610978a6ca3","modified":1649733171056},{"_id":"public/tags/redis/index.html","hash":"060192eaa786cf10e407a28367d8bb0c900b2a82","modified":1649733171056},{"_id":"public/tags/homebrew/index.html","hash":"be836c46b6c1f2021419e136b54e8867aeac97f7","modified":1649733171056},{"_id":"public/tags/sublime/index.html","hash":"df87f48caa87b491f5f55dcd908b6db0a7dd9b7e","modified":1649733171056},{"_id":"public/tags/ide/index.html","hash":"88db671ee47ea9b9c003fb821a99aa1458c62d2d","modified":1649733171056},{"_id":"public/tags/hexo/index.html","hash":"f8d028b8db1aa821a742cf8caa4f751f8e1d8550","modified":1649733171056},{"_id":"public/archives/2022/index.html","hash":"2f16e04596908f0f94201f071670dfba00985d64","modified":1649733171056},{"_id":"public/archives/2022/03/index.html","hash":"da5decb7c09bb21a90e0c93d553875325e0fb04b","modified":1649733171056},{"_id":"public/tags/errors/index.html","hash":"017c3b064ce2ea3f1575a5a9b3982163587429e0","modified":1649733171056},{"_id":"public/2020/02/11/php/php_thinkphp3.1_db_bug/index.html","hash":"078e3af4cf10ab0cdd93020f52dce4b3d0428872","modified":1649733171056},{"_id":"public/2022/04/09/mysql/mysqlslap/index.html","hash":"62127389bc1f63ac7da95e7dfd573f3a390f6d3b","modified":1649733171056},{"_id":"public/2022/03/16/php/php-fpm-signal-exited/index.html","hash":"6ea7a0585a54e51ff63ac46807db5ba5711726de","modified":1649733171056},{"_id":"public/index.html","hash":"fdbc82ffb03232a9c735848328d3d1e6bfaa81be","modified":1649733171056},{"_id":"public/page/2/index.html","hash":"1f0748f282d8db684070acf4cce04d111831a434","modified":1649733171056},{"_id":"public/page/3/index.html","hash":"e0d891d62c16e16929687cdb6dcc6b1ce24a5a93","modified":1649733171056},{"_id":"public/page/4/index.html","hash":"cd87c71008782d9ddda0bc56f58e8b713b29c61e","modified":1649733171056},{"_id":"public/page/5/index.html","hash":"6ff1eea023f9940515814fc6f2af20179d608787","modified":1649733171056},{"_id":"public/page/6/index.html","hash":"fd3eadbadce9d4ba6a893ac767258edc08a67ecb","modified":1649733171056},{"_id":"public/page/8/index.html","hash":"125d2826be7944fc67e4b516d5737f03b056cf77","modified":1649733171056},{"_id":"public/page/9/index.html","hash":"894bab3eb7c9dd49b5783ee62a81f94e1d90b97c","modified":1649733171056},{"_id":"public/page/10/index.html","hash":"b1d47e6d7b0e0106a47cacbc316a56408fac6b7c","modified":1649733171057},{"_id":"public/page/11/index.html","hash":"4a825069f18cd1504cd41cf0af538c7c2894195a","modified":1649733171057},{"_id":"public/2021/12/20/mysql/mysql-proxy/index.html","hash":"b3018d2e57f40564f4d9e645d2222746f09f6b80","modified":1649733171057},{"_id":"public/archives/2020/index.html","hash":"d1f4e735100afac076a4b1b9b77e840fdcc51edd","modified":1649733171058},{"_id":"public/archives/2020/02/index.html","hash":"131d327cca5f334f62d9a6170e8f3b0bdaab8b6a","modified":1649733171058},{"_id":"public/favicon.ico","hash":"e145393bba620d545bf0bc718d8afde70d5244ed","modified":1649733171058},{"_id":"public/CNAME","hash":"d7c5400fce94deb5eb92bd0e45a7b1d28b824c4c","modified":1649733171058},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1649733171058},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1649733171058},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1649733171058},{"_id":"public/images/default_avatar1.jpg","hash":"0487f298a5757494b578cb0c0d1775ade3b5bc4c","modified":1649733171058},{"_id":"public/images/avata2r.jpeg","hash":"9660b0f2f5698f2593ca4adf3a1e9651a5c31343","modified":1649733171058},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1649733171058},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1649733171058},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1649733171058},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1649733171058},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1649733171058},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1649733171058},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1649733171058},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1649733171058},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1649733171058},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1649733171058},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1649733171058},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1649733171058},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1649733171058},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1649733171058},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1649733171058},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1649733171058},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1649733171058},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1649733171058},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1649733171058},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1649733171058},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1649733171242},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1649733171245},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1649733171246},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1649733171249},{"_id":"public/js/src/bootstrap.js","hash":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1649733171250},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1649733171250},{"_id":"public/js/src/motion.js","hash":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1649733171250},{"_id":"public/js/src/utils.js","hash":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1649733171250},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1649733171250},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1649733171250},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1649733171250},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1649733171250},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1649733171250},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1649733171250},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1649733171250},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1649733171250},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1649733171250},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1649733171250},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1649733171250},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1649733171250},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1649733171250},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1649733171250},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1649733171250},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1649733171250},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1649733171250},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1649733171250},{"_id":"public/vendors/fastclick/README.html","hash":"651904c148c26ed64f75aba0eb0a42960ca3ea0f","modified":1649733171250},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"c022bc749fedf8d6ac192b50c80430fa9087a7d0","modified":1649733171250},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"bf8e477ee2d81833cff12572a8a5f61abffc187c","modified":1649733171250},{"_id":"public/css/main.css","hash":"f6bb2f7deff5ab3acc9865cbf9ad67bf23999105","modified":1649733171250},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1649733171250},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1649733171250},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1649733171250},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1649733171250},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1649733171250},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1649733171250},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1649733171250},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1649733171250},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1649733171250},{"_id":"public/images/go-vscode/debug.png","hash":"270ae395d68343f35784e922f96266f35d1c1835","modified":1649733171250},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1649733171255},{"_id":"public/images/go-vscode/go-extend.png","hash":"7bd377a86c9777ee4405ddc5cfff56bbc16894e2","modified":1649733171261},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1649733171261},{"_id":"public/images/go-vscode/start-debug.png","hash":"e1604fd8f69f7ead2026aa7e1b22f0e24dbb27c0","modified":1649733171263},{"_id":"public/images/avatar.jpeg","hash":"12f4f5fa1d01897089f867cf8bf0dde41be1f578","modified":1649733171265}],"Category":[{"name":"http","_id":"cl1vkj7ow0009i9sk7lmggmc0"},{"name":"git","_id":"cl1vkj7oy000ei9skk3vnh0dm"},{"name":"golang","_id":"cl1vkj7oz000ki9skprn6tjzn"},{"name":"java","_id":"cl1vkj7p0000qi9skzvt1mz8m"},{"name":"javascript","_id":"cl1vkj7p1000vi9skz79hk1du"},{"name":"linux","_id":"cl1vkj7p6001li9skjs4v72f0"},{"name":"php","_id":"cl1vkj7pc002mi9sk3z879yqq"},{"name":"code","_id":"cl1vkj7pl0044i9skd62e8biy"},{"name":"mongodb","_id":"cl1vkj7pm004fi9skelavjzuy"},{"name":"mysql","_id":"cl1vkj7pm004li9sknhkbg9ce"},{"name":"pattern","_id":"cl1vkj7po0058i9skbkgzlyh0"},{"name":"regEx","_id":"cl1vkj7pq005ri9skgr525st2"},{"name":"redis","_id":"cl1vkj7pq005wi9sk3eaea7vl"},{"name":"Mac","_id":"cl1vkj7pr0063i9skzkzaeoy7"},{"name":"工作记录","_id":"cl1vkj7qe006zi9sk8a83u84t"},{"name":"node","_id":"cl1vkj7qf0074i9skdrswoqx4"}],"Data":[],"Page":[{"_content":"##  jceee blog\n","source":"README.md","raw":"##  jceee blog\n","date":"2021-08-09T06:15:05.367Z","updated":"2021-08-09T06:15:05.367Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cl1vkj7mp0000i9skzz018ip8","content":"<h2 id=\"jceee_blog\"><a href=\"#jceee_blog\" class=\"headerlink\" title=\"jceee blog\"></a>jceee blog</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"jceee_blog\"><a href=\"#jceee_blog\" class=\"headerlink\" title=\"jceee blog\"></a>jceee blog</h2>"},{"_content":"google-site-verification: googleacbe88ecc07eda71.html","source":"googleacbe88ecc07eda71.html","raw":"google-site-verification: googleacbe88ecc07eda71.html","date":"2021-08-09T06:15:05.370Z","updated":"2021-08-09T06:15:05.370Z","path":"googleacbe88ecc07eda71.html","title":"","comments":1,"layout":"page","_id":"cl1vkj7mv0001i9sku9r0pybj","content":"google-site-verification: googleacbe88ecc07eda71.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googleacbe88ecc07eda71.html"},{"title":"404","date":"2015-12-18T02:04:17.000Z","_content":"\n```\n      this is 404 page\n```","source":"404/index.md","raw":"title: 404\ndate: 2015-12-18 10:04:17\n---\n\n```\n      this is 404 page\n```","updated":"2021-08-09T06:15:05.366Z","path":"404/index.html","comments":1,"layout":"page","_id":"cl1vkj7nb0002i9sk5rww3jvh","content":"<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> <span class=\"keyword\">is</span> <span class=\"number\">404</span> page</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> <span class=\"keyword\">is</span> <span class=\"number\">404</span> page</span><br></pre></td></tr></table></figure>"},{"title":"about","date":"2015-12-17T03:04:18.000Z","comments":0,"_content":"\n* Jceee Chan\n* 喜欢养生的爆肝程序猿\n* 天蝎座\n* 肥宅\n","source":"about/index.md","raw":"title: about\ndate: 2015-12-17 11:04:18\ncomments: false\n\n---\n\n* Jceee Chan\n* 喜欢养生的爆肝程序猿\n* 天蝎座\n* 肥宅\n","updated":"2021-08-09T06:15:05.370Z","path":"about/index.html","layout":"page","_id":"cl1vkj7nc0003i9skxs6gf3ii","content":"<ul>\n<li>Jceee Chan</li>\n<li>喜欢养生的爆肝程序猿</li>\n<li>天蝎座</li>\n<li>肥宅</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Jceee Chan</li>\n<li>喜欢养生的爆肝程序猿</li>\n<li>天蝎座</li>\n<li>肥宅</li>\n</ul>\n"},{"title":"about","date":"2015-12-17T03:04:18.000Z","comments":0,"_content":"\n![jcsama](/images/jcsama1.jpg)\n\n* Name: Jceee Chan\n* php coder,Mac developer\n* E-mail:jceee@foxmail.com\n* nginx,mysql,php,memcache,redis,composer,mongo\n* git,svn\n* sublime,sequelPro,SourceTree,Iterm\n","source":"about/index副本.md","raw":"title: about\ndate: 2015-12-17 11:04:18\ncomments: false\n\n---\n\n![jcsama](/images/jcsama1.jpg)\n\n* Name: Jceee Chan\n* php coder,Mac developer\n* E-mail:jceee@foxmail.com\n* nginx,mysql,php,memcache,redis,composer,mongo\n* git,svn\n* sublime,sequelPro,SourceTree,Iterm\n","updated":"2021-08-09T06:15:05.370Z","path":"about/index副本.html","layout":"page","_id":"cl1vkj7nc0004i9skhzoma1ar","content":"<p><img src=\"/images/jcsama1.jpg\" alt=\"jcsama\"></p>\n<ul>\n<li>Name: Jceee Chan</li>\n<li>php coder,Mac developer</li>\n<li>E-mail:<a href=\"mailto:jceee@foxmail.com\" target=\"_blank\" rel=\"noopener\">jceee@foxmail.com</a></li>\n<li>nginx,mysql,php,memcache,redis,composer,mongo</li>\n<li>git,svn</li>\n<li>sublime,sequelPro,SourceTree,Iterm</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/jcsama1.jpg\" alt=\"jcsama\"></p>\n<ul>\n<li>Name: Jceee Chan</li>\n<li>php coder,Mac developer</li>\n<li>E-mail:<a href=\"mailto:jceee@foxmail.com\" target=\"_blank\" rel=\"noopener\">jceee@foxmail.com</a></li>\n<li>nginx,mysql,php,memcache,redis,composer,mongo</li>\n<li>git,svn</li>\n<li>sublime,sequelPro,SourceTree,Iterm</li>\n</ul>\n"},{"title":"categories","date":"2015-12-17T03:05:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-17 11:05:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-08-09T06:15:05.370Z","path":"categories/index.html","layout":"page","_id":"cl1vkj7nd0005i9skrpqcoi68","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2015-12-17T03:05:18.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-17 11:05:18\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-08-09T06:15:05.374Z","path":"tags/index.html","layout":"page","_id":"cl1vkj7nk0006i9sk5xs2bko8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"http重定向状态码","date":"2016-01-20T14:48:38.000Z","_content":"\n>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx\n\n* 301 已移动 -- 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址\n* 302 临时移动 -- 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置\n* 303 请参阅其他 -- 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应\n* 304 目标未修改 -- 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据\n* 305 使用代理 -- 请求者只能使用代码访问请求的网页\n* 306 不再使用 -- 新版规范中，306已经不再被使用\n* 307 临时重定向 -- 请求的资源临时从不同的URL响应请求\n","source":"_posts/HTTP/http-redirect.md","raw":"title: http重定向状态码  \ndate: 2016-01-20 22:48:38  \ntags: http  \ncategories: http  \n\n---\n\n>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx\n\n* 301 已移动 -- 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址\n* 302 临时移动 -- 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置\n* 303 请参阅其他 -- 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应\n* 304 目标未修改 -- 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据\n* 305 使用代理 -- 请求者只能使用代码访问请求的网页\n* 306 不再使用 -- 新版规范中，306已经不再被使用\n* 307 临时重定向 -- 请求的资源临时从不同的URL响应请求\n","slug":"HTTP/http-redirect","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7ot0007i9sk81f7m2mm","content":"<blockquote>\n<p>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx</p>\n</blockquote>\n<ul>\n<li>301 已移动 – 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址</li>\n<li>302 临时移动 – 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置</li>\n<li>303 请参阅其他 – 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应</li>\n<li>304 目标未修改 – 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据</li>\n<li>305 使用代理 – 请求者只能使用代码访问请求的网页</li>\n<li>306 不再使用 – 新版规范中，306已经不再被使用</li>\n<li>307 临时重定向 – 请求的资源临时从不同的URL响应请求</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每个http请求都会返回状态码，如果这个请求被重定向到别的地址，那返回的状态码是3xx</p>\n</blockquote>\n<ul>\n<li>301 已移动 – 永久性地重定向到这地址，搜索引擎蜘蛛会将旧的地址替换成新的地址</li>\n<li>302 临时移动 – 服务器临时从别的地址响应请求，当请求者请求旧地址时，会自动将请求转到不同的位置</li>\n<li>303 请参阅其他 – 可以另一地址找到对应请求的响应，并应使用Get方法检索此响应</li>\n<li>304 目标未修改 – 请求目标未发生改变，用于通知浏览器直接用本地数据而不用请求新数据</li>\n<li>305 使用代理 – 请求者只能使用代码访问请求的网页</li>\n<li>306 不再使用 – 新版规范中，306已经不再被使用</li>\n<li>307 临时重定向 – 请求的资源临时从不同的URL响应请求</li>\n</ul>\n","sticky":0},{"title":"拆分Git仓库并保存提交记录","date":"2021-06-26T14:48:38.000Z","_content":"\n>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作\n\n## 基本设定\n\n父项目为 `https://github.com/xxx/demo.git`\n\n父仓库目录：/demo\n\n当前子仓库目录：/demo/target_child\n\n目标是把target_child拆到新项目：`https://github.com/xxx/target_child.git`\n\n\n\n##  step1 clone 一份原仓库文件到本地，目录为目标文件夹\n\n\n\n\n\n```\n\n​cd ~/git/code/\n​\n​git clone https://github.com/xxx/demo.git target_child\n​\n\n```\n\n\n\n## step2 删掉原仓库的remote\n\n\n```\n\ncd target_child\n\ngit remote rm origin\n\n\n```\n\n\n\n## step3 过滤无用的历史记录\n\n过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。\n\n```\n\n\ngit filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all\n\n\n```\n\n\n\n| 参数|作用 |\n|---|---|\n|--tag-name-filter |该参数控制我们要如何处理旧的 tag，cat 即表示原样输出|\n|--prune-empty |删除空的（对子目录没有影响的）提交|\n|--subdirectory-filter |指定子目录路径, 如`./target_child`|\n|-- --all |该参数必须跟在`--`后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。|\n\n\n\n## step 4 清理.git的object\n\n`.git` 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.\n\nPS: `git gc`操作耗时比较久,请耐心等待.\n\n\n\n```\n\n\ngit reset --hard\n\ngit for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d\n\ngit reflog expire --expire=now --all\n\ngit gc --aggressive --prune=now\n\n\n```\n\n## step 5 将新的本地仓库推送到远端\n\n先创建新的仓库：`https://github.com/xxx/target_child.git`\n\n```\n\n\n//添加远端分支\n\ngit remote add origin https://github.com/xxx/target_child.git\n\n//强制推送到远端\n\ngit push --fore origin master\n\n\n```\n\nPS:\n\n若master分支为保护状态，强制推送时会遇到如下错误：\n\n```\n\nremote: GitLab: You are not allowed to force push code to a protected branch on this project.\n\n```\n\n须解除master分支的保护状态，推完之后再改回来","source":"_posts/git/split-git-repository.md","raw":"title: 拆分Git仓库并保存提交记录  \ndate: 2021-06-26 22:48:38  \ntags: git   \ncategories: git\n\n---\n\n>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作\n\n## 基本设定\n\n父项目为 `https://github.com/xxx/demo.git`\n\n父仓库目录：/demo\n\n当前子仓库目录：/demo/target_child\n\n目标是把target_child拆到新项目：`https://github.com/xxx/target_child.git`\n\n\n\n##  step1 clone 一份原仓库文件到本地，目录为目标文件夹\n\n\n\n\n\n```\n\n​cd ~/git/code/\n​\n​git clone https://github.com/xxx/demo.git target_child\n​\n\n```\n\n\n\n## step2 删掉原仓库的remote\n\n\n```\n\ncd target_child\n\ngit remote rm origin\n\n\n```\n\n\n\n## step3 过滤无用的历史记录\n\n过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。\n\n```\n\n\ngit filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all\n\n\n```\n\n\n\n| 参数|作用 |\n|---|---|\n|--tag-name-filter |该参数控制我们要如何处理旧的 tag，cat 即表示原样输出|\n|--prune-empty |删除空的（对子目录没有影响的）提交|\n|--subdirectory-filter |指定子目录路径, 如`./target_child`|\n|-- --all |该参数必须跟在`--`后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。|\n\n\n\n## step 4 清理.git的object\n\n`.git` 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.\n\nPS: `git gc`操作耗时比较久,请耐心等待.\n\n\n\n```\n\n\ngit reset --hard\n\ngit for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d\n\ngit reflog expire --expire=now --all\n\ngit gc --aggressive --prune=now\n\n\n```\n\n## step 5 将新的本地仓库推送到远端\n\n先创建新的仓库：`https://github.com/xxx/target_child.git`\n\n```\n\n\n//添加远端分支\n\ngit remote add origin https://github.com/xxx/target_child.git\n\n//强制推送到远端\n\ngit push --fore origin master\n\n\n```\n\nPS:\n\n若master分支为保护状态，强制推送时会遇到如下错误：\n\n```\n\nremote: GitLab: You are not allowed to force push code to a protected branch on this project.\n\n```\n\n须解除master分支的保护状态，推完之后再改回来","slug":"git/split-git-repository","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7ov0008i9skp9463ype","content":"<blockquote>\n<p>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作</p>\n</blockquote>\n<h2 id=\"u57FA_u672C_u8BBE_u5B9A\"><a href=\"#u57FA_u672C_u8BBE_u5B9A\" class=\"headerlink\" title=\"基本设定\"></a>基本设定</h2><p>父项目为 <code>https://github.com/xxx/demo.git</code></p>\n<p>父仓库目录：/demo</p>\n<p>当前子仓库目录：/demo/target_child</p>\n<p>目标是把target_child拆到新项目：<code>https://github.com/xxx/target_child.git</code></p>\n<h2 id=\"step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939\"><a href=\"#step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939\" class=\"headerlink\" title=\"step1 clone 一份原仓库文件到本地，目录为目标文件夹\"></a>step1 clone 一份原仓库文件到本地，目录为目标文件夹</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​cd ~/git/code/</span><br><span class=\"line\">​</span><br><span class=\"line\">​git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/xxx/demo.git target_child</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<h2 id=\"step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote\"><a href=\"#step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote\" class=\"headerlink\" title=\"step2 删掉原仓库的remote\"></a>step2 删掉原仓库的remote</h2><figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cd</span> target_child</span><br><span class=\"line\"></span><br><span class=\"line\">git remote <span class=\"keyword\">rm</span> origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55\"><a href=\"#step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55\" class=\"headerlink\" title=\"step3 过滤无用的历史记录\"></a>step3 过滤无用的历史记录</h2><p>过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–tag-name-filter</td>\n<td>该参数控制我们要如何处理旧的 tag，cat 即表示原样输出</td>\n</tr>\n<tr>\n<td>–prune-empty</td>\n<td>删除空的（对子目录没有影响的）提交</td>\n</tr>\n<tr>\n<td>–subdirectory-filter</td>\n<td>指定子目录路径, 如<code>./target_child</code></td>\n</tr>\n<tr>\n<td>– –all</td>\n<td>该参数必须跟在<code>--</code>后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"step_4__u6E05_u7406-git_u7684object\"><a href=\"#step_4__u6E05_u7406-git_u7684object\" class=\"headerlink\" title=\"step 4 清理.git的object\"></a>step 4 清理.git的object</h2><p><code>.git</code> 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.</p>\n<p>PS: <code>git gc</code>操作耗时比较久,请耐心等待.</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\">git for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog expire --expire=now --all</span><br><span class=\"line\"></span><br><span class=\"line\">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>\n<h2 id=\"step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF\"><a href=\"#step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF\" class=\"headerlink\" title=\"step 5 将新的本地仓库推送到远端\"></a>step 5 将新的本地仓库推送到远端</h2><p>先创建新的仓库：<code>https://github.com/xxx/target_child.git</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//添加远端分支</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin https://github.com/xxx/target_child.git</span><br><span class=\"line\"></span><br><span class=\"line\">//强制推送到远端</span><br><span class=\"line\"></span><br><span class=\"line\">git push --fore origin master</span><br></pre></td></tr></table></figure>\n<p>PS:</p>\n<p>若master分支为保护状态，强制推送时会遇到如下错误：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span></span><br></pre></td></tr></table></figure>\n<p>须解除master分支的保护状态，推完之后再改回来</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作</p>\n</blockquote>\n<h2 id=\"u57FA_u672C_u8BBE_u5B9A\"><a href=\"#u57FA_u672C_u8BBE_u5B9A\" class=\"headerlink\" title=\"基本设定\"></a>基本设定</h2><p>父项目为 <code>https://github.com/xxx/demo.git</code></p>\n<p>父仓库目录：/demo</p>\n<p>当前子仓库目录：/demo/target_child</p>\n<p>目标是把target_child拆到新项目：<code>https://github.com/xxx/target_child.git</code></p>\n<h2 id=\"step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939\"><a href=\"#step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939\" class=\"headerlink\" title=\"step1 clone 一份原仓库文件到本地，目录为目标文件夹\"></a>step1 clone 一份原仓库文件到本地，目录为目标文件夹</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">​cd ~/git/code/</span><br><span class=\"line\">​</span><br><span class=\"line\">​git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://github.com/xxx/demo.git target_child</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<h2 id=\"step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote\"><a href=\"#step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote\" class=\"headerlink\" title=\"step2 删掉原仓库的remote\"></a>step2 删掉原仓库的remote</h2><figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">cd</span> target_child</span><br><span class=\"line\"></span><br><span class=\"line\">git remote <span class=\"keyword\">rm</span> origin</span><br></pre></td></tr></table></figure>\n<h2 id=\"step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55\"><a href=\"#step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55\" class=\"headerlink\" title=\"step3 过滤无用的历史记录\"></a>step3 过滤无用的历史记录</h2><p>过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>–tag-name-filter</td>\n<td>该参数控制我们要如何处理旧的 tag，cat 即表示原样输出</td>\n</tr>\n<tr>\n<td>–prune-empty</td>\n<td>删除空的（对子目录没有影响的）提交</td>\n</tr>\n<tr>\n<td>–subdirectory-filter</td>\n<td>指定子目录路径, 如<code>./target_child</code></td>\n</tr>\n<tr>\n<td>– –all</td>\n<td>该参数必须跟在<code>--</code>后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"step_4__u6E05_u7406-git_u7684object\"><a href=\"#step_4__u6E05_u7406-git_u7684object\" class=\"headerlink\" title=\"step 4 清理.git的object\"></a>step 4 清理.git的object</h2><p><code>.git</code> 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.</p>\n<p>PS: <code>git gc</code>操作耗时比较久,请耐心等待.</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\">git for-each-ref --format=\"%(refname)\" refs/original/ |xargs -n 1 git update-ref -d</span><br><span class=\"line\"></span><br><span class=\"line\">git reflog expire --expire=now --all</span><br><span class=\"line\"></span><br><span class=\"line\">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure>\n<h2 id=\"step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF\"><a href=\"#step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF\" class=\"headerlink\" title=\"step 5 将新的本地仓库推送到远端\"></a>step 5 将新的本地仓库推送到远端</h2><p>先创建新的仓库：<code>https://github.com/xxx/target_child.git</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//添加远端分支</span><br><span class=\"line\"></span><br><span class=\"line\">git remote add origin https://github.com/xxx/target_child.git</span><br><span class=\"line\"></span><br><span class=\"line\">//强制推送到远端</span><br><span class=\"line\"></span><br><span class=\"line\">git push --fore origin master</span><br></pre></td></tr></table></figure>\n<p>PS:</p>\n<p>若master分支为保护状态，强制推送时会遇到如下错误：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span></span><br></pre></td></tr></table></figure>\n<p>须解除master分支的保护状态，推完之后再改回来</p>\n","sticky":0},{"title":"GO学习笔记--defer篇","date":"2019-04-23T14:33:16.000Z","_content":"\n# 什么是defer\n\n# defer特别\n\n栈，后进先出\n\n# 什么场景下用defer\n\n程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。\n\n```\nfunc main (){\n\tf,err := os.Open(\"test.txt\")\n\tif err != nil {\n\t\tfmt.Print(err, \"\\n\")\n\t\treturn\n\t}\n\tdefer func() {\n\t\tfmt.Print(\"do close \\n\")\n\t\tcloseErr := f.Close()\n\t\tif closeErr != nil {\n\t\t\tfmt.Print(\"close file err \\n\")\n\t\t\treturn\n\t\t}\n\t}()\n\tfmt.Print(\"main end \\n\")\n}\n```\n\n# defer原理\n\n每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.\ndefer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。\n","source":"_posts/golang/defer.md","raw":"title: GO学习笔记--defer篇\ndate: 2019-04-23 22:33:16 \ntags: [golang,defer]  \ncategories: golang\n---\n\n# 什么是defer\n\n# defer特别\n\n栈，后进先出\n\n# 什么场景下用defer\n\n程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。\n\n```\nfunc main (){\n\tf,err := os.Open(\"test.txt\")\n\tif err != nil {\n\t\tfmt.Print(err, \"\\n\")\n\t\treturn\n\t}\n\tdefer func() {\n\t\tfmt.Print(\"do close \\n\")\n\t\tcloseErr := f.Close()\n\t\tif closeErr != nil {\n\t\t\tfmt.Print(\"close file err \\n\")\n\t\t\treturn\n\t\t}\n\t}()\n\tfmt.Print(\"main end \\n\")\n}\n```\n\n# defer原理\n\n每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.\ndefer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。\n","slug":"golang/defer","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7ox000bi9skxna1rzd6","content":"<h1 id=\"u4EC0_u4E48_u662Fdefer\"><a href=\"#u4EC0_u4E48_u662Fdefer\" class=\"headerlink\" title=\"什么是defer\"></a>什么是defer</h1><h1 id=\"defer_u7279_u522B\"><a href=\"#defer_u7279_u522B\" class=\"headerlink\" title=\"defer特别\"></a>defer特别</h1><p>栈，后进先出</p>\n<h1 id=\"u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer\"><a href=\"#u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer\" class=\"headerlink\" title=\"什么场景下用defer\"></a>什么场景下用defer</h1><p>程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tf,err := os.Open(<span class=\"string\">\"test.txt\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Print(err, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Print(<span class=\"string\">\"do close \\n\"</span>)</span><br><span class=\"line\">\t\tcloseErr := f.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> closeErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(<span class=\"string\">\"close file err \\n\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">\"main end \\n\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"defer_u539F_u7406\"><a href=\"#defer_u539F_u7406\" class=\"headerlink\" title=\"defer原理\"></a>defer原理</h1><p>每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.<br>defer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"u4EC0_u4E48_u662Fdefer\"><a href=\"#u4EC0_u4E48_u662Fdefer\" class=\"headerlink\" title=\"什么是defer\"></a>什么是defer</h1><h1 id=\"defer_u7279_u522B\"><a href=\"#defer_u7279_u522B\" class=\"headerlink\" title=\"defer特别\"></a>defer特别</h1><p>栈，后进先出</p>\n<h1 id=\"u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer\"><a href=\"#u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer\" class=\"headerlink\" title=\"什么场景下用defer\"></a>什么场景下用defer</h1><p>程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tf,err := os.Open(<span class=\"string\">\"test.txt\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Print(err, <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tfmt.Print(<span class=\"string\">\"do close \\n\"</span>)</span><br><span class=\"line\">\t\tcloseErr := f.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> closeErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(<span class=\"string\">\"close file err \\n\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">\"main end \\n\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"defer_u539F_u7406\"><a href=\"#defer_u539F_u7406\" class=\"headerlink\" title=\"defer原理\"></a>defer原理</h1><p>每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.<br>defer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。</p>\n","sticky":0},{"title":"java学习笔记[bean注解]","date":"2018-03-30T14:22:53.000Z","_content":"\n>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置...等等，这里对其作用做了笔记\n\n# Bean的声明\n\n* @Component 通用，无明确角色\n* @Repository. 数据访问层（Dao）层注解\n* @Controller  Controller层\n* @Service  业务逻辑Service层\n* @Configuration 配置文件\n\n# Scope\n\n## 作用域类型\n\n@Scope(“single”)    \n* single          每个IOC容器对一个bean定义创建唯一实例 \n* prototype    对一个bean定义，每次请求容器都会创建新的实例 \n* session         对一个bean定义，一次web会话创建一个实例 \n* request            对一个bean定义，一次web请求会创建一个实例 \n* global session    对一个bean定义，一次porlet会话创建一个实例 \n\n## 代理\nscoped-proxy的意义在关联bean之间的依赖\nproxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。\n\n```\n @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n```\n \n\n能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。\n如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。\n也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。\n\n\nproxyMode：代理方式\n\n```\n取值说明：  \nScopedProxyMode.DEFAULT:           默认  \nScopedProxyMode.NO:                不使用代理\nScopedProxyMode.INTERFACES:        接口    ---jdk动态代理\nScopedProxyMode.TARGET_CLASS:      类      ---cglib\n```\n\n# Configuration\n\n@Bean\n配置Bean\n\n# Bean的注入\n\n* @Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错\n* @Resource           JSR-250提供的注解.    \n* @Inject                JSR-330提供的注解\n\n## 区别\n\n‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。\n\n而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。\n\n下面是它们执行逻辑顺序的总结：\n\n`@Autowired和@Inject`\n\n按照类型匹配\n使用限定符进行类型限定\n按照名称匹配\n\n\n`@Resource`\n\n\n按照名称匹配\n按照类型匹配\n使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）\n\n\nPs: 使用@Inject需要Jsr-303的支持，添加依赖\n\n```\n\t\t<dependency>\n\t\t\t<groupId>javax.inject</groupId>\n\t\t\t<artifactId>javax.inject</artifactId>\n\t\t\t<version>1</version>\n\t\t</dependency>\n```\n\n# List,Map的注入\n\n```\nclass Example{\n    @Autowired\n\t\tprivate List<Bean> list;\n}\n```\n\n## Qualifier\n\n限定符\n\n# Required\n\n@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。\n\n```\nclass Demo{\n    private String name;\n\n    @Required\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\nClass Demo2 {\n    @Autowired(value=\"name\")\n    private Demo demo;\n}\n```\n\n\n# Meta-annotations元注解\n\n* @Retention：\n\n 可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：\n   1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。\n\n   2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。\n\n   3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。\n\n* @Target：\n\n 表示该新定义Annotation的作用目标，具体可参考API文档。\n    1.CONSTRUCTOR:用于描述构造器\n\n    2.FIELD:用于描述域（成员变量）\n\n    3.LOCAL_VARIABLE:用于描述局部变量\n\n    4.METHOD:用于描述方法\n\n    5.PACKAGE:用于描述包\n\n    6.PARAMETER:用于描述参数\n\n    7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n* @Documented\n\n 表示该新定义Annotation是否保留在Java Docs中。\n\n* @Inherited\n\n 表示使用该新定义Annotation可以继承。\n\n\n\n","source":"_posts/java/java-bean.md","raw":"title: java学习笔记[bean注解]\ndate: 2018-03-30 22:22:53\ntags: java\ncategories: java\n---\n\n>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置...等等，这里对其作用做了笔记\n\n# Bean的声明\n\n* @Component 通用，无明确角色\n* @Repository. 数据访问层（Dao）层注解\n* @Controller  Controller层\n* @Service  业务逻辑Service层\n* @Configuration 配置文件\n\n# Scope\n\n## 作用域类型\n\n@Scope(“single”)    \n* single          每个IOC容器对一个bean定义创建唯一实例 \n* prototype    对一个bean定义，每次请求容器都会创建新的实例 \n* session         对一个bean定义，一次web会话创建一个实例 \n* request            对一个bean定义，一次web请求会创建一个实例 \n* global session    对一个bean定义，一次porlet会话创建一个实例 \n\n## 代理\nscoped-proxy的意义在关联bean之间的依赖\nproxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。\n\n```\n @Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n```\n \n\n能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。\n如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。\n也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。\n\n\nproxyMode：代理方式\n\n```\n取值说明：  \nScopedProxyMode.DEFAULT:           默认  \nScopedProxyMode.NO:                不使用代理\nScopedProxyMode.INTERFACES:        接口    ---jdk动态代理\nScopedProxyMode.TARGET_CLASS:      类      ---cglib\n```\n\n# Configuration\n\n@Bean\n配置Bean\n\n# Bean的注入\n\n* @Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错\n* @Resource           JSR-250提供的注解.    \n* @Inject                JSR-330提供的注解\n\n## 区别\n\n‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。\n\n而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。\n\n下面是它们执行逻辑顺序的总结：\n\n`@Autowired和@Inject`\n\n按照类型匹配\n使用限定符进行类型限定\n按照名称匹配\n\n\n`@Resource`\n\n\n按照名称匹配\n按照类型匹配\n使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）\n\n\nPs: 使用@Inject需要Jsr-303的支持，添加依赖\n\n```\n\t\t<dependency>\n\t\t\t<groupId>javax.inject</groupId>\n\t\t\t<artifactId>javax.inject</artifactId>\n\t\t\t<version>1</version>\n\t\t</dependency>\n```\n\n# List,Map的注入\n\n```\nclass Example{\n    @Autowired\n\t\tprivate List<Bean> list;\n}\n```\n\n## Qualifier\n\n限定符\n\n# Required\n\n@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。\n\n```\nclass Demo{\n    private String name;\n\n    @Required\n    public void setName(String name){\n        this.name = name;\n    }\n}\n\nClass Demo2 {\n    @Autowired(value=\"name\")\n    private Demo demo;\n}\n```\n\n\n# Meta-annotations元注解\n\n* @Retention：\n\n 可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：\n   1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。\n\n   2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。\n\n   3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。\n\n* @Target：\n\n 表示该新定义Annotation的作用目标，具体可参考API文档。\n    1.CONSTRUCTOR:用于描述构造器\n\n    2.FIELD:用于描述域（成员变量）\n\n    3.LOCAL_VARIABLE:用于描述局部变量\n\n    4.METHOD:用于描述方法\n\n    5.PACKAGE:用于描述包\n\n    6.PARAMETER:用于描述参数\n\n    7.TYPE:用于描述类、接口(包括注解类型) 或enum声明\n\n* @Documented\n\n 表示该新定义Annotation是否保留在Java Docs中。\n\n* @Inherited\n\n 表示使用该新定义Annotation可以继承。\n\n\n\n","slug":"java/java-bean","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7oy000ci9sklyqbwosb","content":"<blockquote>\n<p>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置…等等，这里对其作用做了笔记</p>\n</blockquote>\n<h1 id=\"Bean_u7684_u58F0_u660E\"><a href=\"#Bean_u7684_u58F0_u660E\" class=\"headerlink\" title=\"Bean的声明\"></a>Bean的声明</h1><ul>\n<li>@Component 通用，无明确角色</li>\n<li>@Repository. 数据访问层（Dao）层注解</li>\n<li>@Controller  Controller层</li>\n<li>@Service  业务逻辑Service层</li>\n<li>@Configuration 配置文件</li>\n</ul>\n<h1 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h1><h2 id=\"u4F5C_u7528_u57DF_u7C7B_u578B\"><a href=\"#u4F5C_u7528_u57DF_u7C7B_u578B\" class=\"headerlink\" title=\"作用域类型\"></a>作用域类型</h2><p>@Scope(“single”)    </p>\n<ul>\n<li>single          每个IOC容器对一个bean定义创建唯一实例 </li>\n<li>prototype    对一个bean定义，每次请求容器都会创建新的实例 </li>\n<li>session         对一个bean定义，一次web会话创建一个实例 </li>\n<li>request            对一个bean定义，一次web请求会创建一个实例 </li>\n<li>global session    对一个bean定义，一次porlet会话创建一个实例 </li>\n</ul>\n<h2 id=\"u4EE3_u7406\"><a href=\"#u4EE3_u7406\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>scoped-proxy的意义在关联bean之间的依赖<br>proxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br></pre></td></tr></table></figure>\n<p>能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。<br>如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。<br>也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。</p>\n<p>proxyMode：代理方式</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">取值说明：  </span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.DEFAULT: </span>          默认  </span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.NO: </span>               不使用代理</span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.INTERFACES: </span>       接口    ---<span class=\"keyword\">jdk动态代理</span></span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.TARGET_CLASS: </span>     类      ---cglib</span><br></pre></td></tr></table></figure>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>@Bean<br>配置Bean</p>\n<h1 id=\"Bean_u7684_u6CE8_u5165\"><a href=\"#Bean_u7684_u6CE8_u5165\" class=\"headerlink\" title=\"Bean的注入\"></a>Bean的注入</h1><ul>\n<li>@Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错</li>\n<li>@Resource           JSR-250提供的注解.    </li>\n<li>@Inject                JSR-330提供的注解</li>\n</ul>\n<h2 id=\"u533A_u522B\"><a href=\"#u533A_u522B\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。</p>\n<p>而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。</p>\n<p>下面是它们执行逻辑顺序的总结：</p>\n<p><code>@Autowired和@Inject</code></p>\n<p>按照类型匹配<br>使用限定符进行类型限定<br>按照名称匹配</p>\n<p><code>@Resource</code></p>\n<p>按照名称匹配<br>按照类型匹配<br>使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）</p>\n<p>Ps: 使用@Inject需要Jsr-303的支持，添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.inject<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.inject<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"List_2CMap_u7684_u6CE8_u5165\"><a href=\"#List_2CMap_u7684_u6CE8_u5165\" class=\"headerlink\" title=\"List,Map的注入\"></a>List,Map的注入</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span></span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">List</span>&lt;Bean&gt; <span class=\"keyword\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"Qualifier\"></a>Qualifier</h2><p>限定符</p>\n<h1 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h1><p>@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Required</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"keyword\">String</span> name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class Demo2 &#123;</span><br><span class=\"line\">    @Autowired(value=<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Meta-annotations_u5143_u6CE8_u89E3\"><a href=\"#Meta-annotations_u5143_u6CE8_u89E3\" class=\"headerlink\" title=\"Meta-annotations元注解\"></a>Meta-annotations元注解</h1><ul>\n<li><p>@Retention：</p>\n<p>可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：<br> 1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。</p>\n<p> 2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。</p>\n<p> 3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。</p>\n</li>\n<li><p>@Target：</p>\n<p>表示该新定义Annotation的作用目标，具体可参考API文档。<br>  1.CONSTRUCTOR:用于描述构造器</p>\n<p>  2.FIELD:用于描述域（成员变量）</p>\n<p>  3.LOCAL_VARIABLE:用于描述局部变量</p>\n<p>  4.METHOD:用于描述方法</p>\n<p>  5.PACKAGE:用于描述包</p>\n<p>  6.PARAMETER:用于描述参数</p>\n<p>  7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>\n</li>\n<li><p>@Documented</p>\n<p>表示该新定义Annotation是否保留在Java Docs中。</p>\n</li>\n<li><p>@Inherited</p>\n<p>表示使用该新定义Annotation可以继承。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置…等等，这里对其作用做了笔记</p>\n</blockquote>\n<h1 id=\"Bean_u7684_u58F0_u660E\"><a href=\"#Bean_u7684_u58F0_u660E\" class=\"headerlink\" title=\"Bean的声明\"></a>Bean的声明</h1><ul>\n<li>@Component 通用，无明确角色</li>\n<li>@Repository. 数据访问层（Dao）层注解</li>\n<li>@Controller  Controller层</li>\n<li>@Service  业务逻辑Service层</li>\n<li>@Configuration 配置文件</li>\n</ul>\n<h1 id=\"Scope\"><a href=\"#Scope\" class=\"headerlink\" title=\"Scope\"></a>Scope</h1><h2 id=\"u4F5C_u7528_u57DF_u7C7B_u578B\"><a href=\"#u4F5C_u7528_u57DF_u7C7B_u578B\" class=\"headerlink\" title=\"作用域类型\"></a>作用域类型</h2><p>@Scope(“single”)    </p>\n<ul>\n<li>single          每个IOC容器对一个bean定义创建唯一实例 </li>\n<li>prototype    对一个bean定义，每次请求容器都会创建新的实例 </li>\n<li>session         对一个bean定义，一次web会话创建一个实例 </li>\n<li>request            对一个bean定义，一次web请求会创建一个实例 </li>\n<li>global session    对一个bean定义，一次porlet会话创建一个实例 </li>\n</ul>\n<h2 id=\"u4EE3_u7406\"><a href=\"#u4EE3_u7406\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>scoped-proxy的意义在关联bean之间的依赖<br>proxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br></pre></td></tr></table></figure>\n<p>能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。<br>如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。<br>也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。</p>\n<p>proxyMode：代理方式</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">取值说明：  </span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.DEFAULT: </span>          默认  </span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.NO: </span>               不使用代理</span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.INTERFACES: </span>       接口    ---<span class=\"keyword\">jdk动态代理</span></span><br><span class=\"line\"><span class=\"keyword\">ScopedProxyMode.TARGET_CLASS: </span>     类      ---cglib</span><br></pre></td></tr></table></figure>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>@Bean<br>配置Bean</p>\n<h1 id=\"Bean_u7684_u6CE8_u5165\"><a href=\"#Bean_u7684_u6CE8_u5165\" class=\"headerlink\" title=\"Bean的注入\"></a>Bean的注入</h1><ul>\n<li>@Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错</li>\n<li>@Resource           JSR-250提供的注解.    </li>\n<li>@Inject                JSR-330提供的注解</li>\n</ul>\n<h2 id=\"u533A_u522B\"><a href=\"#u533A_u522B\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。</p>\n<p>而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。</p>\n<p>下面是它们执行逻辑顺序的总结：</p>\n<p><code>@Autowired和@Inject</code></p>\n<p>按照类型匹配<br>使用限定符进行类型限定<br>按照名称匹配</p>\n<p><code>@Resource</code></p>\n<p>按照名称匹配<br>按照类型匹配<br>使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）</p>\n<p>Ps: 使用@Inject需要Jsr-303的支持，添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.inject<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.inject<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"List_2CMap_u7684_u6CE8_u5165\"><a href=\"#List_2CMap_u7684_u6CE8_u5165\" class=\"headerlink\" title=\"List,Map的注入\"></a>List,Map的注入</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span></span>&#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">List</span>&lt;Bean&gt; <span class=\"keyword\">list</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"Qualifier\"></a>Qualifier</h2><p>限定符</p>\n<h1 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h1><p>@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> name;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Required</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"keyword\">String</span> name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Class Demo2 &#123;</span><br><span class=\"line\">    @Autowired(value=<span class=\"string\">\"name\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Demo demo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Meta-annotations_u5143_u6CE8_u89E3\"><a href=\"#Meta-annotations_u5143_u6CE8_u89E3\" class=\"headerlink\" title=\"Meta-annotations元注解\"></a>Meta-annotations元注解</h1><ul>\n<li><p>@Retention：</p>\n<p>可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：<br> 1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。</p>\n<p> 2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。</p>\n<p> 3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。</p>\n</li>\n<li><p>@Target：</p>\n<p>表示该新定义Annotation的作用目标，具体可参考API文档。<br>  1.CONSTRUCTOR:用于描述构造器</p>\n<p>  2.FIELD:用于描述域（成员变量）</p>\n<p>  3.LOCAL_VARIABLE:用于描述局部变量</p>\n<p>  4.METHOD:用于描述方法</p>\n<p>  5.PACKAGE:用于描述包</p>\n<p>  6.PARAMETER:用于描述参数</p>\n<p>  7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>\n</li>\n<li><p>@Documented</p>\n<p>表示该新定义Annotation是否保留在Java Docs中。</p>\n</li>\n<li><p>@Inherited</p>\n<p>表示使用该新定义Annotation可以继承。</p>\n</li>\n</ul>\n","sticky":0},{"title":"Ajax中的2个需要注意的地方","date":"2014-12-28T08:49:00.000Z","_content":"\n\n>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础\n\n## 异步获取数据\n\n异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:\n\n```\n\t $.ajax({\n\t  \n\t     url:'/test/test.api',\n\t     dataType:'json',\n\t     type:'get',\n\t      \n\t     success:function(data){\n\t          console.log(1);\n\t     }\n\t});\n\tconsole.log(2);\n\t//控制台结果：\n\t//2\n\t//1\n```\n\n你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。\n\n\n## ajax中的this作用域\n\n在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：\n\n```\n\tvar testObj = {\n\t   type : 'this is testObj.type',\n\t   test : function(){\n\t        console.log('this.type:' + this.type);\n\t        var _this = this;\n\t           \n\t        $.ajax({\n\t            url:'/test/test.php',\n\t            dataType:'json',\n\t            type:'get',\n\t            success:function(data){\n\t                console.log('this.type in ajax:' + this.type);\n\t                console.log('_this.type:' + _this.type);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\ttestObj.test();\n\t//控制台出现的数据是：\n\t//this.type:this is testObj.type \n\t//this.type in ajax:get \n\t//_this.type:this is testObj.type\n```\n\n要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this","source":"_posts/js/js-ajax.md","raw":"title: Ajax中的2个需要注意的地方  \ndate: 2014-12-28 16:49  \ntags: javascript  \ncategories: javascript  \n\n---\n\n\n>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础\n\n## 异步获取数据\n\n异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:\n\n```\n\t $.ajax({\n\t  \n\t     url:'/test/test.api',\n\t     dataType:'json',\n\t     type:'get',\n\t      \n\t     success:function(data){\n\t          console.log(1);\n\t     }\n\t});\n\tconsole.log(2);\n\t//控制台结果：\n\t//2\n\t//1\n```\n\n你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。\n\n\n## ajax中的this作用域\n\n在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：\n\n```\n\tvar testObj = {\n\t   type : 'this is testObj.type',\n\t   test : function(){\n\t        console.log('this.type:' + this.type);\n\t        var _this = this;\n\t           \n\t        $.ajax({\n\t            url:'/test/test.php',\n\t            dataType:'json',\n\t            type:'get',\n\t            success:function(data){\n\t                console.log('this.type in ajax:' + this.type);\n\t                console.log('_this.type:' + _this.type);\n\t            }\n\t        });\n\t    }\n\t};\n\t\n\ttestObj.test();\n\t//控制台出现的数据是：\n\t//this.type:this is testObj.type \n\t//this.type in ajax:get \n\t//_this.type:this is testObj.type\n```\n\n要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this","slug":"js/js-ajax","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7oy000di9sk66a99olw","content":"<blockquote>\n<p>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础</p>\n</blockquote>\n<h2 id=\"u5F02_u6B65_u83B7_u53D6_u6570_u636E\"><a href=\"#u5F02_u6B65_u83B7_u53D6_u6570_u636E\" class=\"headerlink\" title=\"异步获取数据\"></a>异步获取数据</h2><p>异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $.ajax(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">     url:<span class=\"string\">'/test/test.api'</span>,</span><br><span class=\"line\">     dataType:<span class=\"string\">'json'</span>,</span><br><span class=\"line\">     type:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">     success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//控制台结果：</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。</p>\n<h2 id=\"ajax_u4E2D_u7684this_u4F5C_u7528_u57DF\"><a href=\"#ajax_u4E2D_u7684this_u4F5C_u7528_u57DF\" class=\"headerlink\" title=\"ajax中的this作用域\"></a>ajax中的this作用域</h2><p>在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testObj = &#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">type</span> </span>: <span class=\"symbol\">'this</span> is testObj<span class=\"class\">.<span class=\"keyword\">type</span>',</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">test</span> </span>: function()&#123;</span><br><span class=\"line\">        console.log(<span class=\"symbol\">'this</span><span class=\"class\">.<span class=\"keyword\">type</span></span>:' + <span class=\"keyword\">this</span><span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url:'/test/test.php',</span><br><span class=\"line\">            dataType:<span class=\"symbol\">'jso</span>n',</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">type</span></span>:<span class=\"symbol\">'ge</span>t',</span><br><span class=\"line\">            success:function(data)&#123;</span><br><span class=\"line\">                console.log(<span class=\"symbol\">'this</span><span class=\"class\">.<span class=\"keyword\">type</span> <span class=\"title\">in</span> <span class=\"title\">ajax</span></span>:' + <span class=\"keyword\">this</span><span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">                console.log(<span class=\"symbol\">'_this</span><span class=\"class\">.<span class=\"keyword\">type</span></span>:' + _this<span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">testObj.test();</span><br><span class=\"line\"><span class=\"comment\">//控制台出现的数据是：</span></span><br><span class=\"line\"><span class=\"comment\">//this.type:this is testObj.type </span></span><br><span class=\"line\"><span class=\"comment\">//this.type in ajax:get </span></span><br><span class=\"line\"><span class=\"comment\">//_this.type:this is testObj.type</span></span><br></pre></td></tr></table></figure>\n<p>要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Ajax在WEB程序中调用api的利器，这儿记录下在使用过程中发现2个容易忽略而导致错误的地方，这两个地方也是一些javascript的基础知识，也可以当作重温一下javascript的基础</p>\n</blockquote>\n<h2 id=\"u5F02_u6B65_u83B7_u53D6_u6570_u636E\"><a href=\"#u5F02_u6B65_u83B7_u53D6_u6570_u636E\" class=\"headerlink\" title=\"异步获取数据\"></a>异步获取数据</h2><p>异步是指，在ajax发送请求后，会继续执行下面的方法，直到请求返回时，再回过头来执行ajax中的回调方法。这也是ajax异步的强大之处，不会因为请求而影响程序其他任务的执行时间。但如果你下面执行的代码中，有需要请求返回的数据，那就会发生错误了，因为请求还没回来，你的代码就执行了。如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"> $.ajax(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">     url:<span class=\"string\">'/test/test.api'</span>,</span><br><span class=\"line\">     dataType:<span class=\"string\">'json'</span>,</span><br><span class=\"line\">     type:<span class=\"string\">'get'</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">     success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//控制台结果：</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<p>你会发现，控制台先出现的数字是2,之后才是1。如果后面有需要用到请求返回数据的代码，必须写在回调方法success的function里面。</p>\n<h2 id=\"ajax_u4E2D_u7684this_u4F5C_u7528_u57DF\"><a href=\"#ajax_u4E2D_u7684this_u4F5C_u7528_u57DF\" class=\"headerlink\" title=\"ajax中的this作用域\"></a>ajax中的this作用域</h2><p>在一个对象中，this变量代表的是自身这个对象，而在ajax中，参数就是一个对象，参数中this变量所代表的是参数本身，如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testObj = &#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">type</span> </span>: <span class=\"symbol\">'this</span> is testObj<span class=\"class\">.<span class=\"keyword\">type</span>',</span></span><br><span class=\"line\"><span class=\"class\">   <span class=\"title\">test</span> </span>: function()&#123;</span><br><span class=\"line\">        console.log(<span class=\"symbol\">'this</span><span class=\"class\">.<span class=\"keyword\">type</span></span>:' + <span class=\"keyword\">this</span><span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">           </span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            url:'/test/test.php',</span><br><span class=\"line\">            dataType:<span class=\"symbol\">'jso</span>n',</span><br><span class=\"line\">            <span class=\"class\"><span class=\"keyword\">type</span></span>:<span class=\"symbol\">'ge</span>t',</span><br><span class=\"line\">            success:function(data)&#123;</span><br><span class=\"line\">                console.log(<span class=\"symbol\">'this</span><span class=\"class\">.<span class=\"keyword\">type</span> <span class=\"title\">in</span> <span class=\"title\">ajax</span></span>:' + <span class=\"keyword\">this</span><span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">                console.log(<span class=\"symbol\">'_this</span><span class=\"class\">.<span class=\"keyword\">type</span></span>:' + _this<span class=\"class\">.<span class=\"keyword\">type</span>)</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">testObj.test();</span><br><span class=\"line\"><span class=\"comment\">//控制台出现的数据是：</span></span><br><span class=\"line\"><span class=\"comment\">//this.type:this is testObj.type </span></span><br><span class=\"line\"><span class=\"comment\">//this.type in ajax:get </span></span><br><span class=\"line\"><span class=\"comment\">//_this.type:this is testObj.type</span></span><br></pre></td></tr></table></figure>\n<p>要在ajax中使用this指向ajax以外的对象，需要先在ajax外面将this赋值给别的变量，再调用。如上面的_this</p>\n","sticky":0},{"title":"javascript创建DOM元素","date":"2014-03-15T07:49:00.000Z","_content":"\n2种创建DOM元素的方法\n\n## 创建一个element\n\n```\n\t/**\n\t * 赋值obj对象为一个创建input元素\n\t * 设置obj元素属性，可以直接以`.`赋值，也可以用`setAttribute`\n\t */\n \tvar obj = document.createElement('input');\n \t\n\tobj.name = 'name';\n\tobj.value = 'value';\n\n\tobj.setAttribute('id','idname');\n\tobj.setAttribute('type','typename');\n\t\n\t/**\n\t * 在id为before的元素后面插入obj\n\t */\n\tdocument.getElementById('before').appendChild(obj);\n```\n\n## 简单粗暴地输出标签\n\n```\n\tdocument.write(\"<inpt name='name' value='value' id='idname' type='typename'>\");\n```","source":"_posts/js/js-createElement.md","raw":"title: javascript创建DOM元素  \ndate: 2014-03-15 15:49  \ntags: javascript  \ncategories: javascript\n\n---\n\n2种创建DOM元素的方法\n\n## 创建一个element\n\n```\n\t/**\n\t * 赋值obj对象为一个创建input元素\n\t * 设置obj元素属性，可以直接以`.`赋值，也可以用`setAttribute`\n\t */\n \tvar obj = document.createElement('input');\n \t\n\tobj.name = 'name';\n\tobj.value = 'value';\n\n\tobj.setAttribute('id','idname');\n\tobj.setAttribute('type','typename');\n\t\n\t/**\n\t * 在id为before的元素后面插入obj\n\t */\n\tdocument.getElementById('before').appendChild(obj);\n```\n\n## 简单粗暴地输出标签\n\n```\n\tdocument.write(\"<inpt name='name' value='value' id='idname' type='typename'>\");\n```","slug":"js/js-createElement","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7oz000hi9skb90mm4so","content":"<p>2种创建DOM元素的方法</p>\n<h2 id=\"u521B_u5EFA_u4E00_u4E2Aelement\"><a href=\"#u521B_u5EFA_u4E00_u4E2Aelement\" class=\"headerlink\" title=\"创建一个element\"></a>创建一个element</h2><figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>赋值obj对象为一个创建input元素</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>设置obj元素属性，可以直接以<span class=\"code\">`.`</span>赋值，也可以用<span class=\"code\">`setAttribute`</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> */</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">obj.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">obj.value = <span class=\"string\">'value'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.setAttribute(<span class=\"string\">'id'</span>,<span class=\"string\">'idname'</span>);</span><br><span class=\"line\">obj.setAttribute(<span class=\"string\">'type'</span>,<span class=\"string\">'typename'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>在id为before的元素后面插入obj</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> */</span></span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'before'</span>).appendChild(obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B80_u5355_u7C97_u66B4_u5730_u8F93_u51FA_u6807_u7B7E\"><a href=\"#u7B80_u5355_u7C97_u66B4_u5730_u8F93_u51FA_u6807_u7B7E\" class=\"headerlink\" title=\"简单粗暴地输出标签\"></a>简单粗暴地输出标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.write(\"<span class=\"tag\">&lt;<span class=\"name\">inpt</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">value</span>=<span class=\"string\">'value'</span> <span class=\"attr\">id</span>=<span class=\"string\">'idname'</span> <span class=\"attr\">type</span>=<span class=\"string\">'typename'</span>&gt;</span>\");</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>2种创建DOM元素的方法</p>\n<h2 id=\"u521B_u5EFA_u4E00_u4E2Aelement\"><a href=\"#u521B_u5EFA_u4E00_u4E2Aelement\" class=\"headerlink\" title=\"创建一个element\"></a>创建一个element</h2><figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>赋值obj对象为一个创建input元素</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>设置obj元素属性，可以直接以<span class=\"code\">`.`</span>赋值，也可以用<span class=\"code\">`setAttribute`</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> */</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">obj.name = <span class=\"string\">'name'</span>;</span><br><span class=\"line\">obj.value = <span class=\"string\">'value'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.setAttribute(<span class=\"string\">'id'</span>,<span class=\"string\">'idname'</span>);</span><br><span class=\"line\">obj.setAttribute(<span class=\"string\">'type'</span>,<span class=\"string\">'typename'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"><span class=\"bullet\"> * </span>在id为before的元素后面插入obj</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"markdown\"> */</span></span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'before'</span>).appendChild(obj);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B80_u5355_u7C97_u66B4_u5730_u8F93_u51FA_u6807_u7B7E\"><a href=\"#u7B80_u5355_u7C97_u66B4_u5730_u8F93_u51FA_u6807_u7B7E\" class=\"headerlink\" title=\"简单粗暴地输出标签\"></a>简单粗暴地输出标签</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.write(\"<span class=\"tag\">&lt;<span class=\"name\">inpt</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">value</span>=<span class=\"string\">'value'</span> <span class=\"attr\">id</span>=<span class=\"string\">'idname'</span> <span class=\"attr\">type</span>=<span class=\"string\">'typename'</span>&gt;</span>\");</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"ajax请求时json对象数据变成字段串[object object]","date":"2015-08-14T14:41:00.000Z","_content":"\n在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。\n\najax很普通地如下：\n\n```javascript\n    ...\n\t$.ajax({\n\t     type: \"POST\",\n\t     url: _url\n\t     dataType: \"json\",\n\t     data: _data,\n\t     error: function(){\n\t         console.log('error');\n\t     },\n\t     success: function(data){\n\t         console.log(data);\n\t     }\n\t});\n```\n\najax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下\n\n\n```javascript\n\tvar _data = {\n\t    data: 'test',\n\t    id: 1\n\t};\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了\n\n```javascript\n\tvar _data = {\n\t    testData: {\n\t       test:  'test'\n\t    }\n\t    data: 'test',\n\t    id: 1\n\t}; \n\tconsole.log(_data);\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：\n\n```\ntestData: [object Object]\ndata: 'test'\nid: 1\n```\n\n正常的数据应该是这样的：\n\n```\ntestData['test']: 'test'\ndata: 'test'\nid: 1\n```\n\n后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。","source":"_posts/js/js-ajaxJsonToString.md","raw":"title: ajax请求时json对象数据变成字段串[object object]\ndate: 2015-08-14 22:41\ntags: javascript\ncategories: javascript\n\n---\n\n在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。\n\najax很普通地如下：\n\n```javascript\n    ...\n\t$.ajax({\n\t     type: \"POST\",\n\t     url: _url\n\t     dataType: \"json\",\n\t     data: _data,\n\t     error: function(){\n\t         console.log('error');\n\t     },\n\t     success: function(data){\n\t         console.log(data);\n\t     }\n\t});\n```\n\najax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下\n\n\n```javascript\n\tvar _data = {\n\t    data: 'test',\n\t    id: 1\n\t};\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了\n\n```javascript\n\tvar _data = {\n\t    testData: {\n\t       test:  'test'\n\t    }\n\t    data: 'test',\n\t    id: 1\n\t}; \n\tconsole.log(_data);\n\t$.ajax({\n\t    ....   \n\t});\n```\n\n控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：\n\n```\ntestData: [object Object]\ndata: 'test'\nid: 1\n```\n\n正常的数据应该是这样的：\n\n```\ntestData['test']: 'test'\ndata: 'test'\nid: 1\n```\n\n后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。","slug":"js/js-ajaxJsonToString","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7oz000ii9skva10szhi","content":"<p>在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。</p>\n<p>ajax很普通地如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   ...</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">     type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">     url: _url</span><br><span class=\"line\">     dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">     data: _data,</span><br><span class=\"line\">     error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ajax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _data = &#123;</span><br><span class=\"line\">    data: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ....   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _data = &#123;</span><br><span class=\"line\">    testData: &#123;</span><br><span class=\"line\">       test:  <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_data);</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ....   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">testData:</span> [object Object]</span><br><span class=\"line\"><span class=\"string\">data:</span> <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">id:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>正常的数据应该是这样的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">testData[<span class=\"string\">'test'</span>]: <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">data:</span> <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">id:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在对一个旧项目修改时，遇到一个jquery版本引发的ajax问题。</p>\n<p>ajax很普通地如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">   ...</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">     type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">     url: _url</span><br><span class=\"line\">     dataType: <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">     data: _data,</span><br><span class=\"line\">     error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ajax向后端接口发送请求时，如果请求数据_data是只有1级时，还是正常的，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _data = &#123;</span><br><span class=\"line\">    data: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ....   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当请求数据的二级数据为如下对象或数组时，form表单中的数据就变了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _data = &#123;</span><br><span class=\"line\">    testData: &#123;</span><br><span class=\"line\">       test:  <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    data: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    id: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_data);</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    ....   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>控制台输出正常数据，然而在header查看请求表单的数据时，Form Data中的数据被转化成：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">testData:</span> [object Object]</span><br><span class=\"line\"><span class=\"string\">data:</span> <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">id:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>正常的数据应该是这样的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">testData[<span class=\"string\">'test'</span>]: <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">data:</span> <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"string\">id:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>后来查了一下引用的jquery版本，1.2.3 ,  罪魁祸首就是这个了，换了个高些的版本1.4就正常化了。</p>\n","sticky":0},{"title":"通过二维码开放平台的API快速生成二维码","date":"2014-09-06T09:06:00.000Z","_content":"\n> 二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。\n\n现在很多网站都有通过扫二维码用手机连接的功能，[联图网](http://www.liantu.com/pingtai/)的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。\n\nhtml代码如下:(二维码将生成在这div下)\n\n```\n\t<div id='qrcode'></div>\n```\n\njs代码如下：\n\n```\nvar qrCode = {\n    //初始化属性\n    jsonData:{\n        content     : '',  //内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的\n        logo        : '',  //二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg\n        bgColor     : '',  //背景颜色，             格式 ：颜色代码            如fffaf0\n        fgColor     : '',  //前景颜色，即条纹颜色     格式 ：同上\n        gcColor     : '',  //渐变颜色,              格式 : 同上\n        ptColor     : '',  //定位点颜色(外框)        格式：同上\n        inptColor   : '',  //定位点颜色(内点)        格式：同上\n        eLevel      : '',  //纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h\n        w           : '',  //宽度尺寸               格式：像素值              如  200\n        m           : ''   //外边距尺寸               格式：如上\n    },\n    //获取二维码图片\n    getQrcode:function(divId){\n        //javascript写法\n        var divElement = document.getElementById(divId),\n            imgHtml    = this.setImgHeml(this.jsonData);\n        divElement.innerHTML = imgHtml;\n        /* //jQuery写法\n        var imgHtml    = this.setImgHeml(this.jsonData);\n        $(\"#\"+divId).append(imgHtml);*/\n    },\n    //构造图片\n    setImgHeml:function(jsonData){\n        var imgHtml = \"<img src='http://qr.liantu.com/api.php?\";\n        imgHtml += jsonData.content?\"&text=\"+jsonData.content:\"\";\n        imgHtml += jsonData.logo?\"&logo=\"+jsonData.logo:\"\";\n        imgHtml += jsonData.bgColor?\"&bg=\"+jsonData.bgColor:\"\";\n        imgHtml += jsonData.fgColor?\"&fg=\"+jsonData.fgColor:\"\";\n        imgHtml += jsonData.gcColor?\"&gc=\"+jsonData.gcColor:\"\";\n        imgHtml += jsonData.ptColor?\"&pg=\"+jsonData.ptColor:\"\";\n        imgHtml += jsonData.inptColor?\"&inpt=\"+jsonData.inptColor:\"\";\n        imgHtml += jsonData.eLevel?\"&el=\"+jsonData.eLevel:\"\";\n        imgHtml += jsonData.w?\"&w=\"+jsonData.w:\"\";\n        imgHtml += jsonData.m?\"&m=\"+jsonData.m:\"\";\n        imgHtml += \"'>\";\n        return imgHtml;\n    }\n};\n```\n\n调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置\n\n```\n\t//设置内容为当前url路径\n\tqrCode.jsonData.content =  window.location.href;\n\t//设置宽度尺寸\n\tqrCode.jsonData.w =  500;\n\t//设置外边框距\n\tqrCode.jsonData.m =  50;\n\t//在id为qrcode的元素下生成二维码图片\n\tqrCode.getQrcode('qrcode');\n```\n\n通过这几行设置代码，就可以轻松地生成二维码了.","source":"_posts/js/js-qrcode.md","raw":"title: 通过二维码开放平台的API快速生成二维码  \ndate: 2014-09-06 17:06  \ntags: javascript  \ncategories: javascript  \n\n---\n\n> 二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。\n\n现在很多网站都有通过扫二维码用手机连接的功能，[联图网](http://www.liantu.com/pingtai/)的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。\n\nhtml代码如下:(二维码将生成在这div下)\n\n```\n\t<div id='qrcode'></div>\n```\n\njs代码如下：\n\n```\nvar qrCode = {\n    //初始化属性\n    jsonData:{\n        content     : '',  //内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的\n        logo        : '',  //二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg\n        bgColor     : '',  //背景颜色，             格式 ：颜色代码            如fffaf0\n        fgColor     : '',  //前景颜色，即条纹颜色     格式 ：同上\n        gcColor     : '',  //渐变颜色,              格式 : 同上\n        ptColor     : '',  //定位点颜色(外框)        格式：同上\n        inptColor   : '',  //定位点颜色(内点)        格式：同上\n        eLevel      : '',  //纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h\n        w           : '',  //宽度尺寸               格式：像素值              如  200\n        m           : ''   //外边距尺寸               格式：如上\n    },\n    //获取二维码图片\n    getQrcode:function(divId){\n        //javascript写法\n        var divElement = document.getElementById(divId),\n            imgHtml    = this.setImgHeml(this.jsonData);\n        divElement.innerHTML = imgHtml;\n        /* //jQuery写法\n        var imgHtml    = this.setImgHeml(this.jsonData);\n        $(\"#\"+divId).append(imgHtml);*/\n    },\n    //构造图片\n    setImgHeml:function(jsonData){\n        var imgHtml = \"<img src='http://qr.liantu.com/api.php?\";\n        imgHtml += jsonData.content?\"&text=\"+jsonData.content:\"\";\n        imgHtml += jsonData.logo?\"&logo=\"+jsonData.logo:\"\";\n        imgHtml += jsonData.bgColor?\"&bg=\"+jsonData.bgColor:\"\";\n        imgHtml += jsonData.fgColor?\"&fg=\"+jsonData.fgColor:\"\";\n        imgHtml += jsonData.gcColor?\"&gc=\"+jsonData.gcColor:\"\";\n        imgHtml += jsonData.ptColor?\"&pg=\"+jsonData.ptColor:\"\";\n        imgHtml += jsonData.inptColor?\"&inpt=\"+jsonData.inptColor:\"\";\n        imgHtml += jsonData.eLevel?\"&el=\"+jsonData.eLevel:\"\";\n        imgHtml += jsonData.w?\"&w=\"+jsonData.w:\"\";\n        imgHtml += jsonData.m?\"&m=\"+jsonData.m:\"\";\n        imgHtml += \"'>\";\n        return imgHtml;\n    }\n};\n```\n\n调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置\n\n```\n\t//设置内容为当前url路径\n\tqrCode.jsonData.content =  window.location.href;\n\t//设置宽度尺寸\n\tqrCode.jsonData.w =  500;\n\t//设置外边框距\n\tqrCode.jsonData.m =  50;\n\t//在id为qrcode的元素下生成二维码图片\n\tqrCode.getQrcode('qrcode');\n```\n\n通过这几行设置代码，就可以轻松地生成二维码了.","slug":"js/js-qrcode","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p0000mi9sk79pb9wy9","content":"<blockquote>\n<p>二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。</p>\n</blockquote>\n<p>现在很多网站都有通过扫二维码用手机连接的功能，<a href=\"http://www.liantu.com/pingtai/\" target=\"_blank\" rel=\"noopener\">联图网</a>的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。</p>\n<p>html代码如下:(二维码将生成在这div下)</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>='qrcode'&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>js代码如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">var qrCode = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化属性</span></span><br><span class=\"line\"><span class=\"symbol\">    jsonData:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">content     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的</span></span><br><span class=\"line\">        <span class=\"string\">logo        :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg</span></span><br><span class=\"line\">        <span class=\"string\">bgColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//背景颜色，             格式 ：颜色代码            如fffaf0</span></span><br><span class=\"line\">        <span class=\"string\">fgColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//前景颜色，即条纹颜色     格式 ：同上</span></span><br><span class=\"line\">        <span class=\"string\">gcColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//渐变颜色,              格式 : 同上</span></span><br><span class=\"line\">        <span class=\"string\">ptColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//定位点颜色(外框)        格式：同上</span></span><br><span class=\"line\">        <span class=\"string\">inptColor   :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//定位点颜色(内点)        格式：同上</span></span><br><span class=\"line\">        <span class=\"string\">eLevel      :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h</span></span><br><span class=\"line\">        <span class=\"string\">w           :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//宽度尺寸               格式：像素值              如  200</span></span><br><span class=\"line\">        <span class=\"string\">m           :</span> <span class=\"string\">''</span>   <span class=\"comment\">//外边距尺寸               格式：如上</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//获取二维码图片</span></span><br><span class=\"line\"><span class=\"symbol\">    getQrcode:</span>function(divId)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//javascript写法</span></span><br><span class=\"line\">        var divElement = document.getElementById(divId),</span><br><span class=\"line\">            imgHtml    = <span class=\"keyword\">this</span>.setImgHeml(<span class=\"keyword\">this</span>.jsonData);</span><br><span class=\"line\">        divElement.innerHTML = imgHtml;</span><br><span class=\"line\">        <span class=\"comment\">/* //jQuery写法</span></span><br><span class=\"line\"><span class=\"comment\">        var imgHtml    = this.setImgHeml(this.jsonData);</span></span><br><span class=\"line\"><span class=\"comment\">        $(\"#\"+divId).append(imgHtml);*/</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//构造图片</span></span><br><span class=\"line\"><span class=\"symbol\">    setImgHeml:</span>function(jsonData)&#123;</span><br><span class=\"line\">        var imgHtml = <span class=\"string\">\"&lt;img src='http://qr.liantu.com/api.php?\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.content?\"&amp;text=\"+jsonData.content:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.logo?\"&amp;logo=\"+jsonData.logo:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.bgColor?\"&amp;bg=\"+jsonData.bgColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.fgColor?\"&amp;fg=\"+jsonData.fgColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.gcColor?\"&amp;gc=\"+jsonData.gcColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.ptColor?\"&amp;pg=\"+jsonData.ptColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.inptColor?\"&amp;inpt=\"+jsonData.inptColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.eLevel?\"&amp;el=\"+jsonData.eLevel:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.w?\"&amp;w=\"+jsonData.w:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.m?\"&amp;m=\"+jsonData.m:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += <span class=\"string\">\"'&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imgHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置内容为当前url路径</span></span><br><span class=\"line\">qrCode.jsonData.content =  <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"comment\">//设置宽度尺寸</span></span><br><span class=\"line\">qrCode.jsonData.w =  <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置外边框距</span></span><br><span class=\"line\">qrCode.jsonData.m =  <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"comment\">//在id为qrcode的元素下生成二维码图片</span></span><br><span class=\"line\">qrCode.getQrcode(<span class=\"string\">'qrcode'</span>);</span><br></pre></td></tr></table></figure>\n<p>通过这几行设置代码，就可以轻松地生成二维码了.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>二维码能快速地提高手机访问网站的速度，而不用麻烦地手动敲打地址。这次给大家分享一个很方便的快速生成二维码的方法。</p>\n</blockquote>\n<p>现在很多网站都有通过扫二维码用手机连接的功能，<a href=\"http://www.liantu.com/pingtai/\" target=\"_blank\" rel=\"noopener\">联图网</a>的二维码开放平台开放了一个生成二维码图片的Api,挺方便使用的。闲着无聊，写了个前台快速生成二维码的方法。</p>\n<p>html代码如下:(二维码将生成在这div下)</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>='qrcode'&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>js代码如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">var qrCode = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化属性</span></span><br><span class=\"line\"><span class=\"symbol\">    jsonData:</span>&#123;</span><br><span class=\"line\">        <span class=\"string\">content     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//内容，可为utl,如html://www.baidu.com 或文字，图片信息之类的</span></span><br><span class=\"line\">        <span class=\"string\">logo        :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//二维码中间显示图片，   如:html://wwww.xxx.com/imgname.jpg</span></span><br><span class=\"line\">        <span class=\"string\">bgColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//背景颜色，             格式 ：颜色代码            如fffaf0</span></span><br><span class=\"line\">        <span class=\"string\">fgColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//前景颜色，即条纹颜色     格式 ：同上</span></span><br><span class=\"line\">        <span class=\"string\">gcColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//渐变颜色,              格式 : 同上</span></span><br><span class=\"line\">        <span class=\"string\">ptColor     :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//定位点颜色(外框)        格式：同上</span></span><br><span class=\"line\">        <span class=\"string\">inptColor   :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//定位点颜色(内点)        格式：同上</span></span><br><span class=\"line\">        <span class=\"string\">eLevel      :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//纠错等级, 可用值:h\\q\\m\\l  格式 : 单个字符         如 h</span></span><br><span class=\"line\">        <span class=\"string\">w           :</span> <span class=\"string\">''</span>,  <span class=\"comment\">//宽度尺寸               格式：像素值              如  200</span></span><br><span class=\"line\">        <span class=\"string\">m           :</span> <span class=\"string\">''</span>   <span class=\"comment\">//外边距尺寸               格式：如上</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//获取二维码图片</span></span><br><span class=\"line\"><span class=\"symbol\">    getQrcode:</span>function(divId)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//javascript写法</span></span><br><span class=\"line\">        var divElement = document.getElementById(divId),</span><br><span class=\"line\">            imgHtml    = <span class=\"keyword\">this</span>.setImgHeml(<span class=\"keyword\">this</span>.jsonData);</span><br><span class=\"line\">        divElement.innerHTML = imgHtml;</span><br><span class=\"line\">        <span class=\"comment\">/* //jQuery写法</span></span><br><span class=\"line\"><span class=\"comment\">        var imgHtml    = this.setImgHeml(this.jsonData);</span></span><br><span class=\"line\"><span class=\"comment\">        $(\"#\"+divId).append(imgHtml);*/</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//构造图片</span></span><br><span class=\"line\"><span class=\"symbol\">    setImgHeml:</span>function(jsonData)&#123;</span><br><span class=\"line\">        var imgHtml = <span class=\"string\">\"&lt;img src='http://qr.liantu.com/api.php?\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.content?\"&amp;text=\"+jsonData.content:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.logo?\"&amp;logo=\"+jsonData.logo:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.bgColor?\"&amp;bg=\"+jsonData.bgColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.fgColor?\"&amp;fg=\"+jsonData.fgColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.gcColor?\"&amp;gc=\"+jsonData.gcColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.ptColor?\"&amp;pg=\"+jsonData.ptColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.inptColor?\"&amp;inpt=\"+jsonData.inptColor:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.eLevel?\"&amp;el=\"+jsonData.eLevel:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.w?\"&amp;w=\"+jsonData.w:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += jsonData.m?\"&amp;m=\"+jsonData.m:<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        imgHtml += <span class=\"string\">\"'&gt;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imgHtml;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>调用很简单，只需要通过设置qrCode的jsonData中你需要的属性就可以了，不需要可以不设置</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置内容为当前url路径</span></span><br><span class=\"line\">qrCode.jsonData.content =  <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\"><span class=\"comment\">//设置宽度尺寸</span></span><br><span class=\"line\">qrCode.jsonData.w =  <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置外边框距</span></span><br><span class=\"line\">qrCode.jsonData.m =  <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"comment\">//在id为qrcode的元素下生成二维码图片</span></span><br><span class=\"line\">qrCode.getQrcode(<span class=\"string\">'qrcode'</span>);</span><br></pre></td></tr></table></figure>\n<p>通过这几行设置代码，就可以轻松地生成二维码了.</p>\n","sticky":0},{"title":"GO环境篇-从零开始的Docker环境搭建","date":"2021-11-27T02:33:16.000Z","_content":"\n> 从Dockerfile开始的环境搭建\n\n# 编写dockerfile\n\n## step1 明确dockerfile要做的事：\n\n* 选择环境包，如centos\n* 安装基本软件binutils/vim/gdb/git/wget等\n* 选择golang版本，下载，安装\n* 安装调试工具delve\n\n## step2 把清单编写出来\n\n```\nFROM centos\nRUN yum install binutils -y \\\n    && yum install vim -y \\\n    && yum install gdb -y \\\n    && yum install git -y \\\n    && yum install wget -y\n\nRUN wget https://dl.google.com/go/go1.14.12.linux-amd64.tar.gz  \\\n    && tar -C /usr/local -zxvf go1.14.12.linux-amd64.tar.gz \\\n    && rm /go1.14.12.linux-amd64.tar.gz\n\nENV PATH /usr/local/go/bin:$PATH\nENV GOPATH /home\nENV GOROOT /usr/local/go\nENV GOPROXY goproxy.cn\n\nRUN git clone https://github.com/go-delve/delve \\\n&& cd delve/ \\\n&& go build ./cmd/dlv/ \\\n&& cp ./dlv /usr/local/bin\n```\n\n\n# build镜象\n\n## 给dockerimage想个名字，如go14dev:\n\n```\ndocker build -t go14dev .\n```\n\n## 过程中可能会遇到问题:\n\n* 如`git clone delve`超时，这时可以在外部把delve下载到当前目录，copy进去执行。\n最后一句换成：\n\n```\n#RUN git clone https://github.com/go-delve/delve \\delve/cmd/dlv\nCOPY delve ./delve\nRUN  cd delve/ \\\n&& go build ./cmd/dlv/ \\\n&& cp ./dlv /usr/local/bin\n```\n\n* build dlv报错\n\n```\n > [6/7] RUN go build ./cmd/dlv:\n#10 0.150 qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n```\n\n可以在build命令加上`--platform linux/x86_64`\n\n变成：\n\n```\ndocker build --platform linux/x86_64 -t go14dev .\n```\n\n# run\n\n## 把镜象跑起来\n\n```\ndocker run -it --rm go14dev bash\n```\n\n写个main.go测试一下：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n\n```\n\n```\n$go run main.go\n>hello world\n```\n\n## 把本地文件挂载进去\n\ndocker环境里的文件重启就会消失，所以我们项目一般是挂载上去，加上`-v localpath:dockerpath`\n\n如：\n\n```\ndocker run -v ~/code/web:/data/web  -it  --rm go14dev bash\n```\n\n进入环境后，`ls -lah /data/web`就能看到挂载进去的文件了\n\n\n# 推送镜象到docker.hub.com\n\n## login\n\n```\ndocker login -u {username}\n```\n\n## 打tag:\n\n```\ndocker tag go14dev:latest go14dev\n```\n\n## push\n\n```\ndocker push {username}/go14dev:latest\n```","source":"_posts/golang/docker.md","raw":"title: GO环境篇-从零开始的Docker环境搭建\ndate: 2021-11-27 10:33:16 \ntags: [golang,docker]  \ncategories: golang\n---\n\n> 从Dockerfile开始的环境搭建\n\n# 编写dockerfile\n\n## step1 明确dockerfile要做的事：\n\n* 选择环境包，如centos\n* 安装基本软件binutils/vim/gdb/git/wget等\n* 选择golang版本，下载，安装\n* 安装调试工具delve\n\n## step2 把清单编写出来\n\n```\nFROM centos\nRUN yum install binutils -y \\\n    && yum install vim -y \\\n    && yum install gdb -y \\\n    && yum install git -y \\\n    && yum install wget -y\n\nRUN wget https://dl.google.com/go/go1.14.12.linux-amd64.tar.gz  \\\n    && tar -C /usr/local -zxvf go1.14.12.linux-amd64.tar.gz \\\n    && rm /go1.14.12.linux-amd64.tar.gz\n\nENV PATH /usr/local/go/bin:$PATH\nENV GOPATH /home\nENV GOROOT /usr/local/go\nENV GOPROXY goproxy.cn\n\nRUN git clone https://github.com/go-delve/delve \\\n&& cd delve/ \\\n&& go build ./cmd/dlv/ \\\n&& cp ./dlv /usr/local/bin\n```\n\n\n# build镜象\n\n## 给dockerimage想个名字，如go14dev:\n\n```\ndocker build -t go14dev .\n```\n\n## 过程中可能会遇到问题:\n\n* 如`git clone delve`超时，这时可以在外部把delve下载到当前目录，copy进去执行。\n最后一句换成：\n\n```\n#RUN git clone https://github.com/go-delve/delve \\delve/cmd/dlv\nCOPY delve ./delve\nRUN  cd delve/ \\\n&& go build ./cmd/dlv/ \\\n&& cp ./dlv /usr/local/bin\n```\n\n* build dlv报错\n\n```\n > [6/7] RUN go build ./cmd/dlv:\n#10 0.150 qemu-x86_64: Could not open '/lib64/ld-linux-x86-64.so.2': No such file or directory\n```\n\n可以在build命令加上`--platform linux/x86_64`\n\n变成：\n\n```\ndocker build --platform linux/x86_64 -t go14dev .\n```\n\n# run\n\n## 把镜象跑起来\n\n```\ndocker run -it --rm go14dev bash\n```\n\n写个main.go测试一下：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n\n```\n\n```\n$go run main.go\n>hello world\n```\n\n## 把本地文件挂载进去\n\ndocker环境里的文件重启就会消失，所以我们项目一般是挂载上去，加上`-v localpath:dockerpath`\n\n如：\n\n```\ndocker run -v ~/code/web:/data/web  -it  --rm go14dev bash\n```\n\n进入环境后，`ls -lah /data/web`就能看到挂载进去的文件了\n\n\n# 推送镜象到docker.hub.com\n\n## login\n\n```\ndocker login -u {username}\n```\n\n## 打tag:\n\n```\ndocker tag go14dev:latest go14dev\n```\n\n## push\n\n```\ndocker push {username}/go14dev:latest\n```","slug":"golang/docker","published":1,"updated":"2021-11-27T10:39:58.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p0000oi9sk6s174of1","content":"<blockquote>\n<p>从Dockerfile开始的环境搭建</p>\n</blockquote>\n<h1 id=\"u7F16_u5199dockerfile\"><a href=\"#u7F16_u5199dockerfile\" class=\"headerlink\" title=\"编写dockerfile\"></a>编写dockerfile</h1><h2 id=\"step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A\"><a href=\"#step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A\" class=\"headerlink\" title=\"step1 明确dockerfile要做的事：\"></a>step1 明确dockerfile要做的事：</h2><ul>\n<li>选择环境包，如centos</li>\n<li>安装基本软件binutils/vim/gdb/git/wget等</li>\n<li>选择golang版本，下载，安装</li>\n<li>安装调试工具delve</li>\n</ul>\n<h2 id=\"step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765\"><a href=\"#step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765\" class=\"headerlink\" title=\"step2 把清单编写出来\"></a>step2 把清单编写出来</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN yum <span class=\"keyword\">install</span> binutils -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> vim -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> gdb -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> git -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> wget -y</span><br><span class=\"line\"></span><br><span class=\"line\">RUN wget https://dl.google.com/<span class=\"keyword\">go</span>/go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz  \\</span><br><span class=\"line\">    &amp;&amp; tar -C /usr/<span class=\"keyword\">local</span> -zxvf go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm /go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">ENV <span class=\"keyword\">PATH</span> /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">go</span>/<span class=\"keyword\">bin</span>:$<span class=\"keyword\">PATH</span></span><br><span class=\"line\">ENV GOPATH /home</span><br><span class=\"line\">ENV GOROOT /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">go</span></span><br><span class=\"line\">ENV GOPROXY goproxy.cn</span><br><span class=\"line\"></span><br><span class=\"line\">RUN git <span class=\"keyword\">clone</span> https://github.com/<span class=\"keyword\">go</span>-delve/delve \\</span><br><span class=\"line\">&amp;&amp; cd delve/ \\</span><br><span class=\"line\">&amp;&amp; <span class=\"keyword\">go</span> <span class=\"keyword\">build</span> ./cmd/dlv/ \\</span><br><span class=\"line\">&amp;&amp; cp ./dlv /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">bin</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"build_u955C_u8C61\"><a href=\"#build_u955C_u8C61\" class=\"headerlink\" title=\"build镜象\"></a>build镜象</h1><h2 id=\"u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A\"><a href=\"#u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A\" class=\"headerlink\" title=\"给dockerimage想个名字，如go14dev:\"></a>给dockerimage想个名字，如go14dev:</h2><figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">docker</span> <span class=\"keyword\">build </span>-t go14dev .</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A\"><a href=\"#u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A\" class=\"headerlink\" title=\"过程中可能会遇到问题:\"></a>过程中可能会遇到问题:</h2><ul>\n<li>如<code>git clone delve</code>超时，这时可以在外部把delve下载到当前目录，copy进去执行。<br>最后一句换成：</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#RUN git clone https://github.com/go-delve/delve \\delve/cmd/dlv</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> delve ./delve</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">cd</span> delve/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; go build ./cmd/dlv/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; cp ./dlv /usr/<span class=\"built_in\">local</span>/bin</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>build dlv报错</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &gt; [<span class=\"number\">6</span>/<span class=\"number\">7</span>] RUN <span class=\"keyword\">go</span> build ./cmd/<span class=\"keyword\">dl</span><span class=\"variable\">v:</span></span><br><span class=\"line\">#<span class=\"number\">10</span> <span class=\"number\">0.150</span> qemu-x86_64: Could not <span class=\"keyword\">open</span> <span class=\"string\">'/lib64/ld-linux-x86-64.so.2'</span>: No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory</span><br></pre></td></tr></table></figure>\n<p>可以在build命令加上<code>--platform linux/x86_64</code></p>\n<p>变成：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build <span class=\"comment\">--platform linux/x86_64 -t go14dev .</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h1><h2 id=\"u628A_u955C_u8C61_u8DD1_u8D77_u6765\"><a href=\"#u628A_u955C_u8C61_u8DD1_u8D77_u6765\" class=\"headerlink\" title=\"把镜象跑起来\"></a>把镜象跑起来</h2><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -<span class=\"keyword\">it</span> <span class=\"comment\">--rm go14dev bash</span></span><br></pre></td></tr></table></figure>\n<p>写个main.go测试一下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> <span class=\"builtin-name\">run</span> main.go</span><br><span class=\"line\">&gt;hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB\"><a href=\"#u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB\" class=\"headerlink\" title=\"把本地文件挂载进去\"></a>把本地文件挂载进去</h2><p>docker环境里的文件重启就会消失，所以我们项目一般是挂载上去，加上<code>-v localpath:dockerpath</code></p>\n<p>如：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v ~<span class=\"regexp\">/code/web</span><span class=\"symbol\">:/data/web</span>  -it  --rm go14dev bash</span><br></pre></td></tr></table></figure>\n<p>进入环境后，<code>ls -lah /data/web</code>就能看到挂载进去的文件了</p>\n<h1 id=\"u63A8_u9001_u955C_u8C61_u5230docker-hub-com\"><a href=\"#u63A8_u9001_u955C_u8C61_u5230docker-hub-com\" class=\"headerlink\" title=\"推送镜象到docker.hub.com\"></a>推送镜象到docker.hub.com</h1><h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker login -<span class=\"class\">u </span>&#123;username&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6253tag_3A\"><a href=\"#u6253tag_3A\" class=\"headerlink\" title=\"打tag:\"></a>打tag:</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> <span class=\"title\">go14dev</span>:latest go14dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h2><figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">docker</span> <span class=\"keyword\">push </span>&#123;username&#125;/go14dev:latest</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从Dockerfile开始的环境搭建</p>\n</blockquote>\n<h1 id=\"u7F16_u5199dockerfile\"><a href=\"#u7F16_u5199dockerfile\" class=\"headerlink\" title=\"编写dockerfile\"></a>编写dockerfile</h1><h2 id=\"step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A\"><a href=\"#step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A\" class=\"headerlink\" title=\"step1 明确dockerfile要做的事：\"></a>step1 明确dockerfile要做的事：</h2><ul>\n<li>选择环境包，如centos</li>\n<li>安装基本软件binutils/vim/gdb/git/wget等</li>\n<li>选择golang版本，下载，安装</li>\n<li>安装调试工具delve</li>\n</ul>\n<h2 id=\"step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765\"><a href=\"#step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765\" class=\"headerlink\" title=\"step2 把清单编写出来\"></a>step2 把清单编写出来</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">RUN yum <span class=\"keyword\">install</span> binutils -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> vim -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> gdb -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> git -y \\</span><br><span class=\"line\">    &amp;&amp; yum <span class=\"keyword\">install</span> wget -y</span><br><span class=\"line\"></span><br><span class=\"line\">RUN wget https://dl.google.com/<span class=\"keyword\">go</span>/go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz  \\</span><br><span class=\"line\">    &amp;&amp; tar -C /usr/<span class=\"keyword\">local</span> -zxvf go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz \\</span><br><span class=\"line\">    &amp;&amp; rm /go1<span class=\"number\">.14</span><span class=\"number\">.12</span>.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">ENV <span class=\"keyword\">PATH</span> /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">go</span>/<span class=\"keyword\">bin</span>:$<span class=\"keyword\">PATH</span></span><br><span class=\"line\">ENV GOPATH /home</span><br><span class=\"line\">ENV GOROOT /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">go</span></span><br><span class=\"line\">ENV GOPROXY goproxy.cn</span><br><span class=\"line\"></span><br><span class=\"line\">RUN git <span class=\"keyword\">clone</span> https://github.com/<span class=\"keyword\">go</span>-delve/delve \\</span><br><span class=\"line\">&amp;&amp; cd delve/ \\</span><br><span class=\"line\">&amp;&amp; <span class=\"keyword\">go</span> <span class=\"keyword\">build</span> ./cmd/dlv/ \\</span><br><span class=\"line\">&amp;&amp; cp ./dlv /usr/<span class=\"keyword\">local</span>/<span class=\"keyword\">bin</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"build_u955C_u8C61\"><a href=\"#build_u955C_u8C61\" class=\"headerlink\" title=\"build镜象\"></a>build镜象</h1><h2 id=\"u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A\"><a href=\"#u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A\" class=\"headerlink\" title=\"给dockerimage想个名字，如go14dev:\"></a>给dockerimage想个名字，如go14dev:</h2><figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">docker</span> <span class=\"keyword\">build </span>-t go14dev .</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A\"><a href=\"#u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A\" class=\"headerlink\" title=\"过程中可能会遇到问题:\"></a>过程中可能会遇到问题:</h2><ul>\n<li>如<code>git clone delve</code>超时，这时可以在外部把delve下载到当前目录，copy进去执行。<br>最后一句换成：</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#RUN git clone https://github.com/go-delve/delve \\delve/cmd/dlv</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> delve ./delve</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">  <span class=\"built_in\">cd</span> delve/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; go build ./cmd/dlv/ \\</span></span><br><span class=\"line\"><span class=\"bash\">&amp;&amp; cp ./dlv /usr/<span class=\"built_in\">local</span>/bin</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>build dlv报错</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &gt; [<span class=\"number\">6</span>/<span class=\"number\">7</span>] RUN <span class=\"keyword\">go</span> build ./cmd/<span class=\"keyword\">dl</span><span class=\"variable\">v:</span></span><br><span class=\"line\">#<span class=\"number\">10</span> <span class=\"number\">0.150</span> qemu-x86_64: Could not <span class=\"keyword\">open</span> <span class=\"string\">'/lib64/ld-linux-x86-64.so.2'</span>: No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory</span><br></pre></td></tr></table></figure>\n<p>可以在build命令加上<code>--platform linux/x86_64</code></p>\n<p>变成：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build <span class=\"comment\">--platform linux/x86_64 -t go14dev .</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h1><h2 id=\"u628A_u955C_u8C61_u8DD1_u8D77_u6765\"><a href=\"#u628A_u955C_u8C61_u8DD1_u8D77_u6765\" class=\"headerlink\" title=\"把镜象跑起来\"></a>把镜象跑起来</h2><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -<span class=\"keyword\">it</span> <span class=\"comment\">--rm go14dev bash</span></span><br></pre></td></tr></table></figure>\n<p>写个main.go测试一下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> <span class=\"builtin-name\">run</span> main.go</span><br><span class=\"line\">&gt;hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB\"><a href=\"#u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB\" class=\"headerlink\" title=\"把本地文件挂载进去\"></a>把本地文件挂载进去</h2><p>docker环境里的文件重启就会消失，所以我们项目一般是挂载上去，加上<code>-v localpath:dockerpath</code></p>\n<p>如：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -v ~<span class=\"regexp\">/code/web</span><span class=\"symbol\">:/data/web</span>  -it  --rm go14dev bash</span><br></pre></td></tr></table></figure>\n<p>进入环境后，<code>ls -lah /data/web</code>就能看到挂载进去的文件了</p>\n<h1 id=\"u63A8_u9001_u955C_u8C61_u5230docker-hub-com\"><a href=\"#u63A8_u9001_u955C_u8C61_u5230docker-hub-com\" class=\"headerlink\" title=\"推送镜象到docker.hub.com\"></a>推送镜象到docker.hub.com</h1><h2 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker login -<span class=\"class\">u </span>&#123;username&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6253tag_3A\"><a href=\"#u6253tag_3A\" class=\"headerlink\" title=\"打tag:\"></a>打tag:</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"keyword\">tag</span> <span class=\"title\">go14dev</span>:latest go14dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h2><figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">docker</span> <span class=\"keyword\">push </span>&#123;username&#125;/go14dev:latest</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"linux-curl","date":"2016-04-10T14:26:50.000Z","_content":"\n>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n\n## 获取url内容\n\n```\n\t$ curl url\n```\n\n## 保存内容\n\n```\n\t$ curl -o filename url\n\t$ curl url >> filename\n```\n\n## 显示下载进度条`-#`\n\n```\n\t$ curl -# -o filename url\n```\n\n## 获取response header\n\n```\n\t$ curl -i url\n```\n\n## POST数据\n\n```\n\t$ curl -d \"key1=val1&key2=val2\" url\n```\n\n## PUT文件\n\n```\n\t$ curl -F \"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\" \\\n\t http://local.creed.com/curl\n```\n\n## UserAgent\n\n```\n\t$ curl -A \"USER AGENT\" URL\n```\n\n## COOKIE\n\nCookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：\n\n```\n\t$ curl -b stored_cookies_in_file \\\n\thttp://local.creed.com\n```\n\n可以通过请求登陆接口保存cookie文件：\n\n```\n\t$ curl -c stored_cookies_in_file \\\n\t-d  \"user=username&password=password\" \\\n\thttp://local.creed.com/login\n```\n\n## REFERER\n\n```\n\t$ curl -e http://www.baidu.com http://local.creed.com/curl\n```\n\n## 代理\n\n```\n\t$ curl -x ip:port http://local.creed.com/curl\n\n```\n\n## 伪造Ip\n\n仅限于用X-FORWARDED-FOR获取IP的地址\n\n```\n\t$ curl -H \"X-FORWARDED-FOR:202.103.229.11\"\\\n\t -H \"CLIENT-IP:202.103.229.11\"\\\n\t \"http://local.creed.com/curl\"\n```","source":"_posts/linux/linux-curl.md","raw":"title: linux-curl\ndate: 2016-04-10 22:26:50\ntags: linux\ncategories: linux\n\n---\n\n>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n\n## 获取url内容\n\n```\n\t$ curl url\n```\n\n## 保存内容\n\n```\n\t$ curl -o filename url\n\t$ curl url >> filename\n```\n\n## 显示下载进度条`-#`\n\n```\n\t$ curl -# -o filename url\n```\n\n## 获取response header\n\n```\n\t$ curl -i url\n```\n\n## POST数据\n\n```\n\t$ curl -d \"key1=val1&key2=val2\" url\n```\n\n## PUT文件\n\n```\n\t$ curl -F \"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\" \\\n\t http://local.creed.com/curl\n```\n\n## UserAgent\n\n```\n\t$ curl -A \"USER AGENT\" URL\n```\n\n## COOKIE\n\nCookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：\n\n```\n\t$ curl -b stored_cookies_in_file \\\n\thttp://local.creed.com\n```\n\n可以通过请求登陆接口保存cookie文件：\n\n```\n\t$ curl -c stored_cookies_in_file \\\n\t-d  \"user=username&password=password\" \\\n\thttp://local.creed.com/login\n```\n\n## REFERER\n\n```\n\t$ curl -e http://www.baidu.com http://local.creed.com/curl\n```\n\n## 代理\n\n```\n\t$ curl -x ip:port http://local.creed.com/curl\n\n```\n\n## 伪造Ip\n\n仅限于用X-FORWARDED-FOR获取IP的地址\n\n```\n\t$ curl -H \"X-FORWARDED-FOR:202.103.229.11\"\\\n\t -H \"CLIENT-IP:202.103.229.11\"\\\n\t \"http://local.creed.com/curl\"\n```","slug":"linux/linux-curl","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p0000si9skq1xbi9ol","content":"<blockquote>\n<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p>\n</blockquote>\n<h2 id=\"u83B7_u53D6url_u5185_u5BB9\"><a href=\"#u83B7_u53D6url_u5185_u5BB9\" class=\"headerlink\" title=\"获取url内容\"></a>获取url内容</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl url</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FDD_u5B58_u5185_u5BB9\"><a href=\"#u4FDD_u5B58_u5185_u5BB9\" class=\"headerlink\" title=\"保存内容\"></a>保存内容</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -o filename url</span><br><span class=\"line\"><span class=\"variable\">$ </span>curl url &gt;&gt; filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23\"><a href=\"#u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23\" class=\"headerlink\" title=\"显示下载进度条-#\"></a>显示下载进度条<code>-#</code></h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -<span class=\"comment\"># -o filename url</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6response_header\"><a href=\"#u83B7_u53D6response_header\" class=\"headerlink\" title=\"获取response header\"></a>获取response header</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -i url</span><br></pre></td></tr></table></figure>\n<h2 id=\"POST_u6570_u636E\"><a href=\"#POST_u6570_u636E\" class=\"headerlink\" title=\"POST数据\"></a>POST数据</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -d <span class=\"string\">\"key1=val1&amp;key2=val2\"</span> url</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUT_u6587_u4EF6\"><a href=\"#PUT_u6587_u4EF6\" class=\"headerlink\" title=\"PUT文件\"></a>PUT文件</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -F <span class=\"string\">\"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\"</span> \\</span><br><span class=\"line\"><span class=\"symbol\"> http:</span><span class=\"comment\">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"UserAgent\"><a href=\"#UserAgent\" class=\"headerlink\" title=\"UserAgent\"></a>UserAgent</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -A <span class=\"string\">\"USER AGENT\"</span> URL</span><br></pre></td></tr></table></figure>\n<h2 id=\"COOKIE\"><a href=\"#COOKIE\" class=\"headerlink\" title=\"COOKIE\"></a>COOKIE</h2><p>Cookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -b stored_cookies_in_file \\</span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//local.creed.com</span></span><br></pre></td></tr></table></figure>\n<p>可以通过请求登陆接口保存cookie文件：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -c stored_cookies_in_file \\</span><br><span class=\"line\">-d  <span class=\"string\">\"user=username&amp;password=password\"</span> \\</span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//local.creed.com/login</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"REFERER\"><a href=\"#REFERER\" class=\"headerlink\" title=\"REFERER\"></a>REFERER</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -e <span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.baidu.com http:/</span><span class=\"regexp\">/local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4EE3_u7406\"><a href=\"#u4EE3_u7406\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -x <span class=\"string\">ip:</span>port <span class=\"string\">http:</span><span class=\"comment\">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F2A_u9020Ip\"><a href=\"#u4F2A_u9020Ip\" class=\"headerlink\" title=\"伪造Ip\"></a>伪造Ip</h2><p>仅限于用X-FORWARDED-FOR获取IP的地址</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -H <span class=\"string\">\"X-FORWARDED-FOR:202.103.229.11\"</span><span class=\"string\">\\</span></span><br><span class=\"line\"> -H <span class=\"string\">\"CLIENT-IP:202.103.229.11\"</span><span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"string\">\"http://local.creed.com/curl\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p>\n</blockquote>\n<h2 id=\"u83B7_u53D6url_u5185_u5BB9\"><a href=\"#u83B7_u53D6url_u5185_u5BB9\" class=\"headerlink\" title=\"获取url内容\"></a>获取url内容</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl url</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FDD_u5B58_u5185_u5BB9\"><a href=\"#u4FDD_u5B58_u5185_u5BB9\" class=\"headerlink\" title=\"保存内容\"></a>保存内容</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -o filename url</span><br><span class=\"line\"><span class=\"variable\">$ </span>curl url &gt;&gt; filename</span><br></pre></td></tr></table></figure>\n<h2 id=\"u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23\"><a href=\"#u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23\" class=\"headerlink\" title=\"显示下载进度条-#\"></a>显示下载进度条<code>-#</code></h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -<span class=\"comment\"># -o filename url</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6response_header\"><a href=\"#u83B7_u53D6response_header\" class=\"headerlink\" title=\"获取response header\"></a>获取response header</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -i url</span><br></pre></td></tr></table></figure>\n<h2 id=\"POST_u6570_u636E\"><a href=\"#POST_u6570_u636E\" class=\"headerlink\" title=\"POST数据\"></a>POST数据</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -d <span class=\"string\">\"key1=val1&amp;key2=val2\"</span> url</span><br></pre></td></tr></table></figure>\n<h2 id=\"PUT_u6587_u4EF6\"><a href=\"#PUT_u6587_u4EF6\" class=\"headerlink\" title=\"PUT文件\"></a>PUT文件</h2><figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -F <span class=\"string\">\"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg\"</span> \\</span><br><span class=\"line\"><span class=\"symbol\"> http:</span><span class=\"comment\">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"UserAgent\"><a href=\"#UserAgent\" class=\"headerlink\" title=\"UserAgent\"></a>UserAgent</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -A <span class=\"string\">\"USER AGENT\"</span> URL</span><br></pre></td></tr></table></figure>\n<h2 id=\"COOKIE\"><a href=\"#COOKIE\" class=\"headerlink\" title=\"COOKIE\"></a>COOKIE</h2><p>Cookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -b stored_cookies_in_file \\</span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//local.creed.com</span></span><br></pre></td></tr></table></figure>\n<p>可以通过请求登陆接口保存cookie文件：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -c stored_cookies_in_file \\</span><br><span class=\"line\">-d  <span class=\"string\">\"user=username&amp;password=password\"</span> \\</span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//local.creed.com/login</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"REFERER\"><a href=\"#REFERER\" class=\"headerlink\" title=\"REFERER\"></a>REFERER</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>curl -e <span class=\"symbol\">http:</span>/<span class=\"regexp\">/www.baidu.com http:/</span><span class=\"regexp\">/local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4EE3_u7406\"><a href=\"#u4EE3_u7406\" class=\"headerlink\" title=\"代理\"></a>代理</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -x <span class=\"string\">ip:</span>port <span class=\"string\">http:</span><span class=\"comment\">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F2A_u9020Ip\"><a href=\"#u4F2A_u9020Ip\" class=\"headerlink\" title=\"伪造Ip\"></a>伪造Ip</h2><p>仅限于用X-FORWARDED-FOR获取IP的地址</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ curl -H <span class=\"string\">\"X-FORWARDED-FOR:202.103.229.11\"</span><span class=\"string\">\\</span></span><br><span class=\"line\"> -H <span class=\"string\">\"CLIENT-IP:202.103.229.11\"</span><span class=\"string\">\\</span></span><br><span class=\"line\"> <span class=\"string\">\"http://local.creed.com/curl\"</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"linux-find","date":"2016-07-04T07:02:12.000Z","_content":"\n>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。\n\n## 语法\n\n```\n\t$ find path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n下边列举常用的一些条件\n\n## path\n\n查找单个目录：\n\n```\n\t$ find /tmp   \n```\n\n查找多个目录:\n\n```\n\t$ find /tmp /opt /etc\n```\n\n## option\n\n### 按档案名\n\n查找后缀为`.md` 的档案\n\n```\n\t$ find path -name \"*.md\"\n```\n\n查找后缀为`.md`的档案，并不区分大小写(可以是`.MD`,`.Md`,`.mD`)\n\n```\n\t$ find path -iname \"*.md\"\n```\n\n### 按档案类型\n\n文件夹\n\n```\n\t$ find path -type d\n```\n\n符号连接\n\n```\n\t$ find path -type l\n```\n\n一般档案\n\n```\n\t$ find path -type f\n```\n\n字形装置\n\n```\n\t$ find path -type c\n```\n\n区块装置\n\n```\n\t$ find path -type b\n```\n\n具名贮列\n\n```\n\t$ find path -type p\n```\n\nsocket\n\n```\n\t$ find path -type s\n```\n\n### 时间\n\n类型\n\n* a (access) 访问时间\n* c (change) 状态改变时间(如修改,chmod,chown)\n* m (modification) 修改时间\n\n单位\n\n* min 以分钟为单位  \n* time 以天为单位  \n\n量\n\n* -n  在n单位时间内  \n* +n  在n单位时间前  \n* n   在n单位时间中  \n\n\n在n分钟前被访问|修改|改变过的档案\n\n```\n\t$ find path -amin +n\n\t$ find path -mmin +n\n\t$ find path -cmin +n\n```\n\n在n分钟内被访问|修改|改变过的档案\n\n```\n\t$ find path -amin -n\n\t$ find path -mmin -n\n\t$ find path -cmin -n\n```\n\n在前n分钟被访问|修改|改变过的档案\n\n```\n\t$ find path -amin n\n\t$ find path -mmin n\n\t$ find path -cmin n\n```\n\n\n最近[n天内|n天前|前n天]被访问|修改|改变过的档案\n\n```\n\t$ find path -atime [-n|+n|n]\n\t$ find path -mtime [-n|+n|n]\n\t$ find path -ctime [-n|+n|n]\n```\n\n比file档案更晚被访问|修改|改变过的档案\n\n```\n\t$ find path -anewer file\n\t$ find path -mnewer file\n\t$ find path -cnewer file\n```\n\n### 路径\n\n路径中含有path\n\n```\n\t$ find path -path \"*path*\"\n```\n\n路径含有path并不区分大小写\n\n```\n\t$ find path -ipath \"*PATH*\"\n```\n\n### 大小\n\n查找大于nk,小于nk的档案\n\n```\n\t$ find path -size +nk\n\t$ find path -size -nk\n```\n\n空档案\n\n```\n\t$ find path -empty\n```\n\n### 权限\n\nmode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 \n\n* -mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）\n* +mode 3种用户的权限只要有一个对上，则成功（如644能对622等）\n* mode 3种用户的权限都要跟mode准确对上才成功（如222对222）\n\n```\n\t$ find path -perm -mode\n\t$ find path -perm +mode\n\t$ find path -perm mode\n```\n\n## exec\n\n需要对搜索结果执行shell命令则用`-exec`,如\n\n```\n\t$ find / -type f -exec ls -lah {} \\;\n```\n\n## example\n\n把小于2k的文件搬到/tmp目录\n\n```\n\t$ find path -size -2k -exec mv {} /tmp \\;\n```\n\n找出档案名含有'abc' 的普通档案\n\n```\n\t$ find path -name '*abc*' -type f \n\t$ find -type f | grep abc\n```","source":"_posts/linux/linux-find.md","raw":"title: linux-find\ndate: 2016-07-04 15:02:12\ntags: linux\ncategories: linux\n\n---\n\n>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。\n\n## 语法\n\n```\n\t$ find path -option [ -print ] [ -exec -ok command ] {} \\;\n```\n\n下边列举常用的一些条件\n\n## path\n\n查找单个目录：\n\n```\n\t$ find /tmp   \n```\n\n查找多个目录:\n\n```\n\t$ find /tmp /opt /etc\n```\n\n## option\n\n### 按档案名\n\n查找后缀为`.md` 的档案\n\n```\n\t$ find path -name \"*.md\"\n```\n\n查找后缀为`.md`的档案，并不区分大小写(可以是`.MD`,`.Md`,`.mD`)\n\n```\n\t$ find path -iname \"*.md\"\n```\n\n### 按档案类型\n\n文件夹\n\n```\n\t$ find path -type d\n```\n\n符号连接\n\n```\n\t$ find path -type l\n```\n\n一般档案\n\n```\n\t$ find path -type f\n```\n\n字形装置\n\n```\n\t$ find path -type c\n```\n\n区块装置\n\n```\n\t$ find path -type b\n```\n\n具名贮列\n\n```\n\t$ find path -type p\n```\n\nsocket\n\n```\n\t$ find path -type s\n```\n\n### 时间\n\n类型\n\n* a (access) 访问时间\n* c (change) 状态改变时间(如修改,chmod,chown)\n* m (modification) 修改时间\n\n单位\n\n* min 以分钟为单位  \n* time 以天为单位  \n\n量\n\n* -n  在n单位时间内  \n* +n  在n单位时间前  \n* n   在n单位时间中  \n\n\n在n分钟前被访问|修改|改变过的档案\n\n```\n\t$ find path -amin +n\n\t$ find path -mmin +n\n\t$ find path -cmin +n\n```\n\n在n分钟内被访问|修改|改变过的档案\n\n```\n\t$ find path -amin -n\n\t$ find path -mmin -n\n\t$ find path -cmin -n\n```\n\n在前n分钟被访问|修改|改变过的档案\n\n```\n\t$ find path -amin n\n\t$ find path -mmin n\n\t$ find path -cmin n\n```\n\n\n最近[n天内|n天前|前n天]被访问|修改|改变过的档案\n\n```\n\t$ find path -atime [-n|+n|n]\n\t$ find path -mtime [-n|+n|n]\n\t$ find path -ctime [-n|+n|n]\n```\n\n比file档案更晚被访问|修改|改变过的档案\n\n```\n\t$ find path -anewer file\n\t$ find path -mnewer file\n\t$ find path -cnewer file\n```\n\n### 路径\n\n路径中含有path\n\n```\n\t$ find path -path \"*path*\"\n```\n\n路径含有path并不区分大小写\n\n```\n\t$ find path -ipath \"*PATH*\"\n```\n\n### 大小\n\n查找大于nk,小于nk的档案\n\n```\n\t$ find path -size +nk\n\t$ find path -size -nk\n```\n\n空档案\n\n```\n\t$ find path -empty\n```\n\n### 权限\n\nmode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 \n\n* -mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）\n* +mode 3种用户的权限只要有一个对上，则成功（如644能对622等）\n* mode 3种用户的权限都要跟mode准确对上才成功（如222对222）\n\n```\n\t$ find path -perm -mode\n\t$ find path -perm +mode\n\t$ find path -perm mode\n```\n\n## exec\n\n需要对搜索结果执行shell命令则用`-exec`,如\n\n```\n\t$ find / -type f -exec ls -lah {} \\;\n```\n\n## example\n\n把小于2k的文件搬到/tmp目录\n\n```\n\t$ find path -size -2k -exec mv {} /tmp \\;\n```\n\n找出档案名含有'abc' 的普通档案\n\n```\n\t$ find path -name '*abc*' -type f \n\t$ find -type f | grep abc\n```","slug":"linux/linux-find","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p1000ti9skuil9jvpp","content":"<blockquote>\n<p>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。</p>\n</blockquote>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">find</span> path -option [ -<span class=\"builtin-name\">print</span> ] [ -exec -ok command ] &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>下边列举常用的一些条件</p>\n<h2 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h2><p>查找单个目录：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">find</span> /tmp</span><br></pre></td></tr></table></figure>\n<p>查找多个目录:</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find <span class=\"string\">/tmp</span> <span class=\"string\">/opt</span> <span class=\"string\">/etc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h2><h3 id=\"u6309_u6863_u6848_u540D\"><a href=\"#u6309_u6863_u6848_u540D\" class=\"headerlink\" title=\"按档案名\"></a>按档案名</h3><p>查找后缀为<code>.md</code> 的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -name \"*.<span class=\"built_in\">md</span>\"</span><br></pre></td></tr></table></figure>\n<p>查找后缀为<code>.md</code>的档案，并不区分大小写(可以是<code>.MD</code>,<code>.Md</code>,<code>.mD</code>)</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -iname \"*.<span class=\"built_in\">md</span>\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"u6309_u6863_u6848_u7C7B_u578B\"><a href=\"#u6309_u6863_u6848_u7C7B_u578B\" class=\"headerlink\" title=\"按档案类型\"></a>按档案类型</h3><p>文件夹</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> d</span><br></pre></td></tr></table></figure>\n<p>符号连接</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> l</span><br></pre></td></tr></table></figure>\n<p>一般档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> f</span><br></pre></td></tr></table></figure>\n<p>字形装置</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> c</span><br></pre></td></tr></table></figure>\n<p>区块装置</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> b</span><br></pre></td></tr></table></figure>\n<p>具名贮列</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> p</span><br></pre></td></tr></table></figure>\n<p>socket</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> s</span><br></pre></td></tr></table></figure>\n<h3 id=\"u65F6_u95F4\"><a href=\"#u65F6_u95F4\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>类型</p>\n<ul>\n<li>a (access) 访问时间</li>\n<li>c (change) 状态改变时间(如修改,chmod,chown)</li>\n<li>m (modification) 修改时间</li>\n</ul>\n<p>单位</p>\n<ul>\n<li>min 以分钟为单位  </li>\n<li>time 以天为单位  </li>\n</ul>\n<p>量</p>\n<ul>\n<li>-n  在n单位时间内  </li>\n<li>+n  在n单位时间前  </li>\n<li>n   在n单位时间中  </li>\n</ul>\n<p>在n分钟前被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin +n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin +n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin +n</span><br></pre></td></tr></table></figure>\n<p>在n分钟内被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin -n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin -n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin -n</span><br></pre></td></tr></table></figure>\n<p>在前n分钟被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin n</span><br></pre></td></tr></table></figure>\n<p>最近[n天内|n天前|前n天]被访问|修改|改变过的档案</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -atime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -mtime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -ctime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br></pre></td></tr></table></figure>\n<p>比file档案更晚被访问|修改|改变过的档案</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">find</span> path -anewer <span class=\"keyword\">file</span></span><br><span class=\"line\">$ <span class=\"keyword\">find</span> path -mnewer <span class=\"keyword\">file</span></span><br><span class=\"line\">$ <span class=\"keyword\">find</span> path -<span class=\"keyword\">cnewer</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u8DEF_u5F84\"><a href=\"#u8DEF_u5F84\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>路径中含有path</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">path</span> \"*<span class=\"built_in\">path</span>*\"</span><br></pre></td></tr></table></figure>\n<p>路径含有path并不区分大小写</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -ipath \"*<span class=\"built_in\">PATH</span>*\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"u5927_u5C0F\"><a href=\"#u5927_u5C0F\" class=\"headerlink\" title=\"大小\"></a>大小</h3><p>查找大于nk,小于nk的档案</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> +nk</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> -nk</span><br></pre></td></tr></table></figure>\n<p>空档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -empty</span><br></pre></td></tr></table></figure>\n<h3 id=\"u6743_u9650\"><a href=\"#u6743_u9650\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>mode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 </p>\n<ul>\n<li>-mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）</li>\n<li>+mode 3种用户的权限只要有一个对上，则成功（如644能对622等）</li>\n<li>mode 3种用户的权限都要跟mode准确对上才成功（如222对222）</li>\n</ul>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm -<span class=\"built_in\">mode</span></span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm +<span class=\"built_in\">mode</span></span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm <span class=\"built_in\">mode</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h2><p>需要对搜索结果执行shell命令则用<code>-exec</code>,如</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find / -<span class=\"keyword\">type</span> f -exec ls -lah &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h2><p>把小于2k的文件搬到/tmp目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> <span class=\"number\">-2</span>k -exec mv &#123;&#125; /tmp \\;</span><br></pre></td></tr></table></figure>\n<p>找出档案名含有’abc’ 的普通档案</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">find</span> path -name <span class=\"string\">'*abc*'</span> -<span class=\"built_in\">type</span> <span class=\"keyword\">f</span> </span><br><span class=\"line\">$ <span class=\"keyword\">find</span> -<span class=\"built_in\">type</span> <span class=\"keyword\">f</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">abc</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。</p>\n</blockquote>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">find</span> path -option [ -<span class=\"builtin-name\">print</span> ] [ -exec -ok command ] &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<p>下边列举常用的一些条件</p>\n<h2 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h2><p>查找单个目录：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">find</span> /tmp</span><br></pre></td></tr></table></figure>\n<p>查找多个目录:</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find <span class=\"string\">/tmp</span> <span class=\"string\">/opt</span> <span class=\"string\">/etc</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"option\"><a href=\"#option\" class=\"headerlink\" title=\"option\"></a>option</h2><h3 id=\"u6309_u6863_u6848_u540D\"><a href=\"#u6309_u6863_u6848_u540D\" class=\"headerlink\" title=\"按档案名\"></a>按档案名</h3><p>查找后缀为<code>.md</code> 的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -name \"*.<span class=\"built_in\">md</span>\"</span><br></pre></td></tr></table></figure>\n<p>查找后缀为<code>.md</code>的档案，并不区分大小写(可以是<code>.MD</code>,<code>.Md</code>,<code>.mD</code>)</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -iname \"*.<span class=\"built_in\">md</span>\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"u6309_u6863_u6848_u7C7B_u578B\"><a href=\"#u6309_u6863_u6848_u7C7B_u578B\" class=\"headerlink\" title=\"按档案类型\"></a>按档案类型</h3><p>文件夹</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> d</span><br></pre></td></tr></table></figure>\n<p>符号连接</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> l</span><br></pre></td></tr></table></figure>\n<p>一般档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> f</span><br></pre></td></tr></table></figure>\n<p>字形装置</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> c</span><br></pre></td></tr></table></figure>\n<p>区块装置</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> b</span><br></pre></td></tr></table></figure>\n<p>具名贮列</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> p</span><br></pre></td></tr></table></figure>\n<p>socket</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">type</span> s</span><br></pre></td></tr></table></figure>\n<h3 id=\"u65F6_u95F4\"><a href=\"#u65F6_u95F4\" class=\"headerlink\" title=\"时间\"></a>时间</h3><p>类型</p>\n<ul>\n<li>a (access) 访问时间</li>\n<li>c (change) 状态改变时间(如修改,chmod,chown)</li>\n<li>m (modification) 修改时间</li>\n</ul>\n<p>单位</p>\n<ul>\n<li>min 以分钟为单位  </li>\n<li>time 以天为单位  </li>\n</ul>\n<p>量</p>\n<ul>\n<li>-n  在n单位时间内  </li>\n<li>+n  在n单位时间前  </li>\n<li>n   在n单位时间中  </li>\n</ul>\n<p>在n分钟前被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin +n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin +n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin +n</span><br></pre></td></tr></table></figure>\n<p>在n分钟内被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin -n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin -n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin -n</span><br></pre></td></tr></table></figure>\n<p>在前n分钟被访问|修改|改变过的档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -amin n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -mmin n</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -cmin n</span><br></pre></td></tr></table></figure>\n<p>最近[n天内|n天前|前n天]被访问|修改|改变过的档案</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -atime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -mtime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -ctime [-<span class=\"built_in\">n</span>|+<span class=\"built_in\">n</span>|<span class=\"built_in\">n</span>]</span><br></pre></td></tr></table></figure>\n<p>比file档案更晚被访问|修改|改变过的档案</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">find</span> path -anewer <span class=\"keyword\">file</span></span><br><span class=\"line\">$ <span class=\"keyword\">find</span> path -mnewer <span class=\"keyword\">file</span></span><br><span class=\"line\">$ <span class=\"keyword\">find</span> path -<span class=\"keyword\">cnewer</span> <span class=\"keyword\">file</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u8DEF_u5F84\"><a href=\"#u8DEF_u5F84\" class=\"headerlink\" title=\"路径\"></a>路径</h3><p>路径中含有path</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -<span class=\"built_in\">path</span> \"*<span class=\"built_in\">path</span>*\"</span><br></pre></td></tr></table></figure>\n<p>路径含有path并不区分大小写</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -ipath \"*<span class=\"built_in\">PATH</span>*\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"u5927_u5C0F\"><a href=\"#u5927_u5C0F\" class=\"headerlink\" title=\"大小\"></a>大小</h3><p>查找大于nk,小于nk的档案</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> +nk</span><br><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> -nk</span><br></pre></td></tr></table></figure>\n<p>空档案</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -empty</span><br></pre></td></tr></table></figure>\n<h3 id=\"u6743_u9650\"><a href=\"#u6743_u9650\" class=\"headerlink\" title=\"权限\"></a>权限</h3><p>mode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 </p>\n<ul>\n<li>-mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）</li>\n<li>+mode 3种用户的权限只要有一个对上，则成功（如644能对622等）</li>\n<li>mode 3种用户的权限都要跟mode准确对上才成功（如222对222）</li>\n</ul>\n<figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm -<span class=\"built_in\">mode</span></span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm +<span class=\"built_in\">mode</span></span><br><span class=\"line\">$ <span class=\"built_in\">find</span> <span class=\"built_in\">path</span> -perm <span class=\"built_in\">mode</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"exec\"></a>exec</h2><p>需要对搜索结果执行shell命令则用<code>-exec</code>,如</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ find / -<span class=\"keyword\">type</span> f -exec ls -lah &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n<h2 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h2><p>把小于2k的文件搬到/tmp目录</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">find</span> path -<span class=\"built_in\">size</span> <span class=\"number\">-2</span>k -exec mv &#123;&#125; /tmp \\;</span><br></pre></td></tr></table></figure>\n<p>找出档案名含有’abc’ 的普通档案</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">find</span> path -name <span class=\"string\">'*abc*'</span> -<span class=\"built_in\">type</span> <span class=\"keyword\">f</span> </span><br><span class=\"line\">$ <span class=\"keyword\">find</span> -<span class=\"built_in\">type</span> <span class=\"keyword\">f</span> | <span class=\"keyword\">grep</span> <span class=\"keyword\">abc</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"linux-nohup","date":"2016-07-02T09:33:25.000Z","_content":"\n>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程\n\n## 功能\n\nnohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。\n如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 `nohup.out` 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 `$HOME/nohup.out` 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。\n\n## 语法 \n\n```\n\t$ nohup Command [ Arg ... ] [　& ]\n```\n\nexample:\n\n```\n\t$ nohup php test.php &\n\t$ nohup php test.php >~/outFile.out 2>&1 &\n```\n\n* 0 – stdin (standard input)\n* 1 – stdout (standard output)\n* 2 – stderr (standard error)  \n\n2>&1是将标准错误（2）重定向到标准输出（&1），标准输出（&1）再被重定向输入到myout.file文件中。\n\n## 查看任务列表\n\n用`jobs`可以看到正在运行的任务\n\n```\n\t$ jobs                                                                                                                   \n[1]  + running    nohup php test.php > ~/outFile.out 2>&1\n```\n\n## 关闭任务\n\nn为任务号\n\n```\n\t$ fg %n\n```\n\n\n\n","source":"_posts/linux/linux-nohup.md","raw":"title: linux-nohup\ndate: 2016-07-02 17:33:25\ntags: linux\ncategories: linux\n\n---\n\n>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程\n\n## 功能\n\nnohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。\n如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 `nohup.out` 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 `$HOME/nohup.out` 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。\n\n## 语法 \n\n```\n\t$ nohup Command [ Arg ... ] [　& ]\n```\n\nexample:\n\n```\n\t$ nohup php test.php &\n\t$ nohup php test.php >~/outFile.out 2>&1 &\n```\n\n* 0 – stdin (standard input)\n* 1 – stdout (standard output)\n* 2 – stderr (standard error)  \n\n2>&1是将标准错误（2）重定向到标准输出（&1），标准输出（&1）再被重定向输入到myout.file文件中。\n\n## 查看任务列表\n\n用`jobs`可以看到正在运行的任务\n\n```\n\t$ jobs                                                                                                                   \n[1]  + running    nohup php test.php > ~/outFile.out 2>&1\n```\n\n## 关闭任务\n\nn为任务号\n\n```\n\t$ fg %n\n```\n\n\n\n","slug":"linux/linux-nohup","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p1000xi9sk9qlypi00","content":"<blockquote>\n<p>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程</p>\n</blockquote>\n<h2 id=\"u529F_u80FD\"><a href=\"#u529F_u80FD\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。<br>如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 <code>nohup.out</code> 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight inform7\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nohup Command <span class=\"comment\">[ Arg ... ]</span> <span class=\"comment\">[　&amp; ]</span></span><br></pre></td></tr></table></figure>\n<p>example:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nohup php <span class=\"keyword\">test</span>.php &amp;</span><br><span class=\"line\">$ nohup php <span class=\"keyword\">test</span>.php &gt;~/<span class=\"keyword\">outFile</span>.<span class=\"keyword\">out</span> 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>0 – stdin (standard input)</li>\n<li>1 – stdout (standard output)</li>\n<li>2 – stderr (standard error)  </li>\n</ul>\n<p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p>\n<h2 id=\"u67E5_u770B_u4EFB_u52A1_u5217_u8868\"><a href=\"#u67E5_u770B_u4EFB_u52A1_u5217_u8868\" class=\"headerlink\" title=\"查看任务列表\"></a>查看任务列表</h2><p>用<code>jobs</code>可以看到正在运行的任务</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t$ jobs                                                                                                                   </span><br><span class=\"line\">[<span class=\"number\">1</span>]  + running    nohup php test.php &gt; ~/outFile.out <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5173_u95ED_u4EFB_u52A1\"><a href=\"#u5173_u95ED_u4EFB_u52A1\" class=\"headerlink\" title=\"关闭任务\"></a>关闭任务</h2><p>n为任务号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">fg</span> %n</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程</p>\n</blockquote>\n<h2 id=\"u529F_u80FD\"><a href=\"#u529F_u80FD\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。<br>如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 <code>nohup.out</code> 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p>\n<h2 id=\"u8BED_u6CD5\"><a href=\"#u8BED_u6CD5\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight inform7\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nohup Command <span class=\"comment\">[ Arg ... ]</span> <span class=\"comment\">[　&amp; ]</span></span><br></pre></td></tr></table></figure>\n<p>example:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nohup php <span class=\"keyword\">test</span>.php &amp;</span><br><span class=\"line\">$ nohup php <span class=\"keyword\">test</span>.php &gt;~/<span class=\"keyword\">outFile</span>.<span class=\"keyword\">out</span> 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>0 – stdin (standard input)</li>\n<li>1 – stdout (standard output)</li>\n<li>2 – stderr (standard error)  </li>\n</ul>\n<p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p>\n<h2 id=\"u67E5_u770B_u4EFB_u52A1_u5217_u8868\"><a href=\"#u67E5_u770B_u4EFB_u52A1_u5217_u8868\" class=\"headerlink\" title=\"查看任务列表\"></a>查看任务列表</h2><p>用<code>jobs</code>可以看到正在运行的任务</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t$ jobs                                                                                                                   </span><br><span class=\"line\">[<span class=\"number\">1</span>]  + running    nohup php test.php &gt; ~/outFile.out <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5173_u95ED_u4EFB_u52A1\"><a href=\"#u5173_u95ED_u4EFB_u52A1\" class=\"headerlink\" title=\"关闭任务\"></a>关闭任务</h2><p>n为任务号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">fg</span> %n</span></span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"linux-ps","date":"2016-02-06T14:32:53.000Z","_content":"\n>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。\n\n\n## ps进程状态码\n\nps几种主要的状态码是:\n\n* D 不可中断 uninterruptible sleep (usually IO) \n* R 运行 runnable (on run queue) \n* S 睡眠 sleeping \n* T 停止 traced or stopped \n* Z 僵死 a defunct (”zombie”) process\n\n\n## ps列名说明\n\n|列名|说明|\n|---|---|\n|USER|该 process 属于那个使用者账号的|\n|PID |该 process 的号码|\n|%CPU|该 process 使用掉的 CPU 资源百分比|\n|%MEM|该 process 所占用的物理内存百分比|\n|VSZ |该 process 使用掉的虚拟内存量 (Kbytes)|\n|RSS |该 process 占用的固定的内存量 (Kbytes)|\n|TTY |该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。|\n|STAT|该程序目前的状态，主要的状态可以参照上面提到的|\n|START|该 process 被触发启动的时间|\n|TIME |该 process 实际使用 CPU 运作的时间|\n|COMMAND|该程序的实际指令|\n\n## px参数\n\nps常用参数\n\n* -e 显示所有进程\n* -A 所有进程均显示，与-e具有同样效果\n* -a 显示当前终端上所有进程，包括其他用户的进程\n* -u 以用户来筛选进程\n* x 显示没有控制终端的进程\n* r 显示正在运行的进程\n* -f 全格式\n\n还有更多参数可以参考\n\n```\n\t$ man ps\n```\n\n## ps使用示例\n\n### 查看特定用户进程:\n\n`ps -u <用户名>`，如查看root用户的进程\n\n```\n\t$ ps -u root\n```\nresult:\n\n```\n\t UID   PID TTY           TIME CMD\n     0     1 ??        28:43.94 /sbin/launchd\n```\n\n\n### 查看所有进程\n\n```\n $ ps -e\n```\n\nresult:\n\n```\n  PID TTY           TIME CMD\n    1 ??        28:43.16 /sbin/launchd\n```\n\n### 查看全格式的全进程\n\n```\n\t$ ps -ef\n```\nresult:\n\n```\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n    0     1     0   0 24 116  ??        28:42.63 /sbin/launchd\n```\n\n### 查看当前所有进程cpu占用情况\n\n```\n\t$ ps aux \n```\nresult:\n\n```\nUSER      PID   %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\njceee    51422   0.1  0.6  3367032 107344   ??  S    四11下午   1:36.91 /Applications/Robomongo.app/Contents/MacOS/Robomongo\n```\n\n### 根据关键字查找相关进程\n\n`ps aux | grep <进程名>`\n\n```\n\t$ ps aux | grep php-fpm\n```\n\nresult:\n\n```\njceee      53756   0.0  0.0  2493396   3460   ??  S     5:53下午   0:00.02 /usr/local/opt/php56/sbin/php-fpm --fpm-config /usr/local/etc/php/5.6/php-fpm.conf\n```","source":"_posts/linux/linux-ps.md","raw":"title: linux-ps  \ndate: 2016-02-06 22:32:53  \ntags: linux    \ncategories: linux  \n\n---\n\n>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。\n\n\n## ps进程状态码\n\nps几种主要的状态码是:\n\n* D 不可中断 uninterruptible sleep (usually IO) \n* R 运行 runnable (on run queue) \n* S 睡眠 sleeping \n* T 停止 traced or stopped \n* Z 僵死 a defunct (”zombie”) process\n\n\n## ps列名说明\n\n|列名|说明|\n|---|---|\n|USER|该 process 属于那个使用者账号的|\n|PID |该 process 的号码|\n|%CPU|该 process 使用掉的 CPU 资源百分比|\n|%MEM|该 process 所占用的物理内存百分比|\n|VSZ |该 process 使用掉的虚拟内存量 (Kbytes)|\n|RSS |该 process 占用的固定的内存量 (Kbytes)|\n|TTY |该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。|\n|STAT|该程序目前的状态，主要的状态可以参照上面提到的|\n|START|该 process 被触发启动的时间|\n|TIME |该 process 实际使用 CPU 运作的时间|\n|COMMAND|该程序的实际指令|\n\n## px参数\n\nps常用参数\n\n* -e 显示所有进程\n* -A 所有进程均显示，与-e具有同样效果\n* -a 显示当前终端上所有进程，包括其他用户的进程\n* -u 以用户来筛选进程\n* x 显示没有控制终端的进程\n* r 显示正在运行的进程\n* -f 全格式\n\n还有更多参数可以参考\n\n```\n\t$ man ps\n```\n\n## ps使用示例\n\n### 查看特定用户进程:\n\n`ps -u <用户名>`，如查看root用户的进程\n\n```\n\t$ ps -u root\n```\nresult:\n\n```\n\t UID   PID TTY           TIME CMD\n     0     1 ??        28:43.94 /sbin/launchd\n```\n\n\n### 查看所有进程\n\n```\n $ ps -e\n```\n\nresult:\n\n```\n  PID TTY           TIME CMD\n    1 ??        28:43.16 /sbin/launchd\n```\n\n### 查看全格式的全进程\n\n```\n\t$ ps -ef\n```\nresult:\n\n```\n  UID   PID  PPID   C STIME   TTY           TIME CMD\n    0     1     0   0 24 116  ??        28:42.63 /sbin/launchd\n```\n\n### 查看当前所有进程cpu占用情况\n\n```\n\t$ ps aux \n```\nresult:\n\n```\nUSER      PID   %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND\njceee    51422   0.1  0.6  3367032 107344   ??  S    四11下午   1:36.91 /Applications/Robomongo.app/Contents/MacOS/Robomongo\n```\n\n### 根据关键字查找相关进程\n\n`ps aux | grep <进程名>`\n\n```\n\t$ ps aux | grep php-fpm\n```\n\nresult:\n\n```\njceee      53756   0.0  0.0  2493396   3460   ??  S     5:53下午   0:00.02 /usr/local/opt/php56/sbin/php-fpm --fpm-config /usr/local/etc/php/5.6/php-fpm.conf\n```","slug":"linux/linux-ps","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p20010i9skw7ik1zb2","content":"<blockquote>\n<p>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。</p>\n</blockquote>\n<h2 id=\"ps_u8FDB_u7A0B_u72B6_u6001_u7801\"><a href=\"#ps_u8FDB_u7A0B_u72B6_u6001_u7801\" class=\"headerlink\" title=\"ps进程状态码\"></a>ps进程状态码</h2><p>ps几种主要的状态码是:</p>\n<ul>\n<li>D 不可中断 uninterruptible sleep (usually IO) </li>\n<li>R 运行 runnable (on run queue) </li>\n<li>S 睡眠 sleeping </li>\n<li>T 停止 traced or stopped </li>\n<li>Z 僵死 a defunct (”zombie”) process</li>\n</ul>\n<h2 id=\"ps_u5217_u540D_u8BF4_u660E\"><a href=\"#ps_u5217_u540D_u8BF4_u660E\" class=\"headerlink\" title=\"ps列名说明\"></a>ps列名说明</h2><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>该 process 属于那个使用者账号的</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>该 process 的号码</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该 process 使用掉的 CPU 资源百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该 process 所占用的物理内存百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>该 process 使用掉的虚拟内存量 (Kbytes)</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>该 process 占用的固定的内存量 (Kbytes)</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>该程序目前的状态，主要的状态可以参照上面提到的</td>\n</tr>\n<tr>\n<td>START</td>\n<td>该 process 被触发启动的时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>该 process 实际使用 CPU 运作的时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>该程序的实际指令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"px_u53C2_u6570\"><a href=\"#px_u53C2_u6570\" class=\"headerlink\" title=\"px参数\"></a>px参数</h2><p>ps常用参数</p>\n<ul>\n<li>-e 显示所有进程</li>\n<li>-A 所有进程均显示，与-e具有同样效果</li>\n<li>-a 显示当前终端上所有进程，包括其他用户的进程</li>\n<li>-u 以用户来筛选进程</li>\n<li>x 显示没有控制终端的进程</li>\n<li>r 显示正在运行的进程</li>\n<li>-f 全格式</li>\n</ul>\n<p>还有更多参数可以参考</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>man ps</span><br></pre></td></tr></table></figure>\n<h2 id=\"ps_u4F7F_u7528_u793A_u4F8B\"><a href=\"#ps_u4F7F_u7528_u793A_u4F8B\" class=\"headerlink\" title=\"ps使用示例\"></a>ps使用示例</h2><h3 id=\"u67E5_u770B_u7279_u5B9A_u7528_u6237_u8FDB_u7A0B_3A\"><a href=\"#u67E5_u770B_u7279_u5B9A_u7528_u6237_u8FDB_u7A0B_3A\" class=\"headerlink\" title=\"查看特定用户进程:\"></a>查看特定用户进程:</h3><p><code>ps -u &lt;用户名&gt;</code>，如查看root用户的进程</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -u root</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">UID</span>   <span class=\"string\">PID</span> <span class=\"string\">TTY</span>           <span class=\"string\">TIME</span> <span class=\"string\">CMD</span></span><br><span class=\"line\">   <span class=\"number\">0</span>     <span class=\"number\">1</span> <span class=\"string\">??</span>        <span class=\"number\">28</span><span class=\"string\">:43.94</span> <span class=\"string\">/sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u6240_u6709_u8FDB_u7A0B\"><a href=\"#u67E5_u770B_u6240_u6709_u8FDB_u7A0B\" class=\"headerlink\" title=\"查看所有进程\"></a>查看所有进程</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -e</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">PID TTY           TIME <span class=\"keyword\">CMD</span></span><br><span class=\"line\"><span class=\"bash\">  1 ??        28:43.16 /sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u5168_u683C_u5F0F_u7684_u5168_u8FDB_u7A0B\"><a href=\"#u67E5_u770B_u5168_u683C_u5F0F_u7684_u5168_u8FDB_u7A0B\" class=\"headerlink\" title=\"查看全格式的全进程\"></a>查看全格式的全进程</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -ef</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">UID</span>   <span class=\"string\">PID</span>  <span class=\"string\">PPID</span>   <span class=\"string\">C</span> <span class=\"string\">STIME</span>   <span class=\"string\">TTY</span>           <span class=\"string\">TIME</span> <span class=\"string\">CMD</span></span><br><span class=\"line\">  <span class=\"number\">0</span>     <span class=\"number\">1</span>     <span class=\"number\">0</span>   <span class=\"number\">0</span> <span class=\"number\">24</span> <span class=\"number\">116</span>  <span class=\"string\">??</span>        <span class=\"number\">28</span><span class=\"string\">:42.63</span> <span class=\"string\">/sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u5F53_u524D_u6240_u6709_u8FDB_u7A0Bcpu_u5360_u7528_u60C5_u51B5\"><a href=\"#u67E5_u770B_u5F53_u524D_u6240_u6709_u8FDB_u7A0Bcpu_u5360_u7528_u60C5_u51B5\" class=\"headerlink\" title=\"查看当前所有进程cpu占用情况\"></a>查看当前所有进程cpu占用情况</h3><figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ps <span class=\"built_in\">aux</span></span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">USER</span>      <span class=\"string\">PID</span>   <span class=\"string\">%CPU</span> <span class=\"string\">%MEM</span>      <span class=\"string\">VSZ</span>    <span class=\"string\">RSS</span>   <span class=\"string\">TT</span>  <span class=\"string\">STAT</span> <span class=\"string\">STARTED</span>      <span class=\"string\">TIME</span> <span class=\"string\">COMMAND</span></span><br><span class=\"line\"><span class=\"string\">jceee</span>    <span class=\"number\">51422</span>   <span class=\"number\">0.1</span>  <span class=\"number\">0.6</span>  <span class=\"number\">3367032</span> <span class=\"number\">107344</span>   <span class=\"string\">??</span>  <span class=\"string\">S</span>    <span class=\"string\">四11下午</span>   <span class=\"number\">1</span><span class=\"string\">:36.91</span> <span class=\"string\">/Applications/Robomongo.app/Contents/MacOS/Robomongo</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u6839_u636E_u5173_u952E_u5B57_u67E5_u627E_u76F8_u5173_u8FDB_u7A0B\"><a href=\"#u6839_u636E_u5173_u952E_u5B57_u67E5_u627E_u76F8_u5173_u8FDB_u7A0B\" class=\"headerlink\" title=\"根据关键字查找相关进程\"></a>根据关键字查找相关进程</h3><p><code>ps aux | grep &lt;进程名&gt;</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ps</span> aux | <span class=\"keyword\">grep</span> php-fpm</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">jceee      <span class=\"number\">53756</span>   <span class=\"number\">0.0</span>  <span class=\"number\">0.0</span>  <span class=\"number\">2493396</span>   <span class=\"number\">3460</span>   ??  S     5:<span class=\"number\">53</span>下午   <span class=\"number\">0</span>:<span class=\"number\">00.02</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/</span>php56<span class=\"regexp\">/sbin/</span>php-fpm --fpm-config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>php<span class=\"regexp\">/5.6/</span>php-fpm.conf</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ps(Process Status)，顾名思义，是在Linux中是查看进程状态的命令。ps查看正处于Running的进程，ps aux查看所有的进程。</p>\n</blockquote>\n<h2 id=\"ps_u8FDB_u7A0B_u72B6_u6001_u7801\"><a href=\"#ps_u8FDB_u7A0B_u72B6_u6001_u7801\" class=\"headerlink\" title=\"ps进程状态码\"></a>ps进程状态码</h2><p>ps几种主要的状态码是:</p>\n<ul>\n<li>D 不可中断 uninterruptible sleep (usually IO) </li>\n<li>R 运行 runnable (on run queue) </li>\n<li>S 睡眠 sleeping </li>\n<li>T 停止 traced or stopped </li>\n<li>Z 僵死 a defunct (”zombie”) process</li>\n</ul>\n<h2 id=\"ps_u5217_u540D_u8BF4_u660E\"><a href=\"#ps_u5217_u540D_u8BF4_u660E\" class=\"headerlink\" title=\"ps列名说明\"></a>ps列名说明</h2><table>\n<thead>\n<tr>\n<th>列名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USER</td>\n<td>该 process 属于那个使用者账号的</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>该 process 的号码</td>\n</tr>\n<tr>\n<td>%CPU</td>\n<td>该 process 使用掉的 CPU 资源百分比</td>\n</tr>\n<tr>\n<td>%MEM</td>\n<td>该 process 所占用的物理内存百分比</td>\n</tr>\n<tr>\n<td>VSZ</td>\n<td>该 process 使用掉的虚拟内存量 (Kbytes)</td>\n</tr>\n<tr>\n<td>RSS</td>\n<td>该 process 占用的固定的内存量 (Kbytes)</td>\n</tr>\n<tr>\n<td>TTY</td>\n<td>该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</td>\n</tr>\n<tr>\n<td>STAT</td>\n<td>该程序目前的状态，主要的状态可以参照上面提到的</td>\n</tr>\n<tr>\n<td>START</td>\n<td>该 process 被触发启动的时间</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>该 process 实际使用 CPU 运作的时间</td>\n</tr>\n<tr>\n<td>COMMAND</td>\n<td>该程序的实际指令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"px_u53C2_u6570\"><a href=\"#px_u53C2_u6570\" class=\"headerlink\" title=\"px参数\"></a>px参数</h2><p>ps常用参数</p>\n<ul>\n<li>-e 显示所有进程</li>\n<li>-A 所有进程均显示，与-e具有同样效果</li>\n<li>-a 显示当前终端上所有进程，包括其他用户的进程</li>\n<li>-u 以用户来筛选进程</li>\n<li>x 显示没有控制终端的进程</li>\n<li>r 显示正在运行的进程</li>\n<li>-f 全格式</li>\n</ul>\n<p>还有更多参数可以参考</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>man ps</span><br></pre></td></tr></table></figure>\n<h2 id=\"ps_u4F7F_u7528_u793A_u4F8B\"><a href=\"#ps_u4F7F_u7528_u793A_u4F8B\" class=\"headerlink\" title=\"ps使用示例\"></a>ps使用示例</h2><h3 id=\"u67E5_u770B_u7279_u5B9A_u7528_u6237_u8FDB_u7A0B_3A\"><a href=\"#u67E5_u770B_u7279_u5B9A_u7528_u6237_u8FDB_u7A0B_3A\" class=\"headerlink\" title=\"查看特定用户进程:\"></a>查看特定用户进程:</h3><p><code>ps -u &lt;用户名&gt;</code>，如查看root用户的进程</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -u root</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">UID</span>   <span class=\"string\">PID</span> <span class=\"string\">TTY</span>           <span class=\"string\">TIME</span> <span class=\"string\">CMD</span></span><br><span class=\"line\">   <span class=\"number\">0</span>     <span class=\"number\">1</span> <span class=\"string\">??</span>        <span class=\"number\">28</span><span class=\"string\">:43.94</span> <span class=\"string\">/sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u6240_u6709_u8FDB_u7A0B\"><a href=\"#u67E5_u770B_u6240_u6709_u8FDB_u7A0B\" class=\"headerlink\" title=\"查看所有进程\"></a>查看所有进程</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -e</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">PID TTY           TIME <span class=\"keyword\">CMD</span></span><br><span class=\"line\"><span class=\"bash\">  1 ??        28:43.16 /sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u5168_u683C_u5F0F_u7684_u5168_u8FDB_u7A0B\"><a href=\"#u67E5_u770B_u5168_u683C_u5F0F_u7684_u5168_u8FDB_u7A0B\" class=\"headerlink\" title=\"查看全格式的全进程\"></a>查看全格式的全进程</h3><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ps -ef</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">UID</span>   <span class=\"string\">PID</span>  <span class=\"string\">PPID</span>   <span class=\"string\">C</span> <span class=\"string\">STIME</span>   <span class=\"string\">TTY</span>           <span class=\"string\">TIME</span> <span class=\"string\">CMD</span></span><br><span class=\"line\">  <span class=\"number\">0</span>     <span class=\"number\">1</span>     <span class=\"number\">0</span>   <span class=\"number\">0</span> <span class=\"number\">24</span> <span class=\"number\">116</span>  <span class=\"string\">??</span>        <span class=\"number\">28</span><span class=\"string\">:42.63</span> <span class=\"string\">/sbin/launchd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u67E5_u770B_u5F53_u524D_u6240_u6709_u8FDB_u7A0Bcpu_u5360_u7528_u60C5_u51B5\"><a href=\"#u67E5_u770B_u5F53_u524D_u6240_u6709_u8FDB_u7A0Bcpu_u5360_u7528_u60C5_u51B5\" class=\"headerlink\" title=\"查看当前所有进程cpu占用情况\"></a>查看当前所有进程cpu占用情况</h3><figure class=\"highlight dos\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ps <span class=\"built_in\">aux</span></span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">USER</span>      <span class=\"string\">PID</span>   <span class=\"string\">%CPU</span> <span class=\"string\">%MEM</span>      <span class=\"string\">VSZ</span>    <span class=\"string\">RSS</span>   <span class=\"string\">TT</span>  <span class=\"string\">STAT</span> <span class=\"string\">STARTED</span>      <span class=\"string\">TIME</span> <span class=\"string\">COMMAND</span></span><br><span class=\"line\"><span class=\"string\">jceee</span>    <span class=\"number\">51422</span>   <span class=\"number\">0.1</span>  <span class=\"number\">0.6</span>  <span class=\"number\">3367032</span> <span class=\"number\">107344</span>   <span class=\"string\">??</span>  <span class=\"string\">S</span>    <span class=\"string\">四11下午</span>   <span class=\"number\">1</span><span class=\"string\">:36.91</span> <span class=\"string\">/Applications/Robomongo.app/Contents/MacOS/Robomongo</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u6839_u636E_u5173_u952E_u5B57_u67E5_u627E_u76F8_u5173_u8FDB_u7A0B\"><a href=\"#u6839_u636E_u5173_u952E_u5B57_u67E5_u627E_u76F8_u5173_u8FDB_u7A0B\" class=\"headerlink\" title=\"根据关键字查找相关进程\"></a>根据关键字查找相关进程</h3><p><code>ps aux | grep &lt;进程名&gt;</code></p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">ps</span> aux | <span class=\"keyword\">grep</span> php-fpm</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">jceee      <span class=\"number\">53756</span>   <span class=\"number\">0.0</span>  <span class=\"number\">0.0</span>  <span class=\"number\">2493396</span>   <span class=\"number\">3460</span>   ??  S     5:<span class=\"number\">53</span>下午   <span class=\"number\">0</span>:<span class=\"number\">00.02</span> <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/</span>php56<span class=\"regexp\">/sbin/</span>php-fpm --fpm-config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/</span>php<span class=\"regexp\">/5.6/</span>php-fpm.conf</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"linux-man","date":"2016-02-13T14:18:58.000Z","_content":"\n>man是manual的缩写，是系统中提供相关条目参考信息的命令。\n\n\n如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如\n\n```\n\t$ man ls\n```\n\n会得到下面结果：\n\n```\nLS(1)                     BSD General Commands Manual                    LS(1)\n\nNAME\n     ls -- list directory contents\n\nSYNOPSIS\n     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]\n\nDESCRIPTION\n     For each operand that names a file of a type other than directory, ls displays its name as well as any requested, associated information.  For each operand that names a file of type directory, ls displays the names of files con-\n     tained within that directory, as well as any requested, associated information.\n\n     If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, non-directory operands are displayed first; directory and non-directory operands are sorted separately and in lexi-\n     cographical order.\n\n     The following options are available:\n\n     -@      Display extended attribute keys and sizes in long (-l) output.\n\n     -1      (The numeric digit ``one''.)  Force output to be one entry per line.  This is the default when output is not to a terminal.\n\n     -A      List all entries except for . and ...  Always set for the super-user.\n     \n     ...\n```\n\n我们可以看到结果中显示了LS(1),(1)代表的是`一般用户可使用的命令`。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：\n\n|数字|意义|\n|---|---|\n|1| 用户在shell环境中可以操作的命令或可执行文件|\n|2| 系统内核可调用的函数与工具等|\n|3| 一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）|\n|4| 设备文件的说明，通常是在/dev下的文件|\n|5| 配置文件或者是某些文件的格式|\n|6| 游戏（games）|\n|7| 惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明|\n|8| 系统管理员可用的管理命令|\n|9| 跟kernel有关的文件|\n\n如\n\n```\n\t$ man 2 write\n```\n\n```\nWRITE(2)                    BSD System Calls Manual                   WRITE(2)\n\nNAME\n     pwrite, write, writev -- write output\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <unistd.h>\n\n     ssize_t\n     pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);\n\n     ssize_t\n     write(int fildes, const void *buf, size_t nbyte);\n\n     #include <sys/uio.h>\n\n     ssize_t\n     writev(int fildes, const struct iovec *iov, int iovcnt);\n\n```\n\n","source":"_posts/linux/linux-man.md","raw":"title: linux-man\ndate: 2016-02-13 22:18:58\ntags: linux    \ncategories: linux  \n\n---\n\n>man是manual的缩写，是系统中提供相关条目参考信息的命令。\n\n\n如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如\n\n```\n\t$ man ls\n```\n\n会得到下面结果：\n\n```\nLS(1)                     BSD General Commands Manual                    LS(1)\n\nNAME\n     ls -- list directory contents\n\nSYNOPSIS\n     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file ...]\n\nDESCRIPTION\n     For each operand that names a file of a type other than directory, ls displays its name as well as any requested, associated information.  For each operand that names a file of type directory, ls displays the names of files con-\n     tained within that directory, as well as any requested, associated information.\n\n     If no operands are given, the contents of the current directory are displayed.  If more than one operand is given, non-directory operands are displayed first; directory and non-directory operands are sorted separately and in lexi-\n     cographical order.\n\n     The following options are available:\n\n     -@      Display extended attribute keys and sizes in long (-l) output.\n\n     -1      (The numeric digit ``one''.)  Force output to be one entry per line.  This is the default when output is not to a terminal.\n\n     -A      List all entries except for . and ...  Always set for the super-user.\n     \n     ...\n```\n\n我们可以看到结果中显示了LS(1),(1)代表的是`一般用户可使用的命令`。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：\n\n|数字|意义|\n|---|---|\n|1| 用户在shell环境中可以操作的命令或可执行文件|\n|2| 系统内核可调用的函数与工具等|\n|3| 一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）|\n|4| 设备文件的说明，通常是在/dev下的文件|\n|5| 配置文件或者是某些文件的格式|\n|6| 游戏（games）|\n|7| 惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明|\n|8| 系统管理员可用的管理命令|\n|9| 跟kernel有关的文件|\n\n如\n\n```\n\t$ man 2 write\n```\n\n```\nWRITE(2)                    BSD System Calls Manual                   WRITE(2)\n\nNAME\n     pwrite, write, writev -- write output\n\nLIBRARY\n     Standard C Library (libc, -lc)\n\nSYNOPSIS\n     #include <unistd.h>\n\n     ssize_t\n     pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);\n\n     ssize_t\n     write(int fildes, const void *buf, size_t nbyte);\n\n     #include <sys/uio.h>\n\n     ssize_t\n     writev(int fildes, const struct iovec *iov, int iovcnt);\n\n```\n\n","slug":"linux/linux-man","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p20013i9sk49rw5mwx","content":"<blockquote>\n<p>man是manual的缩写，是系统中提供相关条目参考信息的命令。</p>\n</blockquote>\n<p>如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">man</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n<p>会得到下面结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">LS(1)                     BSD General Commands<span class=\"built_in\"> Manual </span>                   LS(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     ls -- list directory contents</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file <span class=\"built_in\">..</span>.]</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">     <span class=\"keyword\">For</span> each operand that names a file of a<span class=\"built_in\"> type </span>other than directory, ls displays its name as well as any requested, associated information.  <span class=\"keyword\">For</span> each operand that names a file of<span class=\"built_in\"> type </span>directory, ls displays the names of files con-</span><br><span class=\"line\">     tained within that directory, as well as any requested, associated information.</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">If</span> <span class=\"literal\">no</span> operands are given, the contents of the current directory are displayed.  <span class=\"keyword\">If</span> more than one operand is given, non-directory operands are displayed first; directory <span class=\"keyword\">and</span> non-directory operands are sorted separately <span class=\"keyword\">and</span> <span class=\"keyword\">in</span> lexi-</span><br><span class=\"line\">     cographical order.</span><br><span class=\"line\"></span><br><span class=\"line\">     The following options are available:</span><br><span class=\"line\"></span><br><span class=\"line\">     -@      Display extended attribute keys <span class=\"keyword\">and</span> sizes <span class=\"keyword\">in</span> long (-l) output.</span><br><span class=\"line\"></span><br><span class=\"line\">     -1      (The numeric digit ``one<span class=\"string\">''</span>.)  Force output <span class=\"keyword\">to</span> be one entry per line.  This is the<span class=\"built_in\"> default </span>when output is <span class=\"keyword\">not</span> <span class=\"keyword\">to</span> a terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">     -A      List all entries except <span class=\"keyword\">for</span> . <span class=\"keyword\">and</span> <span class=\"built_in\">..</span>.  Always <span class=\"builtin-name\">set</span> <span class=\"keyword\">for</span> the super-user.</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<p>我们可以看到结果中显示了LS(1),(1)代表的是<code>一般用户可使用的命令</code>。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>用户在shell环境中可以操作的命令或可执行文件</td>\n</tr>\n<tr>\n<td>2</td>\n<td>系统内核可调用的函数与工具等</td>\n</tr>\n<tr>\n<td>3</td>\n<td>一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>设备文件的说明，通常是在/dev下的文件</td>\n</tr>\n<tr>\n<td>5</td>\n<td>配置文件或者是某些文件的格式</td>\n</tr>\n<tr>\n<td>6</td>\n<td>游戏（games）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统管理员可用的管理命令</td>\n</tr>\n<tr>\n<td>9</td>\n<td>跟kernel有关的文件</td>\n</tr>\n</tbody>\n</table>\n<p>如</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ man <span class=\"number\">2</span> <span class=\"built_in\">write</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">WRITE(2)                    BSD<span class=\"built_in\"> System </span>Calls<span class=\"built_in\"> Manual </span>                  WRITE(2)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     pwrite, write, writev -- write output</span><br><span class=\"line\"></span><br><span class=\"line\">LIBRARY</span><br><span class=\"line\">     Standard C Library (libc, -lc)</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     #include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     pwrite(int fildes, const void <span class=\"number\">*b</span>uf, size_t nbyte, off_t offset);</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     write(int fildes, const void <span class=\"number\">*b</span>uf, size_t nbyte);</span><br><span class=\"line\"></span><br><span class=\"line\">     #include &lt;sys/uio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     writev(int fildes, const struct iovec *iov, int iovcnt);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>man是manual的缩写，是系统中提供相关条目参考信息的命令。</p>\n</blockquote>\n<p>如果需要参考命令的用法，只需要在man后加上命令名就可以得到详细说明,如</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">man</span> <span class=\"keyword\">ls</span></span><br></pre></td></tr></table></figure>\n<p>会得到下面结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">LS(1)                     BSD General Commands<span class=\"built_in\"> Manual </span>                   LS(1)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     ls -- list directory contents</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     ls [-ABCFGHLOPRSTUW@abcdefghiklmnopqrstuwx1] [file <span class=\"built_in\">..</span>.]</span><br><span class=\"line\"></span><br><span class=\"line\">DESCRIPTION</span><br><span class=\"line\">     <span class=\"keyword\">For</span> each operand that names a file of a<span class=\"built_in\"> type </span>other than directory, ls displays its name as well as any requested, associated information.  <span class=\"keyword\">For</span> each operand that names a file of<span class=\"built_in\"> type </span>directory, ls displays the names of files con-</span><br><span class=\"line\">     tained within that directory, as well as any requested, associated information.</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">If</span> <span class=\"literal\">no</span> operands are given, the contents of the current directory are displayed.  <span class=\"keyword\">If</span> more than one operand is given, non-directory operands are displayed first; directory <span class=\"keyword\">and</span> non-directory operands are sorted separately <span class=\"keyword\">and</span> <span class=\"keyword\">in</span> lexi-</span><br><span class=\"line\">     cographical order.</span><br><span class=\"line\"></span><br><span class=\"line\">     The following options are available:</span><br><span class=\"line\"></span><br><span class=\"line\">     -@      Display extended attribute keys <span class=\"keyword\">and</span> sizes <span class=\"keyword\">in</span> long (-l) output.</span><br><span class=\"line\"></span><br><span class=\"line\">     -1      (The numeric digit ``one<span class=\"string\">''</span>.)  Force output <span class=\"keyword\">to</span> be one entry per line.  This is the<span class=\"built_in\"> default </span>when output is <span class=\"keyword\">not</span> <span class=\"keyword\">to</span> a terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">     -A      List all entries except <span class=\"keyword\">for</span> . <span class=\"keyword\">and</span> <span class=\"built_in\">..</span>.  Always <span class=\"builtin-name\">set</span> <span class=\"keyword\">for</span> the super-user.</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<p>我们可以看到结果中显示了LS(1),(1)代表的是<code>一般用户可使用的命令</code>。在查询数据后面的数字是有意义的，它可以帮助我们了解或者直接查询相关的资料。每个数字具体含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>用户在shell环境中可以操作的命令或可执行文件</td>\n</tr>\n<tr>\n<td>2</td>\n<td>系统内核可调用的函数与工具等</td>\n</tr>\n<tr>\n<td>3</td>\n<td>一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>设备文件的说明，通常是在/dev下的文件</td>\n</tr>\n<tr>\n<td>5</td>\n<td>配置文件或者是某些文件的格式</td>\n</tr>\n<tr>\n<td>6</td>\n<td>游戏（games）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统管理员可用的管理命令</td>\n</tr>\n<tr>\n<td>9</td>\n<td>跟kernel有关的文件</td>\n</tr>\n</tbody>\n</table>\n<p>如</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ man <span class=\"number\">2</span> <span class=\"built_in\">write</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">WRITE(2)                    BSD<span class=\"built_in\"> System </span>Calls<span class=\"built_in\"> Manual </span>                  WRITE(2)</span><br><span class=\"line\"></span><br><span class=\"line\">NAME</span><br><span class=\"line\">     pwrite, write, writev -- write output</span><br><span class=\"line\"></span><br><span class=\"line\">LIBRARY</span><br><span class=\"line\">     Standard C Library (libc, -lc)</span><br><span class=\"line\"></span><br><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">     #include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     pwrite(int fildes, const void <span class=\"number\">*b</span>uf, size_t nbyte, off_t offset);</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     write(int fildes, const void <span class=\"number\">*b</span>uf, size_t nbyte);</span><br><span class=\"line\"></span><br><span class=\"line\">     #include &lt;sys/uio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssize_t</span><br><span class=\"line\">     writev(int fildes, const struct iovec *iov, int iovcnt);</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"linux-lsof","date":"2016-02-04T14:18:46.000Z","_content":"\n>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。\n\n## lsof显示示例\n\nexample:以查看mongod进程为例子\n\n```\n\t$ lsof /usr/local/bin/mongod\n```\n\n结果：\n\n```\n\tCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME  \n\tmongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod\n```\n\n|COMMAND |PID |USER| FD |TYPE |DEVICE |SIZE |NODE| NAME|\n|---|---|---|---|---|---|---|---|---|\n|进程名称|进程标识符|进程所有者|文件描述符|文件类型|指定磁盘名|文件大小|索引节点|打开文件的确切名称|\n|\tmongod|  50995| jceee|  txt|    REG|    1,4 |27409336| 17133981| /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod|\n\n## lsof参数\n\n|命令|功能|\n|---|---|\n|lsof filename |显示打开指定文件的所有进程|\n|lsof -a| 表示两个参数都必须满足时才显示结果|\n|lsof -c string| 显示COMMAND列中包含指定字符的进程所有打开的文件|\n|lsof -u username |显示所属user进程打开的文件|\n|lsof -g gid |显示归属gid的进程情况|\n|lsof +d /DIR/| 显示目录下被进程打开的文件|\n|lsof +D /DIR/| 同上，但是会搜索目录下的所有目录，时间相对较长|\n|lsof -d FD |显示指定文件描述符的进程\n|lsof -n |不将IP转换为hostname，缺省是不加上-n参数\n|lsof -i |用以显示符合条件的进程情况\n|lsof -i[46] [protocol][@hostname / hostaddr][:service / port]|参数功能在下面|\n||46 --> IPv4 or IPv6|\n||protocol --> TCP or UDP|\n||hostname --> Internet host name|\n||hostaddr --> IPv4地址|\n||service --> /etc/service中的 service name (可以不只一个)|\n||port --> 端口号 (可以不只一个)|\n","source":"_posts/linux/linux-lsof.md","raw":"title: linux-lsof  \ndate: 2016-02-04 22:18:46  \ntags: linux    \ncategories: linux  \n\n---\n\n>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。\n\n## lsof显示示例\n\nexample:以查看mongod进程为例子\n\n```\n\t$ lsof /usr/local/bin/mongod\n```\n\n结果：\n\n```\n\tCOMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME  \n\tmongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod\n```\n\n|COMMAND |PID |USER| FD |TYPE |DEVICE |SIZE |NODE| NAME|\n|---|---|---|---|---|---|---|---|---|\n|进程名称|进程标识符|进程所有者|文件描述符|文件类型|指定磁盘名|文件大小|索引节点|打开文件的确切名称|\n|\tmongod|  50995| jceee|  txt|    REG|    1,4 |27409336| 17133981| /usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod|\n\n## lsof参数\n\n|命令|功能|\n|---|---|\n|lsof filename |显示打开指定文件的所有进程|\n|lsof -a| 表示两个参数都必须满足时才显示结果|\n|lsof -c string| 显示COMMAND列中包含指定字符的进程所有打开的文件|\n|lsof -u username |显示所属user进程打开的文件|\n|lsof -g gid |显示归属gid的进程情况|\n|lsof +d /DIR/| 显示目录下被进程打开的文件|\n|lsof +D /DIR/| 同上，但是会搜索目录下的所有目录，时间相对较长|\n|lsof -d FD |显示指定文件描述符的进程\n|lsof -n |不将IP转换为hostname，缺省是不加上-n参数\n|lsof -i |用以显示符合条件的进程情况\n|lsof -i[46] [protocol][@hostname / hostaddr][:service / port]|参数功能在下面|\n||46 --> IPv4 or IPv6|\n||protocol --> TCP or UDP|\n||hostname --> Internet host name|\n||hostaddr --> IPv4地址|\n||service --> /etc/service中的 service name (可以不只一个)|\n||port --> 端口号 (可以不只一个)|\n","slug":"linux/linux-lsof","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p30017i9skdblp3t5u","content":"<blockquote>\n<p>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。</p>\n</blockquote>\n<h2 id=\"lsof_u663E_u793A_u793A_u4F8B\"><a href=\"#lsof_u663E_u793A_u793A_u4F8B\" class=\"headerlink\" title=\"lsof显示示例\"></a>lsof显示示例</h2><p>example:以查看mongod进程为例子</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsof <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/m</span>ongod</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMAND   PID      <span class=\"built_in\"> USER </span>  FD  <span class=\"built_in\"> TYPE </span>DEVICE SIZE/OFF     NODE NAME  </span><br><span class=\"line\">mongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/<span class=\"built_in\">..</span>/Cellar/mongodb/3.0.7/bin/mongod</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>COMMAND</th>\n<th>PID</th>\n<th>USER</th>\n<th>FD</th>\n<th>TYPE</th>\n<th>DEVICE</th>\n<th>SIZE</th>\n<th>NODE</th>\n<th>NAME</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>进程名称</td>\n<td>进程标识符</td>\n<td>进程所有者</td>\n<td>文件描述符</td>\n<td>文件类型</td>\n<td>指定磁盘名</td>\n<td>文件大小</td>\n<td>索引节点</td>\n<td>打开文件的确切名称</td>\n</tr>\n<tr>\n<td>mongod</td>\n<td>50995</td>\n<td>jceee</td>\n<td>txt</td>\n<td>REG</td>\n<td>1,4</td>\n<td>27409336</td>\n<td>17133981</td>\n<td>/usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"lsof_u53C2_u6570\"><a href=\"#lsof_u53C2_u6570\" class=\"headerlink\" title=\"lsof参数\"></a>lsof参数</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lsof filename</td>\n<td>显示打开指定文件的所有进程</td>\n</tr>\n<tr>\n<td>lsof -a</td>\n<td>表示两个参数都必须满足时才显示结果</td>\n</tr>\n<tr>\n<td>lsof -c string</td>\n<td>显示COMMAND列中包含指定字符的进程所有打开的文件</td>\n</tr>\n<tr>\n<td>lsof -u username</td>\n<td>显示所属user进程打开的文件</td>\n</tr>\n<tr>\n<td>lsof -g gid</td>\n<td>显示归属gid的进程情况</td>\n</tr>\n<tr>\n<td>lsof +d /DIR/</td>\n<td>显示目录下被进程打开的文件</td>\n</tr>\n<tr>\n<td>lsof +D /DIR/</td>\n<td>同上，但是会搜索目录下的所有目录，时间相对较长</td>\n</tr>\n<tr>\n<td>lsof -d FD</td>\n<td>显示指定文件描述符的进程</td>\n</tr>\n<tr>\n<td>lsof -n</td>\n<td>不将IP转换为hostname，缺省是不加上-n参数</td>\n</tr>\n<tr>\n<td>lsof -i</td>\n<td>用以显示符合条件的进程情况</td>\n</tr>\n<tr>\n<td>lsof -i[46] [protocol][@hostname / hostaddr][:service / port]</td>\n<td>参数功能在下面</td>\n</tr>\n<tr>\n<td></td>\n<td>46 –&gt; IPv4 or IPv6</td>\n</tr>\n<tr>\n<td></td>\n<td>protocol –&gt; TCP or UDP</td>\n</tr>\n<tr>\n<td></td>\n<td>hostname –&gt; Internet host name</td>\n</tr>\n<tr>\n<td></td>\n<td>hostaddr –&gt; IPv4地址</td>\n</tr>\n<tr>\n<td></td>\n<td>service –&gt; /etc/service中的 service name (可以不只一个)</td>\n</tr>\n<tr>\n<td></td>\n<td>port –&gt; 端口号 (可以不只一个)</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。</p>\n</blockquote>\n<h2 id=\"lsof_u663E_u793A_u793A_u4F8B\"><a href=\"#lsof_u663E_u793A_u793A_u4F8B\" class=\"headerlink\" title=\"lsof显示示例\"></a>lsof显示示例</h2><p>example:以查看mongod进程为例子</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ lsof <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/bin/m</span>ongod</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMAND   PID      <span class=\"built_in\"> USER </span>  FD  <span class=\"built_in\"> TYPE </span>DEVICE SIZE/OFF     NODE NAME  </span><br><span class=\"line\">mongod  50995 jceee  txt    REG    1,4 27409336 17133981 /usr/local/bin/<span class=\"built_in\">..</span>/Cellar/mongodb/3.0.7/bin/mongod</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>COMMAND</th>\n<th>PID</th>\n<th>USER</th>\n<th>FD</th>\n<th>TYPE</th>\n<th>DEVICE</th>\n<th>SIZE</th>\n<th>NODE</th>\n<th>NAME</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>进程名称</td>\n<td>进程标识符</td>\n<td>进程所有者</td>\n<td>文件描述符</td>\n<td>文件类型</td>\n<td>指定磁盘名</td>\n<td>文件大小</td>\n<td>索引节点</td>\n<td>打开文件的确切名称</td>\n</tr>\n<tr>\n<td>mongod</td>\n<td>50995</td>\n<td>jceee</td>\n<td>txt</td>\n<td>REG</td>\n<td>1,4</td>\n<td>27409336</td>\n<td>17133981</td>\n<td>/usr/local/bin/../Cellar/mongodb/3.0.7/bin/mongod</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"lsof_u53C2_u6570\"><a href=\"#lsof_u53C2_u6570\" class=\"headerlink\" title=\"lsof参数\"></a>lsof参数</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lsof filename</td>\n<td>显示打开指定文件的所有进程</td>\n</tr>\n<tr>\n<td>lsof -a</td>\n<td>表示两个参数都必须满足时才显示结果</td>\n</tr>\n<tr>\n<td>lsof -c string</td>\n<td>显示COMMAND列中包含指定字符的进程所有打开的文件</td>\n</tr>\n<tr>\n<td>lsof -u username</td>\n<td>显示所属user进程打开的文件</td>\n</tr>\n<tr>\n<td>lsof -g gid</td>\n<td>显示归属gid的进程情况</td>\n</tr>\n<tr>\n<td>lsof +d /DIR/</td>\n<td>显示目录下被进程打开的文件</td>\n</tr>\n<tr>\n<td>lsof +D /DIR/</td>\n<td>同上，但是会搜索目录下的所有目录，时间相对较长</td>\n</tr>\n<tr>\n<td>lsof -d FD</td>\n<td>显示指定文件描述符的进程</td>\n</tr>\n<tr>\n<td>lsof -n</td>\n<td>不将IP转换为hostname，缺省是不加上-n参数</td>\n</tr>\n<tr>\n<td>lsof -i</td>\n<td>用以显示符合条件的进程情况</td>\n</tr>\n<tr>\n<td>lsof -i[46] [protocol][@hostname / hostaddr][:service / port]</td>\n<td>参数功能在下面</td>\n</tr>\n<tr>\n<td></td>\n<td>46 –&gt; IPv4 or IPv6</td>\n</tr>\n<tr>\n<td></td>\n<td>protocol –&gt; TCP or UDP</td>\n</tr>\n<tr>\n<td></td>\n<td>hostname –&gt; Internet host name</td>\n</tr>\n<tr>\n<td></td>\n<td>hostaddr –&gt; IPv4地址</td>\n</tr>\n<tr>\n<td></td>\n<td>service –&gt; /etc/service中的 service name (可以不只一个)</td>\n</tr>\n<tr>\n<td></td>\n<td>port –&gt; 端口号 (可以不只一个)</td>\n</tr>\n</tbody>\n</table>\n","sticky":0},{"title":"$GLOBALS [\"HTTP_RAW_POST_DATA\"]为空","date":"2015-07-29T14:28:00.000Z","_content":"\n## `$GLOBALS[\"HTTP_RAW_POST_DATA\"]` `$_POST` `file_get_contents('php://input')`    \n\n`$GLOBALS[\"HTTP_RAW_POST_DATA\"]`跟`$_POST`,`file_get_contents('php://input')`的效果差不多，用 `$GLOBALS [\"HTTP_RAW_POST_DATA\"]`或`file_get_contents('php://input')`的情况大多是为了获取`$_POST`无法接收的数据类型（如XML数据） \n\n## 获取`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`的值\n\n在`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`取不到值的情况下可以按以下方式排查：\n\n* 用`file_get_contents('php://input')`获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。\n\n* 如果`file_get_contents('php://input')`有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:\n   \n```\n\talways_populate_raw_post_data = On\n```","source":"_posts/php/php-HTTP-RAW-POST-DATA.md","raw":"title: $GLOBALS [\"HTTP_RAW_POST_DATA\"]为空\ndate: 2015-07-29 22:28\ncategories: php\ntags: php\n\n---\n\n## `$GLOBALS[\"HTTP_RAW_POST_DATA\"]` `$_POST` `file_get_contents('php://input')`    \n\n`$GLOBALS[\"HTTP_RAW_POST_DATA\"]`跟`$_POST`,`file_get_contents('php://input')`的效果差不多，用 `$GLOBALS [\"HTTP_RAW_POST_DATA\"]`或`file_get_contents('php://input')`的情况大多是为了获取`$_POST`无法接收的数据类型（如XML数据） \n\n## 获取`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`的值\n\n在`$GLOBALS [\"HTTP_RAW_POST_DATA\"]`取不到值的情况下可以按以下方式排查：\n\n* 用`file_get_contents('php://input')`获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。\n\n* 如果`file_get_contents('php://input')`有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:\n   \n```\n\talways_populate_raw_post_data = On\n```","slug":"php/php-HTTP-RAW-POST-DATA","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p40018i9skucfq0cx3","content":"<h2 id=\"24GLOBALS_5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D__24_POST_file_get_contents_28_26_2339_3Bphp_3A//input_26_2339_3B_29\"><a href=\"#24GLOBALS_5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D__24_POST_file_get_contents_28_26_2339_3Bphp_3A//input_26_2339_3B_29\" class=\"headerlink\" title=\"$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;] $_POST file_get_contents(&#39;php://input&#39;)\"></a><code>$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;]</code> <code>$_POST</code> <code>file_get_contents(&#39;php://input&#39;)</code></h2><p><code>$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;]</code>跟<code>$_POST</code>,<code>file_get_contents(&#39;php://input&#39;)</code>的效果差不多，用 <code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>或<code>file_get_contents(&#39;php://input&#39;)</code>的情况大多是为了获取<code>$_POST</code>无法接收的数据类型（如XML数据） </p>\n<h2 id=\"u83B7_u53D6_24GLOBALS__5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D_u7684_u503C\"><a href=\"#u83B7_u53D6_24GLOBALS__5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D_u7684_u503C\" class=\"headerlink\" title=\"获取$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]的值\"></a>获取<code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>的值</h2><p>在<code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>取不到值的情况下可以按以下方式排查：</p>\n<ul>\n<li><p>用<code>file_get_contents(&#39;php://input&#39;)</code>获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。</p>\n</li>\n<li><p>如果<code>file_get_contents(&#39;php://input&#39;)</code>有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:</p>\n</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">always_populate_raw_post_data</span> = <span class=\"literal\">On</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"24GLOBALS_5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D__24_POST_file_get_contents_28_26_2339_3Bphp_3A//input_26_2339_3B_29\"><a href=\"#24GLOBALS_5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D__24_POST_file_get_contents_28_26_2339_3Bphp_3A//input_26_2339_3B_29\" class=\"headerlink\" title=\"$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;] $_POST file_get_contents(&#39;php://input&#39;)\"></a><code>$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;]</code> <code>$_POST</code> <code>file_get_contents(&#39;php://input&#39;)</code></h2><p><code>$GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;]</code>跟<code>$_POST</code>,<code>file_get_contents(&#39;php://input&#39;)</code>的效果差不多，用 <code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>或<code>file_get_contents(&#39;php://input&#39;)</code>的情况大多是为了获取<code>$_POST</code>无法接收的数据类型（如XML数据） </p>\n<h2 id=\"u83B7_u53D6_24GLOBALS__5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D_u7684_u503C\"><a href=\"#u83B7_u53D6_24GLOBALS__5B_26quot_3BHTTP_RAW_POST_DATA_26quot_3B_5D_u7684_u503C\" class=\"headerlink\" title=\"获取$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]的值\"></a>获取<code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>的值</h2><p>在<code>$GLOBALS [&quot;HTTP_RAW_POST_DATA&quot;]</code>取不到值的情况下可以按以下方式排查：</p>\n<ul>\n<li><p>用<code>file_get_contents(&#39;php://input&#39;)</code>获取数据。如果获取不到，则可能是数据传输错误，对请求进行捉包，分析数据。</p>\n</li>\n<li><p>如果<code>file_get_contents(&#39;php://input&#39;)</code>有数据。那有可能是配置没开启，查看php.ini配置文件，找到always_populate_raw_post_data并设置为On:</p>\n</li>\n</ul>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">always_populate_raw_post_data</span> = <span class=\"literal\">On</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"php高精确度数值比较-bccomp","date":"2016-02-16T15:26:30.000Z","_content":"\n## bccomp\n\nbccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。\n\n`bccomp($left_operand, $right_operand [, $scale = 0]);`\n\n参数\n\n|参数|参数描述|属性|\n|---|---|---|\n|$left_operand |左边字符串|string|\n| $right_operand |右边字符串|string|\n| $scale(可不填，默认0) |返回值小数点后所需的位数|int|\n\n`bccomp`函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:\n\n```\necho '<pre>';\nvar_dump(bccomp('1', '2'));   // int(-1)\nvar_dump(bccomp('1.00001', '1', 3)); // int(0)\nvar_dump(bccomp('1.00001', '1', 5)); // int(1)\n```\n\n## 整数与浮点数对比\n\n举个例子：\n\n```\necho '<pre>';\nvar_dump(8160 == '81.6' * 100);          //false\nvar_dump('81.6' * 100);                  //float(8160)\nvar_dump('81.6' * 100 - 8160);           //float(-9.0949470177293E-13)\n```\n\n第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：\n\n```\nvar_dump(bccomp(8160, '81.60' * 100) === 0);  //bool(true)\n```\n\n如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比\n\n```\nvar_dump(8160 / 100 == '81.6');               //bool(true)\n```\n\n\n","source":"_posts/php/php-bccomp.md","raw":"title: php高精确度数值比较-bccomp  \ndate: 2016-02-16 23:26:30  \ncategories: php   \ntags: php\n\n---\n\n## bccomp\n\nbccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。\n\n`bccomp($left_operand, $right_operand [, $scale = 0]);`\n\n参数\n\n|参数|参数描述|属性|\n|---|---|---|\n|$left_operand |左边字符串|string|\n| $right_operand |右边字符串|string|\n| $scale(可不填，默认0) |返回值小数点后所需的位数|int|\n\n`bccomp`函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:\n\n```\necho '<pre>';\nvar_dump(bccomp('1', '2'));   // int(-1)\nvar_dump(bccomp('1.00001', '1', 3)); // int(0)\nvar_dump(bccomp('1.00001', '1', 5)); // int(1)\n```\n\n## 整数与浮点数对比\n\n举个例子：\n\n```\necho '<pre>';\nvar_dump(8160 == '81.6' * 100);          //false\nvar_dump('81.6' * 100);                  //float(8160)\nvar_dump('81.6' * 100 - 8160);           //float(-9.0949470177293E-13)\n```\n\n第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：\n\n```\nvar_dump(bccomp(8160, '81.60' * 100) === 0);  //bool(true)\n```\n\n如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比\n\n```\nvar_dump(8160 / 100 == '81.6');               //bool(true)\n```\n\n\n","slug":"php/php-bccomp","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p4001ci9skgx4hf82n","content":"<h2 id=\"bccomp\"><a href=\"#bccomp\" class=\"headerlink\" title=\"bccomp\"></a>bccomp</h2><p>bccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。</p>\n<p><code>bccomp($left_operand, $right_operand [, $scale = 0]);</code></p>\n<p>参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>参数描述</th>\n<th>属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$left_operand</td>\n<td>左边字符串</td>\n<td>string</td>\n</tr>\n<tr>\n<td>$right_operand</td>\n<td>右边字符串</td>\n<td>string</td>\n</tr>\n<tr>\n<td>$scale(可不填，默认0)</td>\n<td>返回值小数点后所需的位数</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p><code>bccomp</code>函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo '&lt;pre&gt;';</span><br><span class=\"line\">var_dump(bccomp('1', '2'));   <span class=\"comment\">// int(-1)</span></span><br><span class=\"line\">var_dump(bccomp('1.<span class=\"number\">0000</span>1', '1', <span class=\"number\">3</span>)); <span class=\"comment\">// int(0)</span></span><br><span class=\"line\">var_dump(bccomp('1.<span class=\"number\">0000</span>1', '1', <span class=\"number\">5</span>)); <span class=\"comment\">// int(1)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u6574_u6570_u4E0E_u6D6E_u70B9_u6570_u5BF9_u6BD4\"><a href=\"#u6574_u6570_u4E0E_u6D6E_u70B9_u6570_u5BF9_u6BD4\" class=\"headerlink\" title=\"整数与浮点数对比\"></a>整数与浮点数对比</h2><p>举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\">var_dump(8160 == <span class=\"string\">'81.6'</span> * 100);          //<span class=\"literal\">false</span></span><br><span class=\"line\">var_dump(<span class=\"string\">'81.6'</span> * 100);                  //<span class=\"built_in\">float</span>(8160)</span><br><span class=\"line\">var_dump(<span class=\"string\">'81.6'</span> * 100 - 8160);           //<span class=\"built_in\">float</span>(-9.0949470177293E-13)</span><br></pre></td></tr></table></figure>\n<p>第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(bccomp(<span class=\"number\">8160</span>, '<span class=\"number\">81.60</span>' * <span class=\"number\">100</span>) === <span class=\"number\">0</span>);  <span class=\"comment\">//bool(true)</span></span><br></pre></td></tr></table></figure>\n<p>如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"number\">8160</span> / <span class=\"number\">100</span> == <span class=\"string\">'81.6'</span>);               <span class=\"regexp\">//bool</span>(<span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"bccomp\"><a href=\"#bccomp\" class=\"headerlink\" title=\"bccomp\"></a>bccomp</h2><p>bccomp是php的bcmath库中的方法，使用前先用phpinfo()确认一下有没有开启bcmatch库,没有则需要进行对应的编译操作。</p>\n<p><code>bccomp($left_operand, $right_operand [, $scale = 0]);</code></p>\n<p>参数</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>参数描述</th>\n<th>属性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$left_operand</td>\n<td>左边字符串</td>\n<td>string</td>\n</tr>\n<tr>\n<td>$right_operand</td>\n<td>右边字符串</td>\n<td>string</td>\n</tr>\n<tr>\n<td>$scale(可不填，默认0)</td>\n<td>返回值小数点后所需的位数</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p><code>bccomp</code>函数用于比较二个高精确度的数字。输入二个字符串，若二个字符串一样大则返回 0；若左边的数字字符串 (left operand) 比右边 (right operand) 的大则返回 +1；若左边的数字字符串比右边的小则返回 -1。scale 是一个可有可无的选项，表示返回值小数点后所需的位数:</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo '&lt;pre&gt;';</span><br><span class=\"line\">var_dump(bccomp('1', '2'));   <span class=\"comment\">// int(-1)</span></span><br><span class=\"line\">var_dump(bccomp('1.<span class=\"number\">0000</span>1', '1', <span class=\"number\">3</span>)); <span class=\"comment\">// int(0)</span></span><br><span class=\"line\">var_dump(bccomp('1.<span class=\"number\">0000</span>1', '1', <span class=\"number\">5</span>)); <span class=\"comment\">// int(1)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u6574_u6570_u4E0E_u6D6E_u70B9_u6570_u5BF9_u6BD4\"><a href=\"#u6574_u6570_u4E0E_u6D6E_u70B9_u6570_u5BF9_u6BD4\" class=\"headerlink\" title=\"整数与浮点数对比\"></a>整数与浮点数对比</h2><p>举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\">var_dump(8160 == <span class=\"string\">'81.6'</span> * 100);          //<span class=\"literal\">false</span></span><br><span class=\"line\">var_dump(<span class=\"string\">'81.6'</span> * 100);                  //<span class=\"built_in\">float</span>(8160)</span><br><span class=\"line\">var_dump(<span class=\"string\">'81.6'</span> * 100 - 8160);           //<span class=\"built_in\">float</span>(-9.0949470177293E-13)</span><br></pre></td></tr></table></figure>\n<p>第一个值是整数8160，第二个值是浮点81.6 跟 100相乘，虽然都是8160，但并不相等，减下来有差。这时，我们可以用bccomp来做判断：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(bccomp(<span class=\"number\">8160</span>, '<span class=\"number\">81.60</span>' * <span class=\"number\">100</span>) === <span class=\"number\">0</span>);  <span class=\"comment\">//bool(true)</span></span><br></pre></td></tr></table></figure>\n<p>如果没有bcmath库，也可以把第一个整数除以100，得到浮点数再进行对比</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"number\">8160</span> / <span class=\"number\">100</span> == <span class=\"string\">'81.6'</span>);               <span class=\"regexp\">//bool</span>(<span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"Ubuntu下配置lnmp","date":"2016-06-19T14:10:25.000Z","_content":"\n>环境：Ubuntu Linux 14.04\n\n# 安装软件仓库管理器\n\n```\n\t$ sudo apt-get install python-software-properties;\n```\n\n# 安装PHP\n\n## 安装php及扩展\n\n```\n\t$ sudo apt-get install python-software-properties;\n\t$ sudo add-apt-repository ppa:ondrej/php5-5.6;\n\t$ sudo apt-get update\n\t$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;\n```\n\n查看版本信息\n\n```\n   $ php5-fpm -v\rPHP 5.6.22-1+donate.sury.org~trusty+1 (fpm-fcgi)\rCopyright (c) 1997-2016 The PHP Group\rZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\r    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans\n```\n\n## 常用命令\n\n### 关闭，开启，重启\n\n```\n\t$ sudo service php5-fpm stop \n\t$ sudo service php5-fpm start\n\t$ sudo service php5-fpm restart  \n```\n\n## 安装composer\n\n```\n\t$ sudo apt-get install curl\n\t$ sudo curl -sS https://getcomposer.org/installer | php\n\t$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n# 安装Nginx\n\n## 安装Nginx\n\n```\n\t$ sudo add-apt-repository ppa:nginx/stable;\n\t$ sudo apt-get update;\n\t$ sudo apt-get install nginx;\n```\n\n查看版本信息\n\n```\n\t$ sudo nginx -v\n```\n\n## 常用命令\n\n启动 ，关闭，重启，配置重载\n\n```\n\t$ sudo service nginx start\n\t$ sudo service nginx stop\n\t$ sudo service nginx restart\n\t$ sudo service nginx reload  \n```\n\n# 安装mysql\n\n```\n\t$ sudo add-apt-repository -y ppa:ondrej/mysql-5.6\n\t$ sudo apt-get update\n\t$ sudo apt-get -y install mysql-server\n```\n\n登陆mysql创建账号\n\n```\n\t$ mysql -u root \n\tmysql>create database wordpress;\n\tmysql>grant all privileges on *.* to jceee identified by '123456';\n\tmysql>flush privileges;\n\tmysql>exit;\n```\n\n# 使用wordpress测试环境\n\n## 安装git\n\n```\n\t$ apt-get install git\n```\n\n## 创建项目文件夹\n\n```\n\t$ sudo mkdir -p /opt/htdocs/\n```\n\n## 下载wordpress\n\n```\n\t$ sudo git clone https://github.com/WordPress/WordPress /opt/htdocs/wordpress\n\t$ sudo chown -R www-data /opt/htdocs\n```\n\n## 增加Nginx配置\n\n```\n\t$ sudo vi /etc/nginx/conf.d/wordpress.conf\n```\n\n写入以下内容，保存并重载Nginx配置\n\n```\nserver {\r\r    listen 80;\r    server_name www.wordpress.com;\r    root /opt/htdocs/wordpress;\r\r    index index.html index.php;\r\r    location / {\r        index index.html index.php;\r    }\r\r    location ~ \\.php$ {\n            include fastcgi.conf;                  \n            fastcgi_pass unix:/var/run/php5-fpm.sock;\r    }\r}\n```\n\n如果php-fpm是以TPC/IP\t方式监听,如127.0.0.1:9000，则把上方\n\n```\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n```\n\n改为\n\n```\n\tfastcgi_pass 127.0.0.1:9000;\n```\n\n## 修改hosts\n\n```\n\t$ sudo vi /etc/hosts\n```\n\n增加以下内容并保存退出\n\n```\n127.0.0.1 www.wordpress.com\n```\n\n## 测试\n\n在浏览器输入\n\n```\nhttp://www.wordpress.com\n```\n\n看访问结果\n\n\n\n\n\n\n\n\n\n","source":"_posts/linux/linux-lnmp.md","raw":"title: Ubuntu下配置lnmp  \ndate: 2016-06-19 22:10:25  \ntags: linux   \ncategories: linux  \n \n---\n\n>环境：Ubuntu Linux 14.04\n\n# 安装软件仓库管理器\n\n```\n\t$ sudo apt-get install python-software-properties;\n```\n\n# 安装PHP\n\n## 安装php及扩展\n\n```\n\t$ sudo apt-get install python-software-properties;\n\t$ sudo add-apt-repository ppa:ondrej/php5-5.6;\n\t$ sudo apt-get update\n\t$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;\n```\n\n查看版本信息\n\n```\n   $ php5-fpm -v\rPHP 5.6.22-1+donate.sury.org~trusty+1 (fpm-fcgi)\rCopyright (c) 1997-2016 The PHP Group\rZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\r    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\r    with Xdebug v2.3.3, Copyright (c) 2002-2015, by Derick Rethans\n```\n\n## 常用命令\n\n### 关闭，开启，重启\n\n```\n\t$ sudo service php5-fpm stop \n\t$ sudo service php5-fpm start\n\t$ sudo service php5-fpm restart  \n```\n\n## 安装composer\n\n```\n\t$ sudo apt-get install curl\n\t$ sudo curl -sS https://getcomposer.org/installer | php\n\t$ sudo mv composer.phar /usr/local/bin/composer\n```\n\n\n# 安装Nginx\n\n## 安装Nginx\n\n```\n\t$ sudo add-apt-repository ppa:nginx/stable;\n\t$ sudo apt-get update;\n\t$ sudo apt-get install nginx;\n```\n\n查看版本信息\n\n```\n\t$ sudo nginx -v\n```\n\n## 常用命令\n\n启动 ，关闭，重启，配置重载\n\n```\n\t$ sudo service nginx start\n\t$ sudo service nginx stop\n\t$ sudo service nginx restart\n\t$ sudo service nginx reload  \n```\n\n# 安装mysql\n\n```\n\t$ sudo add-apt-repository -y ppa:ondrej/mysql-5.6\n\t$ sudo apt-get update\n\t$ sudo apt-get -y install mysql-server\n```\n\n登陆mysql创建账号\n\n```\n\t$ mysql -u root \n\tmysql>create database wordpress;\n\tmysql>grant all privileges on *.* to jceee identified by '123456';\n\tmysql>flush privileges;\n\tmysql>exit;\n```\n\n# 使用wordpress测试环境\n\n## 安装git\n\n```\n\t$ apt-get install git\n```\n\n## 创建项目文件夹\n\n```\n\t$ sudo mkdir -p /opt/htdocs/\n```\n\n## 下载wordpress\n\n```\n\t$ sudo git clone https://github.com/WordPress/WordPress /opt/htdocs/wordpress\n\t$ sudo chown -R www-data /opt/htdocs\n```\n\n## 增加Nginx配置\n\n```\n\t$ sudo vi /etc/nginx/conf.d/wordpress.conf\n```\n\n写入以下内容，保存并重载Nginx配置\n\n```\nserver {\r\r    listen 80;\r    server_name www.wordpress.com;\r    root /opt/htdocs/wordpress;\r\r    index index.html index.php;\r\r    location / {\r        index index.html index.php;\r    }\r\r    location ~ \\.php$ {\n            include fastcgi.conf;                  \n            fastcgi_pass unix:/var/run/php5-fpm.sock;\r    }\r}\n```\n\n如果php-fpm是以TPC/IP\t方式监听,如127.0.0.1:9000，则把上方\n\n```\n    fastcgi_pass unix:/var/run/php5-fpm.sock;\n```\n\n改为\n\n```\n\tfastcgi_pass 127.0.0.1:9000;\n```\n\n## 修改hosts\n\n```\n\t$ sudo vi /etc/hosts\n```\n\n增加以下内容并保存退出\n\n```\n127.0.0.1 www.wordpress.com\n```\n\n## 测试\n\n在浏览器输入\n\n```\nhttp://www.wordpress.com\n```\n\n看访问结果\n\n\n\n\n\n\n\n\n\n","slug":"linux/linux-lnmp","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p5001ei9sk5mkxr6xb","content":"<blockquote>\n<p>环境：Ubuntu Linux 14.04</p>\n</blockquote>\n<h1 id=\"u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668\"><a href=\"#u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668\" class=\"headerlink\" title=\"安装软件仓库管理器\"></a>安装软件仓库管理器</h1><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install python-software-<span class=\"built_in\">properties</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5PHP\"><a href=\"#u5B89_u88C5PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h1><h2 id=\"u5B89_u88C5php_u53CA_u6269_u5C55\"><a href=\"#u5B89_u88C5php_u53CA_u6269_u5C55\" class=\"headerlink\" title=\"安装php及扩展\"></a>安装php及扩展</h2><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-software-properties;</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>ppa:ondrej/php5-5.6;</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">   $ php5-fpm -v\rPHP <span class=\"number\">5.6</span><span class=\"number\">.22</span><span class=\"number\">-1</span>+donate.sury.org~trusty+<span class=\"number\">1</span> (fpm-fcgi)\rCopyright (c) <span class=\"number\">1997</span><span class=\"number\">-2016</span> The PHP Group\rZend Engine v2<span class=\"number\">.6</span><span class=\"number\">.0</span>, Copyright (c) <span class=\"number\">1998</span><span class=\"number\">-2016</span> Zend Technologies\r    with Zend OPcache v7<span class=\"number\">.0</span><span class=\"number\">.6</span>-dev, Copyright (c) <span class=\"number\">1999</span><span class=\"number\">-2016</span>, by Zend Technologies\r    with Xdebug v2<span class=\"number\">.3</span><span class=\"number\">.3</span>, Copyright (c) <span class=\"number\">2002</span><span class=\"number\">-2015</span>, by Derick Rethans</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5E38_u7528_u547D_u4EE4\"><a href=\"#u5E38_u7528_u547D_u4EE4\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F\"><a href=\"#u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F\" class=\"headerlink\" title=\"关闭，开启，重启\"></a>关闭，开启，重启</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm stop </span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm start</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B89_u88C5composer\"><a href=\"#u5B89_u88C5composer\" class=\"headerlink\" title=\"安装composer\"></a>安装composer</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>sudo apt-get install curl</span><br><span class=\"line\"><span class=\"variable\">$ </span>sudo curl -sS <span class=\"symbol\">https:</span>/<span class=\"regexp\">/getcomposer.org/installer</span> | php</span><br><span class=\"line\"><span class=\"variable\">$ </span>sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5Nginx\"><a href=\"#u5B89_u88C5Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h1><h2 id=\"u5B89_u88C5Nginx-1\"><a href=\"#u5B89_u88C5Nginx-1\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>ppa:nginx/stable;</span><br><span class=\"line\">$ sudo apt-get update;</span><br><span class=\"line\">$ sudo apt-get install nginx;</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>sudo nginx -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5E38_u7528_u547D_u4EE4-1\"><a href=\"#u5E38_u7528_u547D_u4EE4-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>启动 ，关闭，重启，配置重载</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx start</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx stop</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx restart</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5mysql\"><a href=\"#u5B89_u88C5mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>-y ppa:ondrej/mysql-5.6</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get -y install mysql-server</span><br></pre></td></tr></table></figure>\n<p>登陆mysql创建账号</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mysql -u root </span><br><span class=\"line\">mysql&gt;create database wordpress;</span><br><span class=\"line\">mysql&gt;grant all privileges on *.* to jceee identified by <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">mysql&gt;flush privileges;</span><br><span class=\"line\">mysql&gt;<span class=\"keyword\">exit</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883\"><a href=\"#u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883\" class=\"headerlink\" title=\"使用wordpress测试环境\"></a>使用wordpress测试环境</h1><h2 id=\"u5B89_u88C5git\"><a href=\"#u5B89_u88C5git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939\"><a href=\"#u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939\" class=\"headerlink\" title=\"创建项目文件夹\"></a>创建项目文件夹</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> /<span class=\"keyword\">opt</span>/htdocs/</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4E0B_u8F7Dwordpress\"><a href=\"#u4E0B_u8F7Dwordpress\" class=\"headerlink\" title=\"下载wordpress\"></a>下载wordpress</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/WordPress/WordPress /<span class=\"keyword\">opt</span>/htdocs/wordpress</span><br><span class=\"line\">$ sudo chown -R www-data /<span class=\"keyword\">opt</span>/htdocs</span><br></pre></td></tr></table></figure>\n<h2 id=\"u589E_u52A0Nginx_u914D_u7F6E\"><a href=\"#u589E_u52A0Nginx_u914D_u7F6E\" class=\"headerlink\" title=\"增加Nginx配置\"></a>增加Nginx配置</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"keyword\">vi</span> /etc/nginx/<span class=\"keyword\">conf</span>.d/wordpress.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n<p>写入以下内容，保存并重载Nginx配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;\r\r    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;\r    <span class=\"attribute\">server_name</span> www.wordpress.com;\r    <span class=\"attribute\">root</span> /opt/htdocs/wordpress;\r\r    <span class=\"attribute\">index</span> index.html index.php;\r\r    <span class=\"attribute\">location</span> / &#123;\r        <span class=\"attribute\">index</span> index.html index.php;\r    &#125;\r\r    <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">include</span> fastcgi.conf;                  </span><br><span class=\"line\">            <span class=\"attribute\">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;\r    &#125;\r&#125;</span><br></pre></td></tr></table></figure>\n<p>如果php-fpm是以TPC/IP    方式监听,如127.0.0.1:9000，则把上方</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastcgi_pass unix:/var/<span class=\"keyword\">run</span><span class=\"bash\">/php5-fpm.sock;</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">fastcgi_pass</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:9000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539hosts\"><a href=\"#u4FEE_u6539hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo vi <span class=\"regexp\">/etc/</span>hosts</span><br></pre></td></tr></table></figure>\n<p>增加以下内容并保存退出</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1</span> www.wordpress.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6D4B_u8BD5\"><a href=\"#u6D4B_u8BD5\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在浏览器输入</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//www.wordpress.com</span></span><br></pre></td></tr></table></figure>\n<p>看访问结果</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>环境：Ubuntu Linux 14.04</p>\n</blockquote>\n<h1 id=\"u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668\"><a href=\"#u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668\" class=\"headerlink\" title=\"安装软件仓库管理器\"></a>安装软件仓库管理器</h1><figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"built_in\">get</span> install python-software-<span class=\"built_in\">properties</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5PHP\"><a href=\"#u5B89_u88C5PHP\" class=\"headerlink\" title=\"安装PHP\"></a>安装PHP</h1><h2 id=\"u5B89_u88C5php_u53CA_u6269_u5C55\"><a href=\"#u5B89_u88C5php_u53CA_u6269_u5C55\" class=\"headerlink\" title=\"安装php及扩展\"></a>安装php及扩展</h2><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install python-software-properties;</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>ppa:ondrej/php5-5.6;</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">   $ php5-fpm -v\rPHP <span class=\"number\">5.6</span><span class=\"number\">.22</span><span class=\"number\">-1</span>+donate.sury.org~trusty+<span class=\"number\">1</span> (fpm-fcgi)\rCopyright (c) <span class=\"number\">1997</span><span class=\"number\">-2016</span> The PHP Group\rZend Engine v2<span class=\"number\">.6</span><span class=\"number\">.0</span>, Copyright (c) <span class=\"number\">1998</span><span class=\"number\">-2016</span> Zend Technologies\r    with Zend OPcache v7<span class=\"number\">.0</span><span class=\"number\">.6</span>-dev, Copyright (c) <span class=\"number\">1999</span><span class=\"number\">-2016</span>, by Zend Technologies\r    with Xdebug v2<span class=\"number\">.3</span><span class=\"number\">.3</span>, Copyright (c) <span class=\"number\">2002</span><span class=\"number\">-2015</span>, by Derick Rethans</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5E38_u7528_u547D_u4EE4\"><a href=\"#u5E38_u7528_u547D_u4EE4\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F\"><a href=\"#u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F\" class=\"headerlink\" title=\"关闭，开启，重启\"></a>关闭，开启，重启</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm stop </span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm start</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>php5-fpm restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B89_u88C5composer\"><a href=\"#u5B89_u88C5composer\" class=\"headerlink\" title=\"安装composer\"></a>安装composer</h2><figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>sudo apt-get install curl</span><br><span class=\"line\"><span class=\"variable\">$ </span>sudo curl -sS <span class=\"symbol\">https:</span>/<span class=\"regexp\">/getcomposer.org/installer</span> | php</span><br><span class=\"line\"><span class=\"variable\">$ </span>sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5Nginx\"><a href=\"#u5B89_u88C5Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h1><h2 id=\"u5B89_u88C5Nginx-1\"><a href=\"#u5B89_u88C5Nginx-1\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>ppa:nginx/stable;</span><br><span class=\"line\">$ sudo apt-get update;</span><br><span class=\"line\">$ sudo apt-get install nginx;</span><br></pre></td></tr></table></figure>\n<p>查看版本信息</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>sudo nginx -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5E38_u7528_u547D_u4EE4-1\"><a href=\"#u5E38_u7528_u547D_u4EE4-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>启动 ，关闭，重启，配置重载</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx start</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx stop</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx restart</span><br><span class=\"line\">$ sudo<span class=\"built_in\"> service </span>nginx reload</span><br></pre></td></tr></table></figure>\n<h1 id=\"u5B89_u88C5mysql\"><a href=\"#u5B89_u88C5mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h1><figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo<span class=\"built_in\"> add-apt-repository </span>-y ppa:ondrej/mysql-5.6</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get -y install mysql-server</span><br></pre></td></tr></table></figure>\n<p>登陆mysql创建账号</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mysql -u root </span><br><span class=\"line\">mysql&gt;create database wordpress;</span><br><span class=\"line\">mysql&gt;grant all privileges on *.* to jceee identified by <span class=\"string\">'123456'</span>;</span><br><span class=\"line\">mysql&gt;flush privileges;</span><br><span class=\"line\">mysql&gt;<span class=\"keyword\">exit</span>;</span><br></pre></td></tr></table></figure>\n<h1 id=\"u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883\"><a href=\"#u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883\" class=\"headerlink\" title=\"使用wordpress测试环境\"></a>使用wordpress测试环境</h1><h2 id=\"u5B89_u88C5git\"><a href=\"#u5B89_u88C5git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apt-<span class=\"builtin-name\">get</span> install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939\"><a href=\"#u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939\" class=\"headerlink\" title=\"创建项目文件夹\"></a>创建项目文件夹</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> /<span class=\"keyword\">opt</span>/htdocs/</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4E0B_u8F7Dwordpress\"><a href=\"#u4E0B_u8F7Dwordpress\" class=\"headerlink\" title=\"下载wordpress\"></a>下载wordpress</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/WordPress/WordPress /<span class=\"keyword\">opt</span>/htdocs/wordpress</span><br><span class=\"line\">$ sudo chown -R www-data /<span class=\"keyword\">opt</span>/htdocs</span><br></pre></td></tr></table></figure>\n<h2 id=\"u589E_u52A0Nginx_u914D_u7F6E\"><a href=\"#u589E_u52A0Nginx_u914D_u7F6E\" class=\"headerlink\" title=\"增加Nginx配置\"></a>增加Nginx配置</h2><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo <span class=\"keyword\">vi</span> /etc/nginx/<span class=\"keyword\">conf</span>.d/wordpress.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n<p>写入以下内容，保存并重载Nginx配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;\r\r    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;\r    <span class=\"attribute\">server_name</span> www.wordpress.com;\r    <span class=\"attribute\">root</span> /opt/htdocs/wordpress;\r\r    <span class=\"attribute\">index</span> index.html index.php;\r\r    <span class=\"attribute\">location</span> / &#123;\r        <span class=\"attribute\">index</span> index.html index.php;\r    &#125;\r\r    <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">include</span> fastcgi.conf;                  </span><br><span class=\"line\">            <span class=\"attribute\">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;\r    &#125;\r&#125;</span><br></pre></td></tr></table></figure>\n<p>如果php-fpm是以TPC/IP    方式监听,如127.0.0.1:9000，则把上方</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastcgi_pass unix:/var/<span class=\"keyword\">run</span><span class=\"bash\">/php5-fpm.sock;</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">fastcgi_pass</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-pseudo\">:9000</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539hosts\"><a href=\"#u4FEE_u6539hosts\" class=\"headerlink\" title=\"修改hosts\"></a>修改hosts</h2><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo vi <span class=\"regexp\">/etc/</span>hosts</span><br></pre></td></tr></table></figure>\n<p>增加以下内容并保存退出</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1</span> www.wordpress.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6D4B_u8BD5\"><a href=\"#u6D4B_u8BD5\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在浏览器输入</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//www.wordpress.com</span></span><br></pre></td></tr></table></figure>\n<p>看访问结果</p>\n","sticky":0},{"title":"php魔术方法__call","date":"2015-04-11T09:34:00.000Z","_content":"\n>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.\n\n\n```\n\tclass test\n\t{\n\t\tpublic function emptyFunc()\n\t\t{\n\t\t\t$getArgs = func_get_args();\n\t\t\t$funcName = $getArgs[0];\n\t\t\t//$params = array_slice($getArgs, 1);\n\t\t\t//var_dump($params);  // this is params                \n\t\t\treturn $funcName . ' function is not exists';\n\t\t}\n\t\t \n\t\tpublic function __call($m, $params)\n\t\t{\n\t\t\t$arr[] = $m;\n\t\t\t$arr = array_merge($arr, $params);\n\t\t\treturn call_user_func_array(array($this, 'emptyFunc'), $arr);\n\t\t}\n \n\t\tprotected function nowToTest()\n\t\t{ \n\t\t\treturn 'this is nowToTest';\n\t\t}\n\t}\n\t \n\t$testObj = new test();\n\tvar_dump($testObj->nowToTest('params1','params1'));\n\t//var_dump result => string(29) \"nowToTest function is not exists\"\n```\n\n如上`test`类中，`nowToTest`方法是存在的，但修饰这方法的是`protected`(保护)，所以实例出来的对象没权限执行,这时就跑到`__call`中去了.\n\n`_call()`有2个参数，第一个`$m`是当前调用方法的名字，这里是`nowToTest`,第二个`$params`是调用`nowToTest`方法时传入的参数。以数组的形式组合在$params中。 \n\n`call_user_func_array($method, $params)`这个php方法的作用是调用 `$method`方法，参数为`$params`,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是`emptyFunc`方法。 \n\n`func_get_args()`的作用是以数组形式获取传入的所有参数。而这些参数在`__call`中传入的，第一个参数就是方法名。所以最后返回的结果是\n\n\n```\n\t\"nowToTest function is not exists\"\n```","source":"_posts/php/php-call.md","raw":"title: php魔术方法__call\ndate: 2015-04-11 17:34  \ncategories: php  \ntags: php\n\n---\n\n>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.\n\n\n```\n\tclass test\n\t{\n\t\tpublic function emptyFunc()\n\t\t{\n\t\t\t$getArgs = func_get_args();\n\t\t\t$funcName = $getArgs[0];\n\t\t\t//$params = array_slice($getArgs, 1);\n\t\t\t//var_dump($params);  // this is params                \n\t\t\treturn $funcName . ' function is not exists';\n\t\t}\n\t\t \n\t\tpublic function __call($m, $params)\n\t\t{\n\t\t\t$arr[] = $m;\n\t\t\t$arr = array_merge($arr, $params);\n\t\t\treturn call_user_func_array(array($this, 'emptyFunc'), $arr);\n\t\t}\n \n\t\tprotected function nowToTest()\n\t\t{ \n\t\t\treturn 'this is nowToTest';\n\t\t}\n\t}\n\t \n\t$testObj = new test();\n\tvar_dump($testObj->nowToTest('params1','params1'));\n\t//var_dump result => string(29) \"nowToTest function is not exists\"\n```\n\n如上`test`类中，`nowToTest`方法是存在的，但修饰这方法的是`protected`(保护)，所以实例出来的对象没权限执行,这时就跑到`__call`中去了.\n\n`_call()`有2个参数，第一个`$m`是当前调用方法的名字，这里是`nowToTest`,第二个`$params`是调用`nowToTest`方法时传入的参数。以数组的形式组合在$params中。 \n\n`call_user_func_array($method, $params)`这个php方法的作用是调用 `$method`方法，参数为`$params`,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是`emptyFunc`方法。 \n\n`func_get_args()`的作用是以数组形式获取传入的所有参数。而这些参数在`__call`中传入的，第一个参数就是方法名。所以最后返回的结果是\n\n\n```\n\t\"nowToTest function is not exists\"\n```","slug":"php/php-call","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p5001ii9sk0psh2gyz","content":"<blockquote>\n<p>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emptyFunc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t$getArgs = func_get_args();</span><br><span class=\"line\">\t\t$funcName = $getArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//$params = array_slice($getArgs, 1);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//var_dump($params);  // this is params                </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $funcName . <span class=\"string\">' function is not exists'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">($m, $params)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t$arr[] = $m;</span><br><span class=\"line\">\t\t$arr = array_merge($arr, $params);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> call_user_func_array(<span class=\"keyword\">array</span>(<span class=\"keyword\">$this</span>, <span class=\"string\">'emptyFunc'</span>), $arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nowToTest</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'this is nowToTest'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">$testObj = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">var_dump($testObj-&gt;nowToTest(<span class=\"string\">'params1'</span>,<span class=\"string\">'params1'</span>));</span><br><span class=\"line\"><span class=\"comment\">//var_dump result =&gt; string(29) \"nowToTest function is not exists\"</span></span><br></pre></td></tr></table></figure>\n<p>如上<code>test</code>类中，<code>nowToTest</code>方法是存在的，但修饰这方法的是<code>protected</code>(保护)，所以实例出来的对象没权限执行,这时就跑到<code>__call</code>中去了.</p>\n<p><code>_call()</code>有2个参数，第一个<code>$m</code>是当前调用方法的名字，这里是<code>nowToTest</code>,第二个<code>$params</code>是调用<code>nowToTest</code>方法时传入的参数。以数组的形式组合在$params中。 </p>\n<p><code>call_user_func_array($method, $params)</code>这个php方法的作用是调用 <code>$method</code>方法，参数为<code>$params</code>,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是<code>emptyFunc</code>方法。 </p>\n<p><code>func_get_args()</code>的作用是以数组形式获取传入的所有参数。而这些参数在<code>__call</code>中传入的，第一个参数就是方法名。所以最后返回的结果是</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"nowToTest function is not exists\"</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>_call是魔术方法中的一个，当程序调用到当前类中未声明或没权限调用的方法时，就会调用__call方法.</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emptyFunc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t$getArgs = func_get_args();</span><br><span class=\"line\">\t\t$funcName = $getArgs[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"comment\">//$params = array_slice($getArgs, 1);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//var_dump($params);  // this is params                </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $funcName . <span class=\"string\">' function is not exists'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span><span class=\"params\">($m, $params)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t$arr[] = $m;</span><br><span class=\"line\">\t\t$arr = array_merge($arr, $params);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> call_user_func_array(<span class=\"keyword\">array</span>(<span class=\"keyword\">$this</span>, <span class=\"string\">'emptyFunc'</span>), $arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nowToTest</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">'this is nowToTest'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">$testObj = <span class=\"keyword\">new</span> test();</span><br><span class=\"line\">var_dump($testObj-&gt;nowToTest(<span class=\"string\">'params1'</span>,<span class=\"string\">'params1'</span>));</span><br><span class=\"line\"><span class=\"comment\">//var_dump result =&gt; string(29) \"nowToTest function is not exists\"</span></span><br></pre></td></tr></table></figure>\n<p>如上<code>test</code>类中，<code>nowToTest</code>方法是存在的，但修饰这方法的是<code>protected</code>(保护)，所以实例出来的对象没权限执行,这时就跑到<code>__call</code>中去了.</p>\n<p><code>_call()</code>有2个参数，第一个<code>$m</code>是当前调用方法的名字，这里是<code>nowToTest</code>,第二个<code>$params</code>是调用<code>nowToTest</code>方法时传入的参数。以数组的形式组合在$params中。 </p>\n<p><code>call_user_func_array($method, $params)</code>这个php方法的作用是调用 <code>$method</code>方法，参数为<code>$params</code>,如果方法是在类中的话，就用上面那种数组形式调用就可以了，这里调用的是<code>emptyFunc</code>方法。 </p>\n<p><code>func_get_args()</code>的作用是以数组形式获取传入的所有参数。而这些参数在<code>__call</code>中传入的，第一个参数就是方法名。所以最后返回的结果是</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"nowToTest function is not exists\"</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"PHP的自动加载","date":"2014-12-28T10:13:00.000Z","_content":"\n以前php的加载是通过`include()`,`require()`等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。\n\n这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:\n\n```\nfunction __autoload($classname)\n{\n\t$classpath = './' . $classname . '.php';\n\tif (file_exists($classpath)) {\n\t    require_once($classpath);\n\t}else {\n\t    echo 'class file'.$classpath.'not found!';\n\t}\n}\n \nvar_dump(spl_autoload_functions());\nspl_autoload_register('newAutoload');\nvar_dump(spl_autoload_functions());\n \n$testObj1 = getInstance('test');\n$testObj2 = getInstance('test');\n$testObj3 = getInstance('test');\n \nfunction getInstance($class, $returnInstance = false)\n{\n    return new $class();\n}\n \nfunction newAutoload($classname)\n{ \n    $classpath = './' . $classname . '.php';\n    if (file_exists($classpath)) {\n        var_dump('require success');\n        require_once($classpath);\n    } else {\n        echo 'class file ' . $classpath . ' not found!';\n    }\n}\n//array\n//  0 => string '__autoload' (length=10)\n//array\n//  0 => string 'newAutoload' (length=11)\n//string 'require success' (length=15)\n```\n\n`spl_autoload_functions()` 方法是用来查看当前自动加载的方法，当前有个`__autoload`魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 `spl_autoload_register()` 方法是通过方法名将一个方法注册到自动加载方法，这里用`newAutoload`方法来替换`__autoload`方法。\n\n`newAutoload`方法中，我们定义一下，每执行成功一次，打印一句'require success'，这里只打印了一次，说明了虽然实例了3次`test`，但因为`test`类已经加载过一次，就不会再执行自动加载的方法。通过`getInstance()`这种加载类的方法，比以前的`include()`之类的方便多了，只需要加载这个写了`getInstance()`方法的文件就可以了。\n\n重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。\n","source":"_posts/php/php-authoload.md","raw":"title: PHP的自动加载\ndate: 2014-12-28 18:13\ncategories: php  \ntags: php\n\n---\n\n以前php的加载是通过`include()`,`require()`等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。\n\n这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:\n\n```\nfunction __autoload($classname)\n{\n\t$classpath = './' . $classname . '.php';\n\tif (file_exists($classpath)) {\n\t    require_once($classpath);\n\t}else {\n\t    echo 'class file'.$classpath.'not found!';\n\t}\n}\n \nvar_dump(spl_autoload_functions());\nspl_autoload_register('newAutoload');\nvar_dump(spl_autoload_functions());\n \n$testObj1 = getInstance('test');\n$testObj2 = getInstance('test');\n$testObj3 = getInstance('test');\n \nfunction getInstance($class, $returnInstance = false)\n{\n    return new $class();\n}\n \nfunction newAutoload($classname)\n{ \n    $classpath = './' . $classname . '.php';\n    if (file_exists($classpath)) {\n        var_dump('require success');\n        require_once($classpath);\n    } else {\n        echo 'class file ' . $classpath . ' not found!';\n    }\n}\n//array\n//  0 => string '__autoload' (length=10)\n//array\n//  0 => string 'newAutoload' (length=11)\n//string 'require success' (length=15)\n```\n\n`spl_autoload_functions()` 方法是用来查看当前自动加载的方法，当前有个`__autoload`魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 `spl_autoload_register()` 方法是通过方法名将一个方法注册到自动加载方法，这里用`newAutoload`方法来替换`__autoload`方法。\n\n`newAutoload`方法中，我们定义一下，每执行成功一次，打印一句'require success'，这里只打印了一次，说明了虽然实例了3次`test`，但因为`test`类已经加载过一次，就不会再执行自动加载的方法。通过`getInstance()`这种加载类的方法，比以前的`include()`之类的方便多了，只需要加载这个写了`getInstance()`方法的文件就可以了。\n\n重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。\n","slug":"php/php-authoload","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p6001ki9sk4dc4zfw7","content":"<p>以前php的加载是通过<code>include()</code>,<code>require()</code>等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。</p>\n<p>这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($classname)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t$classpath = <span class=\"string\">'./'</span> . $classname . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file_exists($classpath)) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">require_once</span>($classpath);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">echo</span> <span class=\"string\">'class file'</span>.$classpath.<span class=\"string\">'not found!'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\">spl_autoload_register(<span class=\"string\">'newAutoload'</span>);</span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\"> </span><br><span class=\"line\">$testObj1 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">$testObj2 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">$testObj3 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($class, $returnInstance = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> $class();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newAutoload</span><span class=\"params\">($classname)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    $classpath = <span class=\"string\">'./'</span> . $classname . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($classpath)) &#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'require success'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">require_once</span>($classpath);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'class file '</span> . $classpath . <span class=\"string\">' not found!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//array</span></span><br><span class=\"line\"><span class=\"comment\">//  0 =&gt; string '__autoload' (length=10)</span></span><br><span class=\"line\"><span class=\"comment\">//array</span></span><br><span class=\"line\"><span class=\"comment\">//  0 =&gt; string 'newAutoload' (length=11)</span></span><br><span class=\"line\"><span class=\"comment\">//string 'require success' (length=15)</span></span><br></pre></td></tr></table></figure>\n<p><code>spl_autoload_functions()</code> 方法是用来查看当前自动加载的方法，当前有个<code>__autoload</code>魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 <code>spl_autoload_register()</code> 方法是通过方法名将一个方法注册到自动加载方法，这里用<code>newAutoload</code>方法来替换<code>__autoload</code>方法。</p>\n<p><code>newAutoload</code>方法中，我们定义一下，每执行成功一次，打印一句’require success’，这里只打印了一次，说明了虽然实例了3次<code>test</code>，但因为<code>test</code>类已经加载过一次，就不会再执行自动加载的方法。通过<code>getInstance()</code>这种加载类的方法，比以前的<code>include()</code>之类的方便多了，只需要加载这个写了<code>getInstance()</code>方法的文件就可以了。</p>\n<p>重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前php的加载是通过<code>include()</code>,<code>require()</code>等方法来加载外部文件，之后再通过实例调用方法或直接调用静态方法，而这样子写引入语句实在很麻烦，有的框架会将特定路径的文件全部引入，直接实例化就能使用，但这样一来有的类包不一定用到，写的类包越多的时候，加载的东西就不少了，影响程序的性能。</p>\n<p>这里介绍一下php自带的标准库SPL(Standard PHP Library)的自动加载:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($classname)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t$classpath = <span class=\"string\">'./'</span> . $classname . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (file_exists($classpath)) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">require_once</span>($classpath);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">echo</span> <span class=\"string\">'class file'</span>.$classpath.<span class=\"string\">'not found!'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\">spl_autoload_register(<span class=\"string\">'newAutoload'</span>);</span><br><span class=\"line\">var_dump(spl_autoload_functions());</span><br><span class=\"line\"> </span><br><span class=\"line\">$testObj1 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">$testObj2 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\">$testObj3 = getInstance(<span class=\"string\">'test'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">($class, $returnInstance = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> $class();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newAutoload</span><span class=\"params\">($classname)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    $classpath = <span class=\"string\">'./'</span> . $classname . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($classpath)) &#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'require success'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">require_once</span>($classpath);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'class file '</span> . $classpath . <span class=\"string\">' not found!'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//array</span></span><br><span class=\"line\"><span class=\"comment\">//  0 =&gt; string '__autoload' (length=10)</span></span><br><span class=\"line\"><span class=\"comment\">//array</span></span><br><span class=\"line\"><span class=\"comment\">//  0 =&gt; string 'newAutoload' (length=11)</span></span><br><span class=\"line\"><span class=\"comment\">//string 'require success' (length=15)</span></span><br></pre></td></tr></table></figure>\n<p><code>spl_autoload_functions()</code> 方法是用来查看当前自动加载的方法，当前有个<code>__autoload</code>魔术方法，所以返回了函数名，若没定义自动加载方法的话，返回的是false,而 <code>spl_autoload_register()</code> 方法是通过方法名将一个方法注册到自动加载方法，这里用<code>newAutoload</code>方法来替换<code>__autoload</code>方法。</p>\n<p><code>newAutoload</code>方法中，我们定义一下，每执行成功一次，打印一句’require success’，这里只打印了一次，说明了虽然实例了3次<code>test</code>，但因为<code>test</code>类已经加载过一次，就不会再执行自动加载的方法。通过<code>getInstance()</code>这种加载类的方法，比以前的<code>include()</code>之类的方便多了，只需要加载这个写了<code>getInstance()</code>方法的文件就可以了。</p>\n<p>重写的自动加载方法可以根据需要，通过判断类的名字，定义不同的文件路径。</p>\n","sticky":0},{"title":"int值边界值","date":"2014-11-29T10:24:00.000Z","_content":"\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","source":"_posts/php/php-intMaxVal.md","raw":"title: int值边界值\ndate: 2014-11-29 18:24\ntags: intval\ncategories: php\n\n---\n\n在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：\n\n```php\n\tvar_dump(intval('13800138000'));//  int 2147483647\n```\n\n之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。\n\n* 在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；\n\n* 在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；\n\n仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。\n\n考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       \n\n```php\n\tfunction getNum($str, $default = 0){\n\t    return preg_match('/[\\d]+/', $str, $int) ? $int[0]: $default;\n\t}\n\t$str = '13800138000';\n\tvar_dump(getNum($str)); //string '13800138000' (length=11)\n```","slug":"php/php-intMaxVal","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p6001oi9skdz9lwjea","content":"<p>在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(intval(<span class=\"string\">'13800138000'</span>));<span class=\"comment\">//  int 2147483647</span></span><br></pre></td></tr></table></figure>\n<p>之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。</p>\n<ul>\n<li><p>在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；</p>\n</li>\n<li><p>在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；</p>\n</li>\n</ul>\n<p>仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。</p>\n<p>考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       </p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span><span class=\"params\">($str, $default = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_match(<span class=\"string\">'/[\\d]+/'</span>, $str, $int) ? $int[<span class=\"number\">0</span>]: $default;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$str = <span class=\"string\">'13800138000'</span>;</span><br><span class=\"line\">var_dump(getNum($str)); <span class=\"comment\">//string '13800138000' (length=11)</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在代码中我将接收的手机号码用intval()转成整形，发现返回的整形数据都变成一个值：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(intval(<span class=\"string\">'13800138000'</span>));<span class=\"comment\">//  int 2147483647</span></span><br></pre></td></tr></table></figure>\n<p>之前从来没发生过这种事情，为何intval调皮了，于是查了一下intval()，发现这个值是32位系统中int的边界值。</p>\n<ul>\n<li><p>在32位的系统环境下，intval边界值是-2147483648到2147483647(2^32)；</p>\n</li>\n<li><p>在64位的系统环境下，intval边界值是-9223372036854775808到9223372036854775807(2^64)；</p>\n</li>\n</ul>\n<p>仔细地回想了一下，之前一直在64位系统下开发，11位的手机号码并不超过其边界值，所以没注意过这个问题，而现在用着的是32位系统，本地一玩就出问题了，涨姿势。</p>\n<p>考虑了一下，发现一般的数字数据如状态值，错误码之类的不超过2147483647的数据用intval()还是不错的，若是长一些的数字如qq号码，手机号码等还是得用其他方法获取好些，正则式取数值：       </p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNum</span><span class=\"params\">($str, $default = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> preg_match(<span class=\"string\">'/[\\d]+/'</span>, $str, $int) ? $int[<span class=\"number\">0</span>]: $default;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$str = <span class=\"string\">'13800138000'</span>;</span><br><span class=\"line\">var_dump(getNum($str)); <span class=\"comment\">//string '13800138000' (length=11)</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"php-config","date":"2016-10-14T09:39:00.000Z","_content":"\n>php配置\n\n# PHP config\n\n## 隐藏php版本号\n\n通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:44:22 GMT\nServer:nginx\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.6.16\n```\n\n我们想隐藏掉`X-Powered-By:PHP/5.6.16`只需修改一个地方：php.ini中的`expose_php`,把`On`改为`Off`即可\n\n```\nexpose_php = Off\n```\n\n效果如下\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:46:31 GMT\nServer:nginx\nTransfer-Encoding:chunked\n```\n","source":"_posts/php/php-config.md","raw":"title: php-config\ndate: 2016-10-14 17:39:00\ntags: php\ncategory: php\n\n---\n\n>php配置\n\n# PHP config\n\n## 隐藏php版本号\n\n通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:44:22 GMT\nServer:nginx\nTransfer-Encoding:chunked\nX-Powered-By:PHP/5.6.16\n```\n\n我们想隐藏掉`X-Powered-By:PHP/5.6.16`只需修改一个地方：php.ini中的`expose_php`,把`On`改为`Off`即可\n\n```\nexpose_php = Off\n```\n\n效果如下\n\n```\ncache-control:no-cache\nConnection:keep-alive\nContent-Type:text/html; charset=UTF-8\ndate:Fri, 14 Oct 2016 09:46:31 GMT\nServer:nginx\nTransfer-Encoding:chunked\n```\n","slug":"php/php-config","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p7001qi9skwjg673vp","content":"<blockquote>\n<p>php配置</p>\n</blockquote>\n<h1 id=\"PHP_config\"><a href=\"#PHP_config\" class=\"headerlink\" title=\"PHP config\"></a>PHP config</h1><h2 id=\"u9690_u85CFphp_u7248_u672C_u53F7\"><a href=\"#u9690_u85CFphp_u7248_u672C_u53F7\" class=\"headerlink\" title=\"隐藏php版本号\"></a>隐藏php版本号</h2><p>通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cache</span>-control:<span class=\"keyword\">no</span>-<span class=\"keyword\">cache</span></span><br><span class=\"line\"><span class=\"keyword\">Connection</span>:<span class=\"keyword\">keep</span>-alive</span><br><span class=\"line\"><span class=\"keyword\">Content</span>-<span class=\"keyword\">Type</span>:<span class=\"built_in\">text</span>/html; charset=UTF-8</span><br><span class=\"line\">date:Fri, 14 Oct 2016 09:44:22 GMT</span><br><span class=\"line\">Server:nginx</span><br><span class=\"line\">Transfer-Encoding:chunked</span><br><span class=\"line\">X-Powered-By:PHP/5.6.16</span><br></pre></td></tr></table></figure>\n<p>我们想隐藏掉<code>X-Powered-By:PHP/5.6.16</code>只需修改一个地方：php.ini中的<code>expose_php</code>,把<code>On</code>改为<code>Off</code>即可</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">expose_php</span> = <span class=\"literal\">Off</span></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cache</span>-control:<span class=\"keyword\">no</span>-<span class=\"keyword\">cache</span></span><br><span class=\"line\"><span class=\"keyword\">Connection</span>:<span class=\"keyword\">keep</span>-alive</span><br><span class=\"line\"><span class=\"keyword\">Content</span>-<span class=\"keyword\">Type</span>:<span class=\"built_in\">text</span>/html; charset=UTF-8</span><br><span class=\"line\">date:Fri, 14 Oct 2016 09:46:31 GMT</span><br><span class=\"line\">Server:nginx</span><br><span class=\"line\">Transfer-Encoding:chunked</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>php配置</p>\n</blockquote>\n<h1 id=\"PHP_config\"><a href=\"#PHP_config\" class=\"headerlink\" title=\"PHP config\"></a>PHP config</h1><h2 id=\"u9690_u85CFphp_u7248_u672C_u53F7\"><a href=\"#u9690_u85CFphp_u7248_u672C_u53F7\" class=\"headerlink\" title=\"隐藏php版本号\"></a>隐藏php版本号</h2><p>通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cache</span>-control:<span class=\"keyword\">no</span>-<span class=\"keyword\">cache</span></span><br><span class=\"line\"><span class=\"keyword\">Connection</span>:<span class=\"keyword\">keep</span>-alive</span><br><span class=\"line\"><span class=\"keyword\">Content</span>-<span class=\"keyword\">Type</span>:<span class=\"built_in\">text</span>/html; charset=UTF-8</span><br><span class=\"line\">date:Fri, 14 Oct 2016 09:44:22 GMT</span><br><span class=\"line\">Server:nginx</span><br><span class=\"line\">Transfer-Encoding:chunked</span><br><span class=\"line\">X-Powered-By:PHP/5.6.16</span><br></pre></td></tr></table></figure>\n<p>我们想隐藏掉<code>X-Powered-By:PHP/5.6.16</code>只需修改一个地方：php.ini中的<code>expose_php</code>,把<code>On</code>改为<code>Off</code>即可</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">expose_php</span> = <span class=\"literal\">Off</span></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cache</span>-control:<span class=\"keyword\">no</span>-<span class=\"keyword\">cache</span></span><br><span class=\"line\"><span class=\"keyword\">Connection</span>:<span class=\"keyword\">keep</span>-alive</span><br><span class=\"line\"><span class=\"keyword\">Content</span>-<span class=\"keyword\">Type</span>:<span class=\"built_in\">text</span>/html; charset=UTF-8</span><br><span class=\"line\">date:Fri, 14 Oct 2016 09:46:31 GMT</span><br><span class=\"line\">Server:nginx</span><br><span class=\"line\">Transfer-Encoding:chunked</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"php性状(trait)","date":"2016-02-12T11:30:48.000Z","_content":"\n>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。\n\n性状有两个作用：\n\n* 表明类可以做什么（接口）\n* 提供模块化实现（类）\n\n## 创建性状\n\n```php\n\ttrait TestTrait\n\t{\n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t}\n```\n\n## 使用性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait;\n\t    protected $something = 'something';\n\t}\n\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: something\n\t */\n```\n\n## 抽象方法,静态方法与静态属性\n\nTrait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性\n\n```php\n\ttrait TestTrait\n\t{\n\t    static $num;\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t\n\t    abstract public function showHelloWorld();\n\t    \n\t    static public function getNew()\n\t    {\n\t        return date('Y-m-d H:i:s');\n\t    }\n\t\n\t    public function addNum()\n\t    {\n\t        self::$num ++;\n\t        return self::$num;\n\t    } \n\t}\n\t\n\tclass Test\n\t{\n\t    use TestTrait;\n\t\n\t    protected $something = 'something';\n\t\n\t    public function showHelloWorld()\n\t    {\n\t        var_dump('hello world');\n\t    }\n\t}\n\n\t$test = new Test();\n\t\n\t$test->showHelloWorld();\n\t\n\tvar_dump(Test::getNew());\n\t\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\t\n\t\n\t/** \n\t *result:\n\t * string(11) \"hello world\"\n\t * string(19) \"2016-02-12 21:11:27\"\n\t * int(1)\n\t * int(2)\n\t * int(3)\n\t * int(4)\n\t */\n```\n\n## Trait方法优先级\n\n性状定义的方法的优先级是：\n\n```\n当前类中的方法 > Trait的方法\b > 基类中的方法\n```\n\n## 使用多个Trait\n\n使用多个trait时，需要用`,`分隔开不同的性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait,OtherTrait;\n\t    protected $something = 'something';\n\t    ...\n\t}\n```\n\n## insteadof\n\n两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源\n\nTrait1::method insteadof Trait2\n\ninsteadof是将trait2中的方法method代替成trait1中的method\n\n\n```php\n\ttrait OtherTrait\n\t{\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something . ' from other';\n\t    }\n\t    \n\t    public function showOther()\n\t    {\n\t        return 'this is other';\n\t    }\n\t}\n\t\n\t\n\tclass Test\n\t{\n\t    use TestTrait, OtherTrait {\n\t        OtherTrait::getSomething insteadof TestTrait;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: \n\t * something from other\n\t */\n```\n\n## as\n\ntrait::method as public|protected|private otherMethodName\n\nas 是给方法取一个别名,同时还可以声明方法的访问控制\n\n```\n\tclass Test\n\t{\n\t    use TestTrait {\n\t        TestTrait::getSomething as public getSomethingPart2;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\tvar_dump($test->getSomethingPart2());\n\t\n\t/**\n\t * result: \n\t * something  \n\t * something\n\t */\n```\n\n## 组合\n\ntrait同样可以引用其他trait,用法跟类一致.\n\n```php\n\ttrait ThreeTrait\n\t{\n\t    use OtherTrait;\n\t}\n```\n","source":"_posts/php/php-trait.md","raw":"title: php性状(trait)  \ndate: 2016-02-12 19:30:48  \ncategories: php    \ntags: php  \n\n---\n\n>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。\n\n性状有两个作用：\n\n* 表明类可以做什么（接口）\n* 提供模块化实现（类）\n\n## 创建性状\n\n```php\n\ttrait TestTrait\n\t{\n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t}\n```\n\n## 使用性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait;\n\t    protected $something = 'something';\n\t}\n\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: something\n\t */\n```\n\n## 抽象方法,静态方法与静态属性\n\nTrait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性\n\n```php\n\ttrait TestTrait\n\t{\n\t    static $num;\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something;\n\t    }\n\t\n\t    abstract public function showHelloWorld();\n\t    \n\t    static public function getNew()\n\t    {\n\t        return date('Y-m-d H:i:s');\n\t    }\n\t\n\t    public function addNum()\n\t    {\n\t        self::$num ++;\n\t        return self::$num;\n\t    } \n\t}\n\t\n\tclass Test\n\t{\n\t    use TestTrait;\n\t\n\t    protected $something = 'something';\n\t\n\t    public function showHelloWorld()\n\t    {\n\t        var_dump('hello world');\n\t    }\n\t}\n\n\t$test = new Test();\n\t\n\t$test->showHelloWorld();\n\t\n\tvar_dump(Test::getNew());\n\t\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\tvar_dump($test->addNum());\n\t\n\t\n\t/** \n\t *result:\n\t * string(11) \"hello world\"\n\t * string(19) \"2016-02-12 21:11:27\"\n\t * int(1)\n\t * int(2)\n\t * int(3)\n\t * int(4)\n\t */\n```\n\n## Trait方法优先级\n\n性状定义的方法的优先级是：\n\n```\n当前类中的方法 > Trait的方法\b > 基类中的方法\n```\n\n## 使用多个Trait\n\n使用多个trait时，需要用`,`分隔开不同的性状\n\n```php\n\tclass Test\n\t{\n\t    use TestTrait,OtherTrait;\n\t    protected $something = 'something';\n\t    ...\n\t}\n```\n\n## insteadof\n\n两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源\n\nTrait1::method insteadof Trait2\n\ninsteadof是将trait2中的方法method代替成trait1中的method\n\n\n```php\n\ttrait OtherTrait\n\t{\n\t    \n\t    public function getSomething()\n\t    {\n\t        return $this->something . ' from other';\n\t    }\n\t    \n\t    public function showOther()\n\t    {\n\t        return 'this is other';\n\t    }\n\t}\n\t\n\t\n\tclass Test\n\t{\n\t    use TestTrait, OtherTrait {\n\t        OtherTrait::getSomething insteadof TestTrait;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\t\n\t/**\n\t * result: \n\t * something from other\n\t */\n```\n\n## as\n\ntrait::method as public|protected|private otherMethodName\n\nas 是给方法取一个别名,同时还可以声明方法的访问控制\n\n```\n\tclass Test\n\t{\n\t    use TestTrait {\n\t        TestTrait::getSomething as public getSomethingPart2;\n\t    }\n\t\n\t    protected $something = 'something';\n\t}\n\t\n\t$test = new Test();\n\tvar_dump($test->getSomething());\n\tvar_dump($test->getSomethingPart2());\n\t\n\t/**\n\t * result: \n\t * something  \n\t * something\n\t */\n```\n\n## 组合\n\ntrait同样可以引用其他trait,用法跟类一致.\n\n```php\n\ttrait ThreeTrait\n\t{\n\t    use OtherTrait;\n\t}\n```\n","slug":"php/php-trait","published":1,"updated":"2021-10-08T04:04:41.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p7001ui9sk02otl3q3","content":"<blockquote>\n<p>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。</p>\n</blockquote>\n<p>性状有两个作用：</p>\n<ul>\n<li>表明类可以做什么（接口）</li>\n<li>提供模块化实现（类）</li>\n</ul>\n<h2 id=\"u521B_u5EFA_u6027_u72B6\"><a href=\"#u521B_u5EFA_u6027_u72B6\" class=\"headerlink\" title=\"创建性状\"></a>创建性状</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> TestTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F7F_u7528_u6027_u72B6\"><a href=\"#u4F7F_u7528_u6027_u72B6\" class=\"headerlink\" title=\"使用性状\"></a>使用性状</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: something</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u62BD_u8C61_u65B9_u6CD5_2C_u9759_u6001_u65B9_u6CD5_u4E0E_u9759_u6001_u5C5E_u6027\"><a href=\"#u62BD_u8C61_u65B9_u6CD5_2C_u9759_u6001_u65B9_u6CD5_u4E0E_u9759_u6001_u5C5E_u6027\" class=\"headerlink\" title=\"抽象方法,静态方法与静态属性\"></a>抽象方法,静态方法与静态属性</h2><p>Trait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> TestTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> $num;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelloWorld</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date(<span class=\"string\">'Y-m-d H:i:s'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::$num ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$num;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelloWorld</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"></span><br><span class=\"line\">$test-&gt;showHelloWorld();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(Test::getNew());</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> *result:</span></span><br><span class=\"line\"><span class=\"comment\"> * string(11) \"hello world\"</span></span><br><span class=\"line\"><span class=\"comment\"> * string(19) \"2016-02-12 21:11:27\"</span></span><br><span class=\"line\"><span class=\"comment\"> * int(1)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(2)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(3)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(4)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Trait_u65B9_u6CD5_u4F18_u5148_u7EA7\"><a href=\"#Trait_u65B9_u6CD5_u4F18_u5148_u7EA7\" class=\"headerlink\" title=\"Trait方法优先级\"></a>Trait方法优先级</h2><p>性状定义的方法的优先级是：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"code\"><pre><span class=\"line\">当前类中的方法 &gt; <span class=\"keyword\">Trait</span>的方法\b &gt; 基类中的方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F7F_u7528_u591A_u4E2ATrait\"><a href=\"#u4F7F_u7528_u591A_u4E2ATrait\" class=\"headerlink\" title=\"使用多个Trait\"></a>使用多个Trait</h2><p>使用多个trait时，需要用<code>,</code>分隔开不同的性状</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>,<span class=\"title\">OtherTrait</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"insteadof\"><a href=\"#insteadof\" class=\"headerlink\" title=\"insteadof\"></a>insteadof</h2><p>两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源</p>\n<p>Trait1::method insteadof Trait2</p>\n<p>insteadof是将trait2中的方法method代替成trait1中的method</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> OtherTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something . <span class=\"string\">' from other'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showOther</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'this is other'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>, <span class=\"title\">OtherTrait</span> &#123;</span><br><span class=\"line\">        <span class=\"title\">OtherTrait</span>::<span class=\"title\">getSomething</span> <span class=\"title\">insteadof</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: </span></span><br><span class=\"line\"><span class=\"comment\"> * something from other</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h2><p>trait::method as public|protected|private otherMethodName</p>\n<p>as 是给方法取一个别名,同时还可以声明方法的访问控制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span> &#123;</span><br><span class=\"line\">        <span class=\"title\">TestTrait</span>::<span class=\"title\">getSomething</span> <span class=\"title\">as</span> <span class=\"title\">public</span> <span class=\"title\">getSomethingPart2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\">var_dump($test-&gt;getSomethingPart2());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: </span></span><br><span class=\"line\"><span class=\"comment\"> * something  </span></span><br><span class=\"line\"><span class=\"comment\"> * something</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u7EC4_u5408\"><a href=\"#u7EC4_u5408\" class=\"headerlink\" title=\"组合\"></a>组合</h2><p>trait同样可以引用其他trait,用法跟类一致.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> ThreeTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">OtherTrait</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Trait是php5.4.0引入的新概念，是类的部分实现，可以混入一个或多个现有的php类中。</p>\n</blockquote>\n<p>性状有两个作用：</p>\n<ul>\n<li>表明类可以做什么（接口）</li>\n<li>提供模块化实现（类）</li>\n</ul>\n<h2 id=\"u521B_u5EFA_u6027_u72B6\"><a href=\"#u521B_u5EFA_u6027_u72B6\" class=\"headerlink\" title=\"创建性状\"></a>创建性状</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> TestTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F7F_u7528_u6027_u72B6\"><a href=\"#u4F7F_u7528_u6027_u72B6\" class=\"headerlink\" title=\"使用性状\"></a>使用性状</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: something</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u62BD_u8C61_u65B9_u6CD5_2C_u9759_u6001_u65B9_u6CD5_u4E0E_u9759_u6001_u5C5E_u6027\"><a href=\"#u62BD_u8C61_u65B9_u6CD5_2C_u9759_u6001_u65B9_u6CD5_u4E0E_u9759_u6001_u5C5E_u6027\" class=\"headerlink\" title=\"抽象方法,静态方法与静态属性\"></a>抽象方法,静态方法与静态属性</h2><p>Trait跟类一样，也支持抽象方法的定义，还有静态方法，静态属性</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> TestTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> $num;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelloWorld</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNew</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date(<span class=\"string\">'Y-m-d H:i:s'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addNum</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>::$num ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$num;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showHelloWorld</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var_dump(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\"></span><br><span class=\"line\">$test-&gt;showHelloWorld();</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(Test::getNew());</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\">var_dump($test-&gt;addNum());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> *result:</span></span><br><span class=\"line\"><span class=\"comment\"> * string(11) \"hello world\"</span></span><br><span class=\"line\"><span class=\"comment\"> * string(19) \"2016-02-12 21:11:27\"</span></span><br><span class=\"line\"><span class=\"comment\"> * int(1)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(2)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(3)</span></span><br><span class=\"line\"><span class=\"comment\"> * int(4)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Trait_u65B9_u6CD5_u4F18_u5148_u7EA7\"><a href=\"#Trait_u65B9_u6CD5_u4F18_u5148_u7EA7\" class=\"headerlink\" title=\"Trait方法优先级\"></a>Trait方法优先级</h2><p>性状定义的方法的优先级是：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"code\"><pre><span class=\"line\">当前类中的方法 &gt; <span class=\"keyword\">Trait</span>的方法\b &gt; 基类中的方法</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4F7F_u7528_u591A_u4E2ATrait\"><a href=\"#u4F7F_u7528_u591A_u4E2ATrait\" class=\"headerlink\" title=\"使用多个Trait\"></a>使用多个Trait</h2><p>使用多个trait时，需要用<code>,</code>分隔开不同的性状</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>,<span class=\"title\">OtherTrait</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"insteadof\"><a href=\"#insteadof\" class=\"headerlink\" title=\"insteadof\"></a>insteadof</h2><p>两个Trait在同一个类中命名冲突，可以使用insteadof来指定方法名的使用来源</p>\n<p>Trait1::method insteadof Trait2</p>\n<p>insteadof是将trait2中的方法method代替成trait1中的method</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> OtherTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSomething</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;something . <span class=\"string\">' from other'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showOther</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'this is other'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span>, <span class=\"title\">OtherTrait</span> &#123;</span><br><span class=\"line\">        <span class=\"title\">OtherTrait</span>::<span class=\"title\">getSomething</span> <span class=\"title\">insteadof</span> <span class=\"title\">TestTrait</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: </span></span><br><span class=\"line\"><span class=\"comment\"> * something from other</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"as\"><a href=\"#as\" class=\"headerlink\" title=\"as\"></a>as</h2><p>trait::method as public|protected|private otherMethodName</p>\n<p>as 是给方法取一个别名,同时还可以声明方法的访问控制</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">TestTrait</span> &#123;</span><br><span class=\"line\">        <span class=\"title\">TestTrait</span>::<span class=\"title\">getSomething</span> <span class=\"title\">as</span> <span class=\"title\">public</span> <span class=\"title\">getSomethingPart2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $something = <span class=\"string\">'something'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">var_dump($test-&gt;getSomething());</span><br><span class=\"line\">var_dump($test-&gt;getSomethingPart2());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * result: </span></span><br><span class=\"line\"><span class=\"comment\"> * something  </span></span><br><span class=\"line\"><span class=\"comment\"> * something</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u7EC4_u5408\"><a href=\"#u7EC4_u5408\" class=\"headerlink\" title=\"组合\"></a>组合</h2><p>trait同样可以引用其他trait,用法跟类一致.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> ThreeTrait</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">OtherTrait</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"一个环境引发的乱码问题","date":"2021-09-11T10:13:00.000Z","_content":"\n>  每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：\"it can works ,why ?\"  or  \"it can`t works , why?\"\n\n## 发现问题\n\n有这一段代码，在服务器A中，从Mysql查出来的中文字段是正常显示的，从服务器B中显示的却是`???`\n\n```php\n\n$sql = \"SELECT * from m_user limit 10\";\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\n$result = $db->query($sql);\n$output = $result->fetch_assoc();\n$result->free();\nvar_dump($output);\n```\n\n\n\n## 修复问题\n\n`MySQLi`很少用，现在基本都是用`PDO`了，遇到这问题第一反应是查函数文档，是不是有些奇怪的环境设置。\n\n查到`MySQLi`编码相关有`set_charset`函数，而mysql连接也有``SET NAMES {charset}`可以指定编码，在使用代码指定编码后服务器B也可以正常使用：\n\n```php\n\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\n$db->set_charset(\"utf8\");\n// or $db->query(\"set names utf8\");\n$result = $db->query($sql);\n\n```\n\n指定编码是可以正常查询，那么我们再通过`get_charset`，看看各自连接默认使用的编码：\n\n```\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\nvar_dump($db->get_charset());\n```\n\n发现正常的机器上使用的是`utf8`，乱码机器上的是`latin1`\n\n## 排查问题\n\n我们发现问题在于php与mysql连接时，默认编码不一致，我们排查一下php与mysql的连接扩展有没有问题\n\n通过`php -i` 命令查看mysql client使用的版本\n\n```\n//默认utf8的机器:\nmysqli\nClient API library version => 5.5.19\n---------------------\n//默认latin1的机器：\nmysqli\nClient API library version => 5.5.68-MariaDB\n```\n\n通过对比，我们发现两者的版本并不一致，有问题的机器使用的是`MariaDB`，通过wifi百科发现这是个社区开发的，兼容mysql协议的开源数据库管理系统。\n\n`MariaDB`的API和协议兼容MySQL，使用是没有问题的，但`MariaDB`的默认编码是`latin1`，那这很可能就是问题根源。\n\n```\nIn MariaDB, the default character set is latin1, and the default collation is latin1_swedish_ci\n```\n\n尝试修改php连接mysql的 Client API library，安装mysqlmysql_5.5.19 lib包，改原来使用包的软链，发现代码正常运行，问题解决～\n\n## 后记\n\n我们可以通过docker之类的工具，保持统一的环境，但从开发的解决还是尽量维护代码健壮性，通过代码指定连接使用的编码，这样换一个差不多的环境也能正常运行，可以少折腾一些环境\n\n## 参考\n\n* [MariaDB](MariaDB)\n* [MariaDb Default Charset](https://mariadb.com/kb/en/setting-character-sets-and-collations/)\n\n\n\n","source":"_posts/php/php_mysql_charset.md","raw":"title: 一个环境引发的乱码问题\ndate: 2021-09-11 18:13\ncategories: php  \ntags:  [php,mysql]  \n\n---\n\n>  每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：\"it can works ,why ?\"  or  \"it can`t works , why?\"\n\n## 发现问题\n\n有这一段代码，在服务器A中，从Mysql查出来的中文字段是正常显示的，从服务器B中显示的却是`???`\n\n```php\n\n$sql = \"SELECT * from m_user limit 10\";\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\n$result = $db->query($sql);\n$output = $result->fetch_assoc();\n$result->free();\nvar_dump($output);\n```\n\n\n\n## 修复问题\n\n`MySQLi`很少用，现在基本都是用`PDO`了，遇到这问题第一反应是查函数文档，是不是有些奇怪的环境设置。\n\n查到`MySQLi`编码相关有`set_charset`函数，而mysql连接也有``SET NAMES {charset}`可以指定编码，在使用代码指定编码后服务器B也可以正常使用：\n\n```php\n\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\n$db->set_charset(\"utf8\");\n// or $db->query(\"set names utf8\");\n$result = $db->query($sql);\n\n```\n\n指定编码是可以正常查询，那么我们再通过`get_charset`，看看各自连接默认使用的编码：\n\n```\n$db = new MySQLi($host, $user, $pwd, $dbname, $port);\nvar_dump($db->get_charset());\n```\n\n发现正常的机器上使用的是`utf8`，乱码机器上的是`latin1`\n\n## 排查问题\n\n我们发现问题在于php与mysql连接时，默认编码不一致，我们排查一下php与mysql的连接扩展有没有问题\n\n通过`php -i` 命令查看mysql client使用的版本\n\n```\n//默认utf8的机器:\nmysqli\nClient API library version => 5.5.19\n---------------------\n//默认latin1的机器：\nmysqli\nClient API library version => 5.5.68-MariaDB\n```\n\n通过对比，我们发现两者的版本并不一致，有问题的机器使用的是`MariaDB`，通过wifi百科发现这是个社区开发的，兼容mysql协议的开源数据库管理系统。\n\n`MariaDB`的API和协议兼容MySQL，使用是没有问题的，但`MariaDB`的默认编码是`latin1`，那这很可能就是问题根源。\n\n```\nIn MariaDB, the default character set is latin1, and the default collation is latin1_swedish_ci\n```\n\n尝试修改php连接mysql的 Client API library，安装mysqlmysql_5.5.19 lib包，改原来使用包的软链，发现代码正常运行，问题解决～\n\n## 后记\n\n我们可以通过docker之类的工具，保持统一的环境，但从开发的解决还是尽量维护代码健壮性，通过代码指定连接使用的编码，这样换一个差不多的环境也能正常运行，可以少折腾一些环境\n\n## 参考\n\n* [MariaDB](MariaDB)\n* [MariaDb Default Charset](https://mariadb.com/kb/en/setting-character-sets-and-collations/)\n\n\n\n","slug":"php/php_mysql_charset","published":1,"updated":"2022-03-18T08:30:32.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p8001wi9skgk70y9l0","content":"<blockquote>\n<p> 每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：”it can works ,why ?”  or  “it can`t works , why?”</p>\n</blockquote>\n<h2 id=\"u53D1_u73B0_u95EE_u9898\"><a href=\"#u53D1_u73B0_u95EE_u9898\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>有这一段代码，在服务器A中，从Mysql查出来的中文字段是正常显示的，从服务器B中显示的却是<code>???</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$sql = <span class=\"string\">\"SELECT * from m_user limit 10\"</span>;</span><br><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">$result = $db-&gt;query($sql);</span><br><span class=\"line\">$output = $result-&gt;fetch_assoc();</span><br><span class=\"line\">$result-&gt;free();</span><br><span class=\"line\">var_dump($output);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u590D_u95EE_u9898\"><a href=\"#u4FEE_u590D_u95EE_u9898\" class=\"headerlink\" title=\"修复问题\"></a>修复问题</h2><p><code>MySQLi</code>很少用，现在基本都是用<code>PDO</code>了，遇到这问题第一反应是查函数文档，是不是有些奇怪的环境设置。</p>\n<p>查到<code>MySQLi</code>编码相关有<code>set_charset</code>函数，而mysql连接也有<code></code>SET NAMES {charset}`可以指定编码，在使用代码指定编码后服务器B也可以正常使用：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">$db-&gt;set_charset(<span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// or $db-&gt;query(\"set names utf8\");</span></span><br><span class=\"line\">$result = $db-&gt;query($sql);</span><br></pre></td></tr></table></figure>\n<p>指定编码是可以正常查询，那么我们再通过<code>get_charset</code>，看看各自连接默认使用的编码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">var_dump($db-&gt;get_charset());</span><br></pre></td></tr></table></figure>\n<p>发现正常的机器上使用的是<code>utf8</code>，乱码机器上的是<code>latin1</code></p>\n<h2 id=\"u6392_u67E5_u95EE_u9898\"><a href=\"#u6392_u67E5_u95EE_u9898\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>我们发现问题在于php与mysql连接时，默认编码不一致，我们排查一下php与mysql的连接扩展有没有问题</p>\n<p>通过<code>php -i</code> 命令查看mysql client使用的版本</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认utf8的机器:</span></span><br><span class=\"line\">mysqli</span><br><span class=\"line\">Client API library version =&gt; 5.5.19</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"><span class=\"comment\">//默认latin1的机器：</span></span><br><span class=\"line\">mysqli</span><br><span class=\"line\">Client API library version =&gt; 5.5.68-MariaDB</span><br></pre></td></tr></table></figure>\n<p>通过对比，我们发现两者的版本并不一致，有问题的机器使用的是<code>MariaDB</code>，通过wifi百科发现这是个社区开发的，兼容mysql协议的开源数据库管理系统。</p>\n<p><code>MariaDB</code>的API和协议兼容MySQL，使用是没有问题的，但<code>MariaDB</code>的默认编码是<code>latin1</code>，那这很可能就是问题根源。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">In</span> MariaDB, the<span class=\"built_in\"> default </span>character <span class=\"builtin-name\">set</span> is latin1, <span class=\"keyword\">and</span> the<span class=\"built_in\"> default </span>collation is latin1_swedish_ci</span><br></pre></td></tr></table></figure>\n<p>尝试修改php连接mysql的 Client API library，安装mysqlmysql_5.5.19 lib包，改原来使用包的软链，发现代码正常运行，问题解决～</p>\n<h2 id=\"u540E_u8BB0\"><a href=\"#u540E_u8BB0\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>我们可以通过docker之类的工具，保持统一的环境，但从开发的解决还是尽量维护代码健壮性，通过代码指定连接使用的编码，这样换一个差不多的环境也能正常运行，可以少折腾一些环境</p>\n<h2 id=\"u53C2_u8003\"><a href=\"#u53C2_u8003\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"/MariaDB\">MariaDB</a></li>\n<li><a href=\"https://mariadb.com/kb/en/setting-character-sets-and-collations/\" target=\"_blank\" rel=\"noopener\">MariaDb Default Charset</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：”it can works ,why ?”  or  “it can`t works , why?”</p>\n</blockquote>\n<h2 id=\"u53D1_u73B0_u95EE_u9898\"><a href=\"#u53D1_u73B0_u95EE_u9898\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>有这一段代码，在服务器A中，从Mysql查出来的中文字段是正常显示的，从服务器B中显示的却是<code>???</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$sql = <span class=\"string\">\"SELECT * from m_user limit 10\"</span>;</span><br><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">$result = $db-&gt;query($sql);</span><br><span class=\"line\">$output = $result-&gt;fetch_assoc();</span><br><span class=\"line\">$result-&gt;free();</span><br><span class=\"line\">var_dump($output);</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u590D_u95EE_u9898\"><a href=\"#u4FEE_u590D_u95EE_u9898\" class=\"headerlink\" title=\"修复问题\"></a>修复问题</h2><p><code>MySQLi</code>很少用，现在基本都是用<code>PDO</code>了，遇到这问题第一反应是查函数文档，是不是有些奇怪的环境设置。</p>\n<p>查到<code>MySQLi</code>编码相关有<code>set_charset</code>函数，而mysql连接也有<code></code>SET NAMES {charset}`可以指定编码，在使用代码指定编码后服务器B也可以正常使用：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">$db-&gt;set_charset(<span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// or $db-&gt;query(\"set names utf8\");</span></span><br><span class=\"line\">$result = $db-&gt;query($sql);</span><br></pre></td></tr></table></figure>\n<p>指定编码是可以正常查询，那么我们再通过<code>get_charset</code>，看看各自连接默认使用的编码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$db = <span class=\"keyword\">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class=\"line\">var_dump($db-&gt;get_charset());</span><br></pre></td></tr></table></figure>\n<p>发现正常的机器上使用的是<code>utf8</code>，乱码机器上的是<code>latin1</code></p>\n<h2 id=\"u6392_u67E5_u95EE_u9898\"><a href=\"#u6392_u67E5_u95EE_u9898\" class=\"headerlink\" title=\"排查问题\"></a>排查问题</h2><p>我们发现问题在于php与mysql连接时，默认编码不一致，我们排查一下php与mysql的连接扩展有没有问题</p>\n<p>通过<code>php -i</code> 命令查看mysql client使用的版本</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认utf8的机器:</span></span><br><span class=\"line\">mysqli</span><br><span class=\"line\">Client API library version =&gt; 5.5.19</span><br><span class=\"line\">---------------------</span><br><span class=\"line\"><span class=\"comment\">//默认latin1的机器：</span></span><br><span class=\"line\">mysqli</span><br><span class=\"line\">Client API library version =&gt; 5.5.68-MariaDB</span><br></pre></td></tr></table></figure>\n<p>通过对比，我们发现两者的版本并不一致，有问题的机器使用的是<code>MariaDB</code>，通过wifi百科发现这是个社区开发的，兼容mysql协议的开源数据库管理系统。</p>\n<p><code>MariaDB</code>的API和协议兼容MySQL，使用是没有问题的，但<code>MariaDB</code>的默认编码是<code>latin1</code>，那这很可能就是问题根源。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">In</span> MariaDB, the<span class=\"built_in\"> default </span>character <span class=\"builtin-name\">set</span> is latin1, <span class=\"keyword\">and</span> the<span class=\"built_in\"> default </span>collation is latin1_swedish_ci</span><br></pre></td></tr></table></figure>\n<p>尝试修改php连接mysql的 Client API library，安装mysqlmysql_5.5.19 lib包，改原来使用包的软链，发现代码正常运行，问题解决～</p>\n<h2 id=\"u540E_u8BB0\"><a href=\"#u540E_u8BB0\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>我们可以通过docker之类的工具，保持统一的环境，但从开发的解决还是尽量维护代码健壮性，通过代码指定连接使用的编码，这样换一个差不多的环境也能正常运行，可以少折腾一些环境</p>\n<h2 id=\"u53C2_u8003\"><a href=\"#u53C2_u8003\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"/MariaDB\">MariaDB</a></li>\n<li><a href=\"https://mariadb.com/kb/en/setting-character-sets-and-collations/\" target=\"_blank\" rel=\"noopener\">MariaDb Default Charset</a></li>\n</ul>\n","sticky":0},{"title":"stream_context_create","date":"2016-02-29T13:06:35.000Z","_content":"\n## 流\n\n流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。\n\n每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：\n\n```\n\t<scheme>://<target>\n```\n\n<scheme>是流的封装协议，<target>是流的数据源\n\n如：\n\n```\n\thttp://api.jceee.com/services/api.php?action=test\n\tphp://stdout\n\tfile:///etc/data.txt\n```\n\n## `stream_context_create`\n\nstream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。\n\n### file_get_content\n\n我们定义一个流的参数对象，使`file_get_content`发送`HTTP`的`POST`请求。\n\n```php\n\t$requestBody = json_encode(array('user'=>'jceee'));\n\t$context = stream_context_create(array(\n\t    'http' => array(\n\t        'method' => 'POST',\n\t        'header' => \"Content-Type: application/json;charset=utf-8;\\r\\n\" . \n\t                    \"Content-Length: \" . mb_strlen($requestBody),\n\t        'content' => $requestBody\n\t        )\n\t    ));\n\t\n\t$response = file_get_contents('http://api.jceee.com/api.php', false, $context);\n```\n\n最外层的键`http`定义了流封装协议，值是协议的具体内容。通过定义`http`协议，我们就创建了一个`file_get_content`可接收的流上下文对象。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/php-stream.md","raw":"title: stream_context_create  \ndate: 2016-02-29 21:06:35  \ncategories: php  \ntags: php  \n\n---\n\n## 流\n\n流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。\n\n每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：\n\n```\n\t<scheme>://<target>\n```\n\n<scheme>是流的封装协议，<target>是流的数据源\n\n如：\n\n```\n\thttp://api.jceee.com/services/api.php?action=test\n\tphp://stdout\n\tfile:///etc/data.txt\n```\n\n## `stream_context_create`\n\nstream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。\n\n### file_get_content\n\n我们定义一个流的参数对象，使`file_get_content`发送`HTTP`的`POST`请求。\n\n```php\n\t$requestBody = json_encode(array('user'=>'jceee'));\n\t$context = stream_context_create(array(\n\t    'http' => array(\n\t        'method' => 'POST',\n\t        'header' => \"Content-Type: application/json;charset=utf-8;\\r\\n\" . \n\t                    \"Content-Length: \" . mb_strlen($requestBody),\n\t        'content' => $requestBody\n\t        )\n\t    ));\n\t\n\t$response = file_get_contents('http://api.jceee.com/api.php', false, $context);\n```\n\n最外层的键`http`定义了流封装协议，值是协议的具体内容。通过定义`http`协议，我们就创建了一个`file_get_content`可接收的流上下文对象。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/php-stream","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p80020i9sknhxupj1a","content":"<h2 id=\"u6D41\"><a href=\"#u6D41\" class=\"headerlink\" title=\"流\"></a>流</h2><p>流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。</p>\n<p>每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;<span class=\"symbol\">://&lt;target&gt;</span></span><br></pre></td></tr></table></figure>\n<p><scheme>是流的封装协议，<target>是流的数据源</target></scheme></p>\n<p>如：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//api.jceee.com/services/api.php?action=test</span></span><br><span class=\"line\"><span class=\"symbol\">php:</span><span class=\"comment\">//stdout</span></span><br><span class=\"line\"><span class=\"symbol\">file:</span><span class=\"comment\">///etc/data.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"stream_context_create\"><a href=\"#stream_context_create\" class=\"headerlink\" title=\"stream_context_create\"></a><code>stream_context_create</code></h2><p>stream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。</p>\n<h3 id=\"file_get_content\"><a href=\"#file_get_content\" class=\"headerlink\" title=\"file_get_content\"></a>file_get_content</h3><p>我们定义一个流的参数对象，使<code>file_get_content</code>发送<code>HTTP</code>的<code>POST</code>请求。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$requestBody = json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">'user'</span>=&gt;<span class=\"string\">'jceee'</span>));</span><br><span class=\"line\">$context = stream_context_create(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'http'</span> =&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'method'</span> =&gt; <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        <span class=\"string\">'header'</span> =&gt; <span class=\"string\">\"Content-Type: application/json;charset=utf-8;\\r\\n\"</span> . </span><br><span class=\"line\">                    <span class=\"string\">\"Content-Length: \"</span> . mb_strlen($requestBody),</span><br><span class=\"line\">        <span class=\"string\">'content'</span> =&gt; $requestBody</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ));</span><br><span class=\"line\"></span><br><span class=\"line\">$response = file_get_contents(<span class=\"string\">'http://api.jceee.com/api.php'</span>, <span class=\"keyword\">false</span>, $context);</span><br></pre></td></tr></table></figure>\n<p>最外层的键<code>http</code>定义了流封装协议，值是协议的具体内容。通过定义<code>http</code>协议，我们就创建了一个<code>file_get_content</code>可接收的流上下文对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u6D41\"><a href=\"#u6D41\" class=\"headerlink\" title=\"流\"></a>流</h2><p>流是PHP4.3.0中引入的特性，作用是使用统一方式处理文件、网络和数据压缩等共同一套函数和用法的操作。</p>\n<p>每一个流都有一个协议和一个目标。指定协议和目标的方法是使用流标识符：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;<span class=\"symbol\">://&lt;target&gt;</span></span><br></pre></td></tr></table></figure>\n<p><scheme>是流的封装协议，<target>是流的数据源</target></scheme></p>\n<p>如：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//api.jceee.com/services/api.php?action=test</span></span><br><span class=\"line\"><span class=\"symbol\">php:</span><span class=\"comment\">//stdout</span></span><br><span class=\"line\"><span class=\"symbol\">file:</span><span class=\"comment\">///etc/data.txt</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"stream_context_create\"><a href=\"#stream_context_create\" class=\"headerlink\" title=\"stream_context_create\"></a><code>stream_context_create</code></h2><p>stream_context_create用于创建流的上下文，也就是php流能接受的一系列可选参数，通过这些参数来定义流的行为，不同流的封装协议使用的上下文参数有所不同。</p>\n<h3 id=\"file_get_content\"><a href=\"#file_get_content\" class=\"headerlink\" title=\"file_get_content\"></a>file_get_content</h3><p>我们定义一个流的参数对象，使<code>file_get_content</code>发送<code>HTTP</code>的<code>POST</code>请求。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$requestBody = json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">'user'</span>=&gt;<span class=\"string\">'jceee'</span>));</span><br><span class=\"line\">$context = stream_context_create(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'http'</span> =&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'method'</span> =&gt; <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">        <span class=\"string\">'header'</span> =&gt; <span class=\"string\">\"Content-Type: application/json;charset=utf-8;\\r\\n\"</span> . </span><br><span class=\"line\">                    <span class=\"string\">\"Content-Length: \"</span> . mb_strlen($requestBody),</span><br><span class=\"line\">        <span class=\"string\">'content'</span> =&gt; $requestBody</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ));</span><br><span class=\"line\"></span><br><span class=\"line\">$response = file_get_contents(<span class=\"string\">'http://api.jceee.com/api.php'</span>, <span class=\"keyword\">false</span>, $context);</span><br></pre></td></tr></table></figure>\n<p>最外层的键<code>http</code>定义了流封装协议，值是协议的具体内容。通过定义<code>http</code>协议，我们就创建了一个<code>file_get_content</code>可接收的流上下文对象。</p>\n","sticky":0},{"title":"根据某字段对多维数组进行排序","date":"2015-01-09T13:06:35.000Z","_content":"\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/php/php-sortArrByfield.md","raw":"title: 根据某字段对多维数组进行排序\ndate: 2015-01-09 21:06:35\ncategories: code\ntags: php\n\n---\n\n根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法\n\n```php\n\tfunction sortArrByField(&$array, $field, $isDesc = false)\n\t{\n\t \n\t    $fieldArr = array();\n\t    foreach ($array as $k => $v) {\n\t \n\t       $fieldArr[$k] = $v[$field];\n\t    }\n\t    $sort = $isDesc == false ? SORT_ASC : SORT_DESC;\n\t    array_multisort($fieldArr, $sort, $array);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"php/php-sortArrByfield","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p90022i9sk71bcvoof","content":"<p>根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortArrByField</span><span class=\"params\">(&amp;$array, $field, $isDesc = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    $fieldArr = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">       $fieldArr[$k] = $v[$field];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $sort = $isDesc == <span class=\"keyword\">false</span> ? SORT_ASC : SORT_DESC;</span><br><span class=\"line\">    array_multisort($fieldArr, $sort, $array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>根据某字段对多维数组进行排序，在看到array_multisort方法的作用时突然想到，可以用来做这个方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortArrByField</span><span class=\"params\">(&amp;$array, $field, $isDesc = false)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    $fieldArr = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($array <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">       $fieldArr[$k] = $v[$field];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $sort = $isDesc == <span class=\"keyword\">false</span> ? SORT_ASC : SORT_DESC;</span><br><span class=\"line\">    array_multisort($fieldArr, $sort, $array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"PHP文件操作part1[文件路径]","date":"2014-09-25T14:07:00.000Z","_content":"\n# 绝对路径与相对路径\n\n>文件函数最常用的参数是什么？路径。  \n而路径参数大致分两种：绝对路径和相对路径。\n\n## 绝对路径 : 从盘开始的路径\n\nexample:\n\n```\n\t/Users/jceee/code/app/www/index.php（app项目中的index.php文件）\n```\n\n## 相对路径 : 以当前文件为基准所组成的路径\n\nexample:\n\n```\n\t./index.php(相对当前目录)\n\t../index.php(相对上级目录)\n```\n\n\n## 获取绝对路径\n\n### realpath\n\nphp中有通过相对路径获得绝对路径的方法`realpath($path)`\n\n```\nvar_dump(realpath('index.php'));\n//\"/Users/jceee/code/app/www/index.php\"\n```\n\n### Magic constants: `__FILE__`\n\n`__FILE__`可以获得当前文件的绝对路径\n\n```\n\tvar_dump(__FILE__);\n\t//\"/Users/jceee/code/app/www/index.php\"\n```\n### dirname\n\n`dirname(path)`获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径\n\n```\n\tvar_dump(dirname('./index.php'));\n\t//\".\"\n\tvar_dump(dirname(realpath('./index.php')));\n\t//\"/Users/jceee/code/app/www/\"\n```\n### getcwd()\n\n`getcwd`获取的是当前的工作目录,也就是index.php所在的目录。相当于`dirname(__FILE__)`\n\n```\n\tvar_dump(getcwd());\n\t//\"/Users/jceee/code/app/www/\"\n```\n\n### `$_SERVER['DOCUMENT_ROOT']`\n\n`$_SERVER['DOCUMENT_ROOT']` 获取的是项目在服务器定义的根目录\n\n```\n\tvar_dump($_SERVER['DOCUMENT_ROOT']);\n\t//\"/Users/jceee/code/app\"\n```\n\n","source":"_posts/php/php-filePath.md","raw":"title: PHP文件操作part1[文件路径]   \ndate: 2014-09-25 22:07  \ncategories: php   \ntags: php\n\n---\n\n# 绝对路径与相对路径\n\n>文件函数最常用的参数是什么？路径。  \n而路径参数大致分两种：绝对路径和相对路径。\n\n## 绝对路径 : 从盘开始的路径\n\nexample:\n\n```\n\t/Users/jceee/code/app/www/index.php（app项目中的index.php文件）\n```\n\n## 相对路径 : 以当前文件为基准所组成的路径\n\nexample:\n\n```\n\t./index.php(相对当前目录)\n\t../index.php(相对上级目录)\n```\n\n\n## 获取绝对路径\n\n### realpath\n\nphp中有通过相对路径获得绝对路径的方法`realpath($path)`\n\n```\nvar_dump(realpath('index.php'));\n//\"/Users/jceee/code/app/www/index.php\"\n```\n\n### Magic constants: `__FILE__`\n\n`__FILE__`可以获得当前文件的绝对路径\n\n```\n\tvar_dump(__FILE__);\n\t//\"/Users/jceee/code/app/www/index.php\"\n```\n### dirname\n\n`dirname(path)`获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径\n\n```\n\tvar_dump(dirname('./index.php'));\n\t//\".\"\n\tvar_dump(dirname(realpath('./index.php')));\n\t//\"/Users/jceee/code/app/www/\"\n```\n### getcwd()\n\n`getcwd`获取的是当前的工作目录,也就是index.php所在的目录。相当于`dirname(__FILE__)`\n\n```\n\tvar_dump(getcwd());\n\t//\"/Users/jceee/code/app/www/\"\n```\n\n### `$_SERVER['DOCUMENT_ROOT']`\n\n`$_SERVER['DOCUMENT_ROOT']` 获取的是项目在服务器定义的根目录\n\n```\n\tvar_dump($_SERVER['DOCUMENT_ROOT']);\n\t//\"/Users/jceee/code/app\"\n```\n\n","slug":"php/php-filePath","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7p90027i9skzh1ghf2j","content":"<h1 id=\"u7EDD_u5BF9_u8DEF_u5F84_u4E0E_u76F8_u5BF9_u8DEF_u5F84\"><a href=\"#u7EDD_u5BF9_u8DEF_u5F84_u4E0E_u76F8_u5BF9_u8DEF_u5F84\" class=\"headerlink\" title=\"绝对路径与相对路径\"></a>绝对路径与相对路径</h1><blockquote>\n<p>文件函数最常用的参数是什么？路径。<br>而路径参数大致分两种：绝对路径和相对路径。</p>\n</blockquote>\n<h2 id=\"u7EDD_u5BF9_u8DEF_u5F84__3A__u4ECE_u76D8_u5F00_u59CB_u7684_u8DEF_u5F84\"><a href=\"#u7EDD_u5BF9_u8DEF_u5F84__3A__u4ECE_u76D8_u5F00_u59CB_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"绝对路径 : 从盘开始的路径\"></a>绝对路径 : 从盘开始的路径</h2><p>example:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/Users/</span>jceee<span class=\"regexp\">/code/</span>app<span class=\"regexp\">/www/i</span>ndex.php（app项目中的index.php文件）</span><br></pre></td></tr></table></figure>\n<h2 id=\"u76F8_u5BF9_u8DEF_u5F84__3A__u4EE5_u5F53_u524D_u6587_u4EF6_u4E3A_u57FA_u51C6_u6240_u7EC4_u6210_u7684_u8DEF_u5F84\"><a href=\"#u76F8_u5BF9_u8DEF_u5F84__3A__u4EE5_u5F53_u524D_u6587_u4EF6_u4E3A_u57FA_u51C6_u6240_u7EC4_u6210_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"相对路径 : 以当前文件为基准所组成的路径\"></a>相对路径 : 以当前文件为基准所组成的路径</h2><p>example:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\">./<span class=\"keyword\">index</span>.php(相对当前目录)</span><br><span class=\"line\">../<span class=\"keyword\">index</span>.php(相对上级目录)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6_u7EDD_u5BF9_u8DEF_u5F84\"><a href=\"#u83B7_u53D6_u7EDD_u5BF9_u8DEF_u5F84\" class=\"headerlink\" title=\"获取绝对路径\"></a>获取绝对路径</h2><h3 id=\"realpath\"><a href=\"#realpath\" class=\"headerlink\" title=\"realpath\"></a>realpath</h3><p>php中有通过相对路径获得绝对路径的方法<code>realpath($path)</code></p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">realpath</span>('index.php'))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/index.php\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Magic_constants_3A___FILE\"><a href=\"#Magic_constants_3A___FILE\" class=\"headerlink\" title=\"Magic constants: __FILE__\"></a>Magic constants: <code>__FILE__</code></h3><p><code>__FILE__</code>可以获得当前文件的绝对路径</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">__FILE__</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/index.php\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"dirname\"></a>dirname</h3><p><code>dirname(path)</code>获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">dirname</span>('./index.php'))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\".\"</span></span><br><span class=\"line\">var_dump(<span class=\"name\">dirname</span>(<span class=\"name\">realpath</span>('./index.php')))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getcwd_28_29\"><a href=\"#getcwd_28_29\" class=\"headerlink\" title=\"getcwd()\"></a>getcwd()</h3><p><code>getcwd</code>获取的是当前的工作目录,也就是index.php所在的目录。相当于<code>dirname(__FILE__)</code></p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">getcwd</span>())<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"24_SERVER_5B_26_2339_3BDOCUMENT_ROOT_26_2339_3B_5D\"><a href=\"#24_SERVER_5B_26_2339_3BDOCUMENT_ROOT_26_2339_3B_5D\" class=\"headerlink\" title=\"$_SERVER[&#39;DOCUMENT_ROOT&#39;]\"></a><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code></h3><p><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 获取的是项目在服务器定义的根目录</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">'DOCUMENT_ROOT'</span>]);</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">\"/Users/jceee/code/app\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"u7EDD_u5BF9_u8DEF_u5F84_u4E0E_u76F8_u5BF9_u8DEF_u5F84\"><a href=\"#u7EDD_u5BF9_u8DEF_u5F84_u4E0E_u76F8_u5BF9_u8DEF_u5F84\" class=\"headerlink\" title=\"绝对路径与相对路径\"></a>绝对路径与相对路径</h1><blockquote>\n<p>文件函数最常用的参数是什么？路径。<br>而路径参数大致分两种：绝对路径和相对路径。</p>\n</blockquote>\n<h2 id=\"u7EDD_u5BF9_u8DEF_u5F84__3A__u4ECE_u76D8_u5F00_u59CB_u7684_u8DEF_u5F84\"><a href=\"#u7EDD_u5BF9_u8DEF_u5F84__3A__u4ECE_u76D8_u5F00_u59CB_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"绝对路径 : 从盘开始的路径\"></a>绝对路径 : 从盘开始的路径</h2><p>example:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/Users/</span>jceee<span class=\"regexp\">/code/</span>app<span class=\"regexp\">/www/i</span>ndex.php（app项目中的index.php文件）</span><br></pre></td></tr></table></figure>\n<h2 id=\"u76F8_u5BF9_u8DEF_u5F84__3A__u4EE5_u5F53_u524D_u6587_u4EF6_u4E3A_u57FA_u51C6_u6240_u7EC4_u6210_u7684_u8DEF_u5F84\"><a href=\"#u76F8_u5BF9_u8DEF_u5F84__3A__u4EE5_u5F53_u524D_u6587_u4EF6_u4E3A_u57FA_u51C6_u6240_u7EC4_u6210_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"相对路径 : 以当前文件为基准所组成的路径\"></a>相对路径 : 以当前文件为基准所组成的路径</h2><p>example:</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\">./<span class=\"keyword\">index</span>.php(相对当前目录)</span><br><span class=\"line\">../<span class=\"keyword\">index</span>.php(相对上级目录)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6_u7EDD_u5BF9_u8DEF_u5F84\"><a href=\"#u83B7_u53D6_u7EDD_u5BF9_u8DEF_u5F84\" class=\"headerlink\" title=\"获取绝对路径\"></a>获取绝对路径</h2><h3 id=\"realpath\"><a href=\"#realpath\" class=\"headerlink\" title=\"realpath\"></a>realpath</h3><p>php中有通过相对路径获得绝对路径的方法<code>realpath($path)</code></p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">realpath</span>('index.php'))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/index.php\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Magic_constants_3A___FILE\"><a href=\"#Magic_constants_3A___FILE\" class=\"headerlink\" title=\"Magic constants: __FILE__\"></a>Magic constants: <code>__FILE__</code></h3><p><code>__FILE__</code>可以获得当前文件的绝对路径</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">__FILE__</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/index.php\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"dirname\"></a>dirname</h3><p><code>dirname(path)</code>获取的是传入路径所在的目录,传入相对路径返回的也会是相对路径</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">dirname</span>('./index.php'))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\".\"</span></span><br><span class=\"line\">var_dump(<span class=\"name\">dirname</span>(<span class=\"name\">realpath</span>('./index.php')))<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"getcwd_28_29\"><a href=\"#getcwd_28_29\" class=\"headerlink\" title=\"getcwd()\"></a>getcwd()</h3><p><code>getcwd</code>获取的是当前的工作目录,也就是index.php所在的目录。相当于<code>dirname(__FILE__)</code></p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"name\">getcwd</span>())<span class=\"comment\">;</span></span><br><span class=\"line\">//<span class=\"string\">\"/Users/jceee/code/app/www/\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"24_SERVER_5B_26_2339_3BDOCUMENT_ROOT_26_2339_3B_5D\"><a href=\"#24_SERVER_5B_26_2339_3BDOCUMENT_ROOT_26_2339_3B_5D\" class=\"headerlink\" title=\"$_SERVER[&#39;DOCUMENT_ROOT&#39;]\"></a><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code></h3><p><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code> 获取的是项目在服务器定义的根目录</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">var_dump(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">'DOCUMENT_ROOT'</span>]);</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">\"/Users/jceee/code/app\"</span></span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"PHP-FPM 子进程不断重启exited on signal 11","date":"2022-03-16T12:07:01.000Z","_content":"\n# 现象\n\n某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启\n\n# 定位排查\n\n\n## 检查发版\n\n检查对应时间是否有发版，检查了之后确实与发版时间吻合，但检查代码没看出问题，但多台服务器一起发布，只有一台出现问题，跟代码有关的概率很低，可以先排除代码问题\n\n## 看php-fpm 错误日志\n\n首先从配置文件找到错误日志路径：\n\n```\n$ cat /usr/local/php/etc/php-fpm.conf | grep error_log\n\nerror_log = /data1/logs/php-fpm.log\n```\n\n从错误日志中可以看到子进程反复通过`signal 11 (SIGSEGV)`信号退出\n\n```\nWARNING: [pool www] child 25406 exited on signal 11 (SIGSEGV) after 47.465595 seconds from start\n.......\n```\n\n\n## 追踪进程\n\n查了`SIGSEGV`定义：\n\n>1. SIGSEGV是在访问内存时发生的错误，它属于内存管理的范畴\n>2. SIGSEGV是一个用户态的概念，是操作系统在用户态程序错误访问内存时所做出的处理。\n> 3. 当用户态程序访问（访问表示读、写或执行）不允许访问的内存时，产生SIGSEGV。 \n> 4. 当用户态程序以错误的方式访问允许访问的内存时，产生SIGSEGV\n\n也就是进程访问到异常内存导致异常退出，这时我们来追踪进程执行遇到什么问题\n\n\n### strace\n\n我们通过strace追踪某个子进程，看结束前是跑了什么逻辑，这里排除master进程，head出一个子进程来追踪，因为子进程重启很快，不一定能捕获到，要多跑几次\n\n```\nps aux | grep php-fpm | grep -v master |head -1 | awk '{print \" -p \" $2\" -s 10000 -o /tmp/strace_\"$2\".log\"}'|xargs sudo strace\n```\n\n看strace日志：\n\n```\n....\nstat(\"xxx.php\", {st_mode=S_IFREG|0644, st_size=142755, ...}) = 0\nopen(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY) = 4\nflock(4, LOCK_SH)                       = 0\nread(4, \"EACCELER\\..........\n843496) = 843496\nflock(4, LOCK_UN)                       = 0\nclose(4)                                = 0\nstat(\"xxx.php\", {st_mode=S_IFREG|0644, st_size=142755, ...}) = 0\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xd21f4a20c8} \nrt_sigaction(SIGSEGV, {sa_handler=SIG_DFL, sa_mask=[SEGV], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7ff5c002c400}, {sa_handler=0x7ff5b59caa30, sa_mask=[SEGV], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7ff5c002c400}, 8) = 0\nkill(300, SIGSEGV)                      = 0\nrt_sigreturn({mask=[]})                 = 140693241590544\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SI_USER, si_pid=300, si_uid=1007} ---\n+++ killed by SIGSEGV +++\n```\n\n看到发生`SIGSEGV`之前是执行了xxx.php，再之前有个动作是加载了编译缓存`open(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY)`，代码每台机都一样，可能是编译缓存出现问题，我们把缓存删除试试，502消失了，确实是缓存问题\n\n# 分析\n\n原因：根据触发的时间点与发版吻合，猜测有可能是服务器请求量大，在热更的时候编译缓存生成出现问题，导致进程异常，偶然现象\n优化：把服务容器化，发版时断开流量，更新完代码重启容器，重新生成缓存\n","source":"_posts/php/php-fpm-signal-exited.md","raw":"title: PHP-FPM 子进程不断重启exited on signal 11   \ndate: 2022-03-16 20:07:01  \ncategories: php   \ntags: php\n\n---\n\n# 现象\n\n某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启\n\n# 定位排查\n\n\n## 检查发版\n\n检查对应时间是否有发版，检查了之后确实与发版时间吻合，但检查代码没看出问题，但多台服务器一起发布，只有一台出现问题，跟代码有关的概率很低，可以先排除代码问题\n\n## 看php-fpm 错误日志\n\n首先从配置文件找到错误日志路径：\n\n```\n$ cat /usr/local/php/etc/php-fpm.conf | grep error_log\n\nerror_log = /data1/logs/php-fpm.log\n```\n\n从错误日志中可以看到子进程反复通过`signal 11 (SIGSEGV)`信号退出\n\n```\nWARNING: [pool www] child 25406 exited on signal 11 (SIGSEGV) after 47.465595 seconds from start\n.......\n```\n\n\n## 追踪进程\n\n查了`SIGSEGV`定义：\n\n>1. SIGSEGV是在访问内存时发生的错误，它属于内存管理的范畴\n>2. SIGSEGV是一个用户态的概念，是操作系统在用户态程序错误访问内存时所做出的处理。\n> 3. 当用户态程序访问（访问表示读、写或执行）不允许访问的内存时，产生SIGSEGV。 \n> 4. 当用户态程序以错误的方式访问允许访问的内存时，产生SIGSEGV\n\n也就是进程访问到异常内存导致异常退出，这时我们来追踪进程执行遇到什么问题\n\n\n### strace\n\n我们通过strace追踪某个子进程，看结束前是跑了什么逻辑，这里排除master进程，head出一个子进程来追踪，因为子进程重启很快，不一定能捕获到，要多跑几次\n\n```\nps aux | grep php-fpm | grep -v master |head -1 | awk '{print \" -p \" $2\" -s 10000 -o /tmp/strace_\"$2\".log\"}'|xargs sudo strace\n```\n\n看strace日志：\n\n```\n....\nstat(\"xxx.php\", {st_mode=S_IFREG|0644, st_size=142755, ...}) = 0\nopen(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY) = 4\nflock(4, LOCK_SH)                       = 0\nread(4, \"EACCELER\\..........\n843496) = 843496\nflock(4, LOCK_UN)                       = 0\nclose(4)                                = 0\nstat(\"xxx.php\", {st_mode=S_IFREG|0644, st_size=142755, ...}) = 0\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xd21f4a20c8} \nrt_sigaction(SIGSEGV, {sa_handler=SIG_DFL, sa_mask=[SEGV], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7ff5c002c400}, {sa_handler=0x7ff5b59caa30, sa_mask=[SEGV], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7ff5c002c400}, 8) = 0\nkill(300, SIGSEGV)                      = 0\nrt_sigreturn({mask=[]})                 = 140693241590544\n--- SIGSEGV {si_signo=SIGSEGV, si_code=SI_USER, si_pid=300, si_uid=1007} ---\n+++ killed by SIGSEGV +++\n```\n\n看到发生`SIGSEGV`之前是执行了xxx.php，再之前有个动作是加载了编译缓存`open(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY)`，代码每台机都一样，可能是编译缓存出现问题，我们把缓存删除试试，502消失了，确实是缓存问题\n\n# 分析\n\n原因：根据触发的时间点与发版吻合，猜测有可能是服务器请求量大，在热更的时候编译缓存生成出现问题，导致进程异常，偶然现象\n优化：把服务容器化，发版时断开流量，更新完代码重启容器，重新生成缓存\n","slug":"php/php-fpm-signal-exited","published":1,"updated":"2022-03-17T11:09:26.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pa0029i9sk0zla7x04","content":"<h1 id=\"u73B0_u8C61\"><a href=\"#u73B0_u8C61\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启</p>\n<h1 id=\"u5B9A_u4F4D_u6392_u67E5\"><a href=\"#u5B9A_u4F4D_u6392_u67E5\" class=\"headerlink\" title=\"定位排查\"></a>定位排查</h1><h2 id=\"u68C0_u67E5_u53D1_u7248\"><a href=\"#u68C0_u67E5_u53D1_u7248\" class=\"headerlink\" title=\"检查发版\"></a>检查发版</h2><p>检查对应时间是否有发版，检查了之后确实与发版时间吻合，但检查代码没看出问题，但多台服务器一起发布，只有一台出现问题，跟代码有关的概率很低，可以先排除代码问题</p>\n<h2 id=\"u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7\"><a href=\"#u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7\" class=\"headerlink\" title=\"看php-fpm 错误日志\"></a>看php-fpm 错误日志</h2><p>首先从配置文件找到错误日志路径：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /usr/<span class=\"keyword\">local</span>/php/etc/php-fpm.<span class=\"keyword\">conf</span> | grep error_log</span><br><span class=\"line\"></span><br><span class=\"line\">error_log = /data1/logs/php-fpm.<span class=\"keyword\">log</span></span><br></pre></td></tr></table></figure>\n<p>从错误日志中可以看到子进程反复通过<code>signal 11 (SIGSEGV)</code>信号退出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">WARNING: </span>[pool www] child 25406 exited on signal 11 (SIGSEGV) after 47.465595 seconds from start</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8FFD_u8E2A_u8FDB_u7A0B\"><a href=\"#u8FFD_u8E2A_u8FDB_u7A0B\" class=\"headerlink\" title=\"追踪进程\"></a>追踪进程</h2><p>查了<code>SIGSEGV</code>定义：</p>\n<blockquote>\n<ol>\n<li>SIGSEGV是在访问内存时发生的错误，它属于内存管理的范畴</li>\n<li>SIGSEGV是一个用户态的概念，是操作系统在用户态程序错误访问内存时所做出的处理。</li>\n<li>当用户态程序访问（访问表示读、写或执行）不允许访问的内存时，产生SIGSEGV。 </li>\n<li>当用户态程序以错误的方式访问允许访问的内存时，产生SIGSEGV</li>\n</ol>\n</blockquote>\n<p>也就是进程访问到异常内存导致异常退出，这时我们来追踪进程执行遇到什么问题</p>\n<h3 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h3><p>我们通过strace追踪某个子进程，看结束前是跑了什么逻辑，这里排除master进程，head出一个子进程来追踪，因为子进程重启很快，不一定能捕获到，要多跑几次</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps aux | <span class=\"type\">grep</span> php-fpm | <span class=\"type\">grep</span> -v master |<span class=\"type\">head</span> <span class=\"number\">-1</span> | <span class=\"type\">awk</span> '&#123;print <span class=\"string\">\" -p \"</span> $<span class=\"number\">2</span><span class=\"string\">\" -s 10000 -o /tmp/strace_\"</span>$<span class=\"number\">2</span><span class=\"string\">\".log\"</span>&#125;'|<span class=\"type\">xargs</span> sudo strace</span><br></pre></td></tr></table></figure>\n<p>看strace日志：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">....</span></span><br><span class=\"line\">stat<span class=\"params\">(\"xxx.php\", &#123;<span class=\"attr\">st_mode</span>=S_IFREG|0644, <span class=\"attr\">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class=\"line\">open<span class=\"params\">(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY)</span> = 4</span><br><span class=\"line\">flock<span class=\"params\">(4, LOCK_SH)</span>                       = 0</span><br><span class=\"line\">read<span class=\"params\">(4, \"EACCELER\\..........</span></span><br><span class=\"line\"><span class=\"params\">843496)</span> = 843496</span><br><span class=\"line\">flock<span class=\"params\">(4, LOCK_UN)</span>                       = 0</span><br><span class=\"line\">close<span class=\"params\">(4)</span>                                = 0</span><br><span class=\"line\">stat<span class=\"params\">(\"xxx.php\", &#123;<span class=\"attr\">st_mode</span>=S_IFREG|0644, <span class=\"attr\">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class=\"line\"><span class=\"params\">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xd21f4a20c8&#125; </span><br><span class=\"line\">rt_sigaction<span class=\"params\">(SIGSEGV, &#123;<span class=\"attr\">sa_handler</span>=SIG_DFL, <span class=\"attr\">sa_mask</span>=[SEGV], <span class=\"attr\">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class=\"attr\">sa_restorer</span>=0x7ff5c002c400&#125;, &#123;<span class=\"attr\">sa_handler</span>=0x7ff5b59caa30, <span class=\"attr\">sa_mask</span>=[SEGV], <span class=\"attr\">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class=\"attr\">sa_restorer</span>=0x7ff5c002c400&#125;, 8)</span> = 0</span><br><span class=\"line\">kill<span class=\"params\">(300, SIGSEGV)</span>                      = 0</span><br><span class=\"line\">rt_sigreturn<span class=\"params\">(&#123;<span class=\"attr\">mask</span>=[]&#125;)</span>                 = 140693241590544</span><br><span class=\"line\"><span class=\"params\">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SI_USER, si_pid=300, si_uid=1007&#125; <span class=\"params\">---</span></span><br><span class=\"line\">+++ killed by SIGSEGV +++</span><br></pre></td></tr></table></figure>\n<p>看到发生<code>SIGSEGV</code>之前是执行了xxx.php，再之前有个动作是加载了编译缓存<code>open(&quot;/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141&quot;, O_RDONLY)</code>，代码每台机都一样，可能是编译缓存出现问题，我们把缓存删除试试，502消失了，确实是缓存问题</p>\n<h1 id=\"u5206_u6790\"><a href=\"#u5206_u6790\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>原因：根据触发的时间点与发版吻合，猜测有可能是服务器请求量大，在热更的时候编译缓存生成出现问题，导致进程异常，偶然现象<br>优化：把服务容器化，发版时断开流量，更新完代码重启容器，重新生成缓存</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"u73B0_u8C61\"><a href=\"#u73B0_u8C61\" class=\"headerlink\" title=\"现象\"></a>现象</h1><p>某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启</p>\n<h1 id=\"u5B9A_u4F4D_u6392_u67E5\"><a href=\"#u5B9A_u4F4D_u6392_u67E5\" class=\"headerlink\" title=\"定位排查\"></a>定位排查</h1><h2 id=\"u68C0_u67E5_u53D1_u7248\"><a href=\"#u68C0_u67E5_u53D1_u7248\" class=\"headerlink\" title=\"检查发版\"></a>检查发版</h2><p>检查对应时间是否有发版，检查了之后确实与发版时间吻合，但检查代码没看出问题，但多台服务器一起发布，只有一台出现问题，跟代码有关的概率很低，可以先排除代码问题</p>\n<h2 id=\"u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7\"><a href=\"#u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7\" class=\"headerlink\" title=\"看php-fpm 错误日志\"></a>看php-fpm 错误日志</h2><p>首先从配置文件找到错误日志路径：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /usr/<span class=\"keyword\">local</span>/php/etc/php-fpm.<span class=\"keyword\">conf</span> | grep error_log</span><br><span class=\"line\"></span><br><span class=\"line\">error_log = /data1/logs/php-fpm.<span class=\"keyword\">log</span></span><br></pre></td></tr></table></figure>\n<p>从错误日志中可以看到子进程反复通过<code>signal 11 (SIGSEGV)</code>信号退出</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">WARNING: </span>[pool www] child 25406 exited on signal 11 (SIGSEGV) after 47.465595 seconds from start</span><br><span class=\"line\">.......</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8FFD_u8E2A_u8FDB_u7A0B\"><a href=\"#u8FFD_u8E2A_u8FDB_u7A0B\" class=\"headerlink\" title=\"追踪进程\"></a>追踪进程</h2><p>查了<code>SIGSEGV</code>定义：</p>\n<blockquote>\n<ol>\n<li>SIGSEGV是在访问内存时发生的错误，它属于内存管理的范畴</li>\n<li>SIGSEGV是一个用户态的概念，是操作系统在用户态程序错误访问内存时所做出的处理。</li>\n<li>当用户态程序访问（访问表示读、写或执行）不允许访问的内存时，产生SIGSEGV。 </li>\n<li>当用户态程序以错误的方式访问允许访问的内存时，产生SIGSEGV</li>\n</ol>\n</blockquote>\n<p>也就是进程访问到异常内存导致异常退出，这时我们来追踪进程执行遇到什么问题</p>\n<h3 id=\"strace\"><a href=\"#strace\" class=\"headerlink\" title=\"strace\"></a>strace</h3><p>我们通过strace追踪某个子进程，看结束前是跑了什么逻辑，这里排除master进程，head出一个子进程来追踪，因为子进程重启很快，不一定能捕获到，要多跑几次</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">ps aux | <span class=\"type\">grep</span> php-fpm | <span class=\"type\">grep</span> -v master |<span class=\"type\">head</span> <span class=\"number\">-1</span> | <span class=\"type\">awk</span> '&#123;print <span class=\"string\">\" -p \"</span> $<span class=\"number\">2</span><span class=\"string\">\" -s 10000 -o /tmp/strace_\"</span>$<span class=\"number\">2</span><span class=\"string\">\".log\"</span>&#125;'|<span class=\"type\">xargs</span> sudo strace</span><br></pre></td></tr></table></figure>\n<p>看strace日志：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">....</span></span><br><span class=\"line\">stat<span class=\"params\">(\"xxx.php\", &#123;<span class=\"attr\">st_mode</span>=S_IFREG|0644, <span class=\"attr\">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class=\"line\">open<span class=\"params\">(\"/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141\", O_RDONLY)</span> = 4</span><br><span class=\"line\">flock<span class=\"params\">(4, LOCK_SH)</span>                       = 0</span><br><span class=\"line\">read<span class=\"params\">(4, \"EACCELER\\..........</span></span><br><span class=\"line\"><span class=\"params\">843496)</span> = 843496</span><br><span class=\"line\">flock<span class=\"params\">(4, LOCK_UN)</span>                       = 0</span><br><span class=\"line\">close<span class=\"params\">(4)</span>                                = 0</span><br><span class=\"line\">stat<span class=\"params\">(\"xxx.php\", &#123;<span class=\"attr\">st_mode</span>=S_IFREG|0644, <span class=\"attr\">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class=\"line\"><span class=\"params\">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xd21f4a20c8&#125; </span><br><span class=\"line\">rt_sigaction<span class=\"params\">(SIGSEGV, &#123;<span class=\"attr\">sa_handler</span>=SIG_DFL, <span class=\"attr\">sa_mask</span>=[SEGV], <span class=\"attr\">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class=\"attr\">sa_restorer</span>=0x7ff5c002c400&#125;, &#123;<span class=\"attr\">sa_handler</span>=0x7ff5b59caa30, <span class=\"attr\">sa_mask</span>=[SEGV], <span class=\"attr\">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class=\"attr\">sa_restorer</span>=0x7ff5c002c400&#125;, 8)</span> = 0</span><br><span class=\"line\">kill<span class=\"params\">(300, SIGSEGV)</span>                      = 0</span><br><span class=\"line\">rt_sigreturn<span class=\"params\">(&#123;<span class=\"attr\">mask</span>=[]&#125;)</span>                 = 140693241590544</span><br><span class=\"line\"><span class=\"params\">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SI_USER, si_pid=300, si_uid=1007&#125; <span class=\"params\">---</span></span><br><span class=\"line\">+++ killed by SIGSEGV +++</span><br></pre></td></tr></table></figure>\n<p>看到发生<code>SIGSEGV</code>之前是执行了xxx.php，再之前有个动作是加载了编译缓存<code>open(&quot;/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141&quot;, O_RDONLY)</code>，代码每台机都一样，可能是编译缓存出现问题，我们把缓存删除试试，502消失了，确实是缓存问题</p>\n<h1 id=\"u5206_u6790\"><a href=\"#u5206_u6790\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>原因：根据触发的时间点与发版吻合，猜测有可能是服务器请求量大，在热更的时候编译缓存生成出现问题，导致进程异常，偶然现象<br>优化：把服务容器化，发版时断开流量，更新完代码重启容器，重新生成缓存</p>\n","sticky":0},{"title":"brew安装mongodb","date":"2016-01-27T14:51:27.000Z","_content":"\n## 用brew安装mongodb\n\n\n### mongodb install\n\n安装：\n\n```\n\t$ brew install mongodb\n```\n\n安装好会出现以下内容:\n \n```\n==> Downloading https://homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring mongodb-3.0.7.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start mongodb at login:\n  ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\nOr, if you don't want/need launchctl, you can just run:\n  mongod --config /usr/local/etc/mongod.conf\n==> Summary\n🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M\n```\n\n最后提示了如何启动mongodb：\n\n```\n\tmongod --config /usr/local/etc/mongod.conf\n```\n\n--config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:\n\n```\nsystemLog:\n  destination: file\n  path: /usr/local/var/log/mongodb/mongo.log\n  logAppend: true\nstorage:\n  dbPath: /usr/local/var/mongodb\nnet:\n  bindIp: 127.0.0.1\n~\n~\n```\n\n### 连接mongodb\n\nmongod启动后，在命令行输入`mongo`命令可以连接到数据库:\n\n```\n\t$ mongo\n\tMongoDB shell version: 3.0.7\n\tconnecting to: test\n\t> use blog\n\tswitched to db blog\n\t> exit;\n```\n\n接下来就可以创表，增删查改等操作了\n\n\n\n\n\n","source":"_posts/mongo/brew-mongodb.md","raw":"title: brew安装mongodb  \ndate: 2016-01-27 22:51:27  \ncategories: mongodb  \ntags: [brew,mongodb]\n\n---\n\n## 用brew安装mongodb\n\n\n### mongodb install\n\n安装：\n\n```\n\t$ brew install mongodb\n```\n\n安装好会出现以下内容:\n \n```\n==> Downloading https://homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz\n######################################################################## 100.0%\n==> Pouring mongodb-3.0.7.el_capitan.bottle.tar.gz\n==> Caveats\nTo have launchd start mongodb at login:\n  ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nThen to load mongodb now:\n  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\nOr, if you don't want/need launchctl, you can just run:\n  mongod --config /usr/local/etc/mongod.conf\n==> Summary\n🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M\n```\n\n最后提示了如何启动mongodb：\n\n```\n\tmongod --config /usr/local/etc/mongod.conf\n```\n\n--config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:\n\n```\nsystemLog:\n  destination: file\n  path: /usr/local/var/log/mongodb/mongo.log\n  logAppend: true\nstorage:\n  dbPath: /usr/local/var/mongodb\nnet:\n  bindIp: 127.0.0.1\n~\n~\n```\n\n### 连接mongodb\n\nmongod启动后，在命令行输入`mongo`命令可以连接到数据库:\n\n```\n\t$ mongo\n\tMongoDB shell version: 3.0.7\n\tconnecting to: test\n\t> use blog\n\tswitched to db blog\n\t> exit;\n```\n\n接下来就可以创表，增删查改等操作了\n\n\n\n\n\n","slug":"mongo/brew-mongodb","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pa002di9skco7pjs1q","content":"<h2 id=\"u7528brew_u5B89_u88C5mongodb\"><a href=\"#u7528brew_u5B89_u88C5mongodb\" class=\"headerlink\" title=\"用brew安装mongodb\"></a>用brew安装mongodb</h2><h3 id=\"mongodb_install\"><a href=\"#mongodb_install\" class=\"headerlink\" title=\"mongodb install\"></a>mongodb install</h3><p>安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mongodb</span><br></pre></td></tr></table></figure>\n<p>安装好会出现以下内容:</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">==&gt; Downloading https:<span class=\"comment\">//homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz</span></span><br><span class=\"line\">######################################################################## <span class=\"number\">100.0</span>%</span><br><span class=\"line\">==&gt; Pouring mongodb<span class=\"number\">-3.0</span><span class=\"number\">.7</span>.el_capitan.bottle.tar.gz</span><br><span class=\"line\">==&gt; Caveats</span><br><span class=\"line\">To have launchd start mongodb at login:</span><br><span class=\"line\">  ln -sfv /usr/local/opt/mongodb<span class=\"comment\">/*.plist ~/Library/LaunchAgents</span></span><br><span class=\"line\"><span class=\"comment\">Then to load mongodb now:</span></span><br><span class=\"line\"><span class=\"comment\">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</span></span><br><span class=\"line\"><span class=\"comment\">Or, if you don't want/need launchctl, you can just run:</span></span><br><span class=\"line\"><span class=\"comment\">  mongod --config /usr/local/etc/mongod.conf</span></span><br><span class=\"line\"><span class=\"comment\">==&gt; Summary</span></span><br><span class=\"line\"><span class=\"comment\">🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M</span></span><br></pre></td></tr></table></figure>\n<p>最后提示了如何启动mongodb：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/m</span>ongod.conf</span><br></pre></td></tr></table></figure>\n<p>–config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">systemLog:</span></span><br><span class=\"line\"><span class=\"symbol\">  destination:</span> file</span><br><span class=\"line\"><span class=\"symbol\">  path:</span> <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/var/</span>log<span class=\"meta-keyword\">/mongodb/</span>mongo.log</span><br><span class=\"line\"><span class=\"symbol\">  logAppend:</span> true</span><br><span class=\"line\"><span class=\"symbol\">storage:</span></span><br><span class=\"line\"><span class=\"symbol\">  dbPath:</span> <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/var/</span>mongodb</span><br><span class=\"line\"><span class=\"symbol\">net:</span></span><br><span class=\"line\"><span class=\"symbol\">  bindIp:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3 id=\"u8FDE_u63A5mongodb\"><a href=\"#u8FDE_u63A5mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h3><p>mongod启动后，在命令行输入<code>mongo</code>命令可以连接到数据库:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">MongoDB shell version: <span class=\"number\">3.0</span>.<span class=\"number\">7</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\">&gt; use blog</span><br><span class=\"line\">switched to db blog</span><br><span class=\"line\">&gt; <span class=\"keyword\">exit</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就可以创表，增删查改等操作了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u7528brew_u5B89_u88C5mongodb\"><a href=\"#u7528brew_u5B89_u88C5mongodb\" class=\"headerlink\" title=\"用brew安装mongodb\"></a>用brew安装mongodb</h2><h3 id=\"mongodb_install\"><a href=\"#mongodb_install\" class=\"headerlink\" title=\"mongodb install\"></a>mongodb install</h3><p>安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mongodb</span><br></pre></td></tr></table></figure>\n<p>安装好会出现以下内容:</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">==&gt; Downloading https:<span class=\"comment\">//homebrew.bintray.com/bottles/mongodb-3.0.7.el_capitan.bottle.tar.gz</span></span><br><span class=\"line\">######################################################################## <span class=\"number\">100.0</span>%</span><br><span class=\"line\">==&gt; Pouring mongodb<span class=\"number\">-3.0</span><span class=\"number\">.7</span>.el_capitan.bottle.tar.gz</span><br><span class=\"line\">==&gt; Caveats</span><br><span class=\"line\">To have launchd start mongodb at login:</span><br><span class=\"line\">  ln -sfv /usr/local/opt/mongodb<span class=\"comment\">/*.plist ~/Library/LaunchAgents</span></span><br><span class=\"line\"><span class=\"comment\">Then to load mongodb now:</span></span><br><span class=\"line\"><span class=\"comment\">  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</span></span><br><span class=\"line\"><span class=\"comment\">Or, if you don't want/need launchctl, you can just run:</span></span><br><span class=\"line\"><span class=\"comment\">  mongod --config /usr/local/etc/mongod.conf</span></span><br><span class=\"line\"><span class=\"comment\">==&gt; Summary</span></span><br><span class=\"line\"><span class=\"comment\">🍺  /usr/local/Cellar/mongodb/3.0.7: 17 files, 158M</span></span><br></pre></td></tr></table></figure>\n<p>最后提示了如何启动mongodb：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">mongod --config <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/etc/m</span>ongod.conf</span><br></pre></td></tr></table></figure>\n<p>–config后面的参数是启动时加载的配置文件，如果有什么想自己配置的可以复制一份备份，然后修改自定义的配置:</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">systemLog:</span></span><br><span class=\"line\"><span class=\"symbol\">  destination:</span> file</span><br><span class=\"line\"><span class=\"symbol\">  path:</span> <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/var/</span>log<span class=\"meta-keyword\">/mongodb/</span>mongo.log</span><br><span class=\"line\"><span class=\"symbol\">  logAppend:</span> true</span><br><span class=\"line\"><span class=\"symbol\">storage:</span></span><br><span class=\"line\"><span class=\"symbol\">  dbPath:</span> <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/var/</span>mongodb</span><br><span class=\"line\"><span class=\"symbol\">net:</span></span><br><span class=\"line\"><span class=\"symbol\">  bindIp:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br></pre></td></tr></table></figure>\n<h3 id=\"u8FDE_u63A5mongodb\"><a href=\"#u8FDE_u63A5mongodb\" class=\"headerlink\" title=\"连接mongodb\"></a>连接mongodb</h3><p>mongod启动后，在命令行输入<code>mongo</code>命令可以连接到数据库:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mongo</span><br><span class=\"line\">MongoDB shell version: <span class=\"number\">3.0</span>.<span class=\"number\">7</span></span><br><span class=\"line\">connecting to: test</span><br><span class=\"line\">&gt; use blog</span><br><span class=\"line\">switched to db blog</span><br><span class=\"line\">&gt; <span class=\"keyword\">exit</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就可以创表，增删查改等操作了</p>\n","sticky":0},{"title":"mysql abs func","date":"2021-06-10T15:15:47.000Z","_content":"\n>ABS(*number*)\n>\n> Return the absolute value of a number\n\n\n\n## 基本用法\n\n返回数字参数的绝对值\n\n```\nSELECT ABS(-243.5);     ===> 243.5\n```\n\n\n\n## 无符号数字相减计算异常问题\n\n\n\n例子：创建用户表，年龄字段为非负\n\n```\nCREATE TABLE `user` (\n  `uid` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'uid',\n  `age` int(10) unsigned NOT NULL COMMENT '年龄',\n  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '用户名',\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT '用户表';\n```\n\n写入几条测试数据\n\n```\nINSERT INTO `user` ( `age`, `name`)\nVALUES\n\t( 11, '张小明'),\n\t( 26, '林小红'),\n\t( 21, '李小狼'),\n\t( 18, '陈小洋');\n```\n\n当我们想找出年龄最接近25岁的用户时，会出现Mysql错误：\n\n```\nselect *,ABS(age - 25) as age_sort from user order by age_sort asc limit 1;\n===>BIGINT UNSIGNED value is out of range in '(`user`.`age` - 25)'\n```\n\n\n\n解决方法：使用cast把无符号age转为带符号的number\n\n```\nselect *,ABS(CAST(age AS SIGNED) - 25) as age_sort \nfrom `user` order by age_sort asc limit 1;\n```\n\n\n\n\n\n","source":"_posts/mysql/mysql-abs.md","raw":"title: mysql abs func #BIGINT UNSIGNED value is out of range  \ndate: 2021-06-10 23:15:47  \ncategories: mysql  \ntags: mysql  \n\n---\n\n>ABS(*number*)\n>\n> Return the absolute value of a number\n\n\n\n## 基本用法\n\n返回数字参数的绝对值\n\n```\nSELECT ABS(-243.5);     ===> 243.5\n```\n\n\n\n## 无符号数字相减计算异常问题\n\n\n\n例子：创建用户表，年龄字段为非负\n\n```\nCREATE TABLE `user` (\n  `uid` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'uid',\n  `age` int(10) unsigned NOT NULL COMMENT '年龄',\n  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '用户名',\n  PRIMARY KEY (`uid`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT '用户表';\n```\n\n写入几条测试数据\n\n```\nINSERT INTO `user` ( `age`, `name`)\nVALUES\n\t( 11, '张小明'),\n\t( 26, '林小红'),\n\t( 21, '李小狼'),\n\t( 18, '陈小洋');\n```\n\n当我们想找出年龄最接近25岁的用户时，会出现Mysql错误：\n\n```\nselect *,ABS(age - 25) as age_sort from user order by age_sort asc limit 1;\n===>BIGINT UNSIGNED value is out of range in '(`user`.`age` - 25)'\n```\n\n\n\n解决方法：使用cast把无符号age转为带符号的number\n\n```\nselect *,ABS(CAST(age AS SIGNED) - 25) as age_sort \nfrom `user` order by age_sort asc limit 1;\n```\n\n\n\n\n\n","slug":"mysql/mysql-abs","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pb002fi9skdu46do85","content":"<blockquote>\n<p>ABS(<em>number</em>)</p>\n<p>Return the absolute value of a number</p>\n</blockquote>\n<h2 id=\"u57FA_u672C_u7528_u6CD5\"><a href=\"#u57FA_u672C_u7528_u6CD5\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>返回数字参数的绝对值</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">ABS</span>(<span class=\"number\">-243.5</span>);     ===&gt; 243.5</span><br></pre></td></tr></table></figure>\n<h2 id=\"u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898\"><a href=\"#u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898\" class=\"headerlink\" title=\"无符号数字相减计算异常问题\"></a>无符号数字相减计算异常问题</h2><p>例子：创建用户表，年龄字段为非负</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `uid` int(11) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'uid'</span>,</span><br><span class=\"line\">  `age` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> COMMENT <span class=\"string\">'年龄'</span>,</span><br><span class=\"line\">  `name` varchar(50) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">''</span> COMMENT <span class=\"string\">'用户名'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`uid`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=InnoDB <span class=\"attribute\">AUTO_INCREMENT</span>=1<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8mb4 COMMENT <span class=\"string\">'用户表'</span>;</span><br></pre></td></tr></table></figure>\n<p>写入几条测试数据</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">INSERT</span> <span class=\"selector-tag\">INTO</span> `<span class=\"selector-tag\">user</span>` ( <span class=\"built_in\">`age`</span>, <span class=\"built_in\">`name`</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">VALUES</span></span><br><span class=\"line\">\t( <span class=\"number\">11</span>, <span class=\"string\">'张小明'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">26</span>, <span class=\"string\">'林小红'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">21</span>, <span class=\"string\">'李小狼'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">18</span>, <span class=\"string\">'陈小洋'</span>);</span><br></pre></td></tr></table></figure>\n<p>当我们想找出年龄最接近25岁的用户时，会出现Mysql错误：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">select *,ABS(age - 25) as age_sort <span class=\"keyword\">from</span><span class=\"built_in\"> user </span>order by age_sort asc limit 1;</span><br><span class=\"line\">===&gt;BIGINT UNSIGNED value is out of range <span class=\"keyword\">in</span> <span class=\"string\">'(`user`.`age` - 25)'</span></span><br></pre></td></tr></table></figure>\n<p>解决方法：使用cast把无符号age转为带符号的number</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *,<span class=\"built_in\">ABS</span>(<span class=\"keyword\">CAST</span>(age <span class=\"keyword\">AS</span> SIGNED) - <span class=\"number\">25</span>) <span class=\"keyword\">as</span> age_sort </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age_sort <span class=\"keyword\">asc</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ABS(<em>number</em>)</p>\n<p>Return the absolute value of a number</p>\n</blockquote>\n<h2 id=\"u57FA_u672C_u7528_u6CD5\"><a href=\"#u57FA_u672C_u7528_u6CD5\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>返回数字参数的绝对值</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">ABS</span>(<span class=\"number\">-243.5</span>);     ===&gt; 243.5</span><br></pre></td></tr></table></figure>\n<h2 id=\"u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898\"><a href=\"#u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898\" class=\"headerlink\" title=\"无符号数字相减计算异常问题\"></a>无符号数字相减计算异常问题</h2><p>例子：创建用户表，年龄字段为非负</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `user` (</span><br><span class=\"line\">  `uid` int(11) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'uid'</span>,</span><br><span class=\"line\">  `age` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> COMMENT <span class=\"string\">'年龄'</span>,</span><br><span class=\"line\">  `name` varchar(50) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">''</span> COMMENT <span class=\"string\">'用户名'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`uid`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=InnoDB <span class=\"attribute\">AUTO_INCREMENT</span>=1<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8mb4 COMMENT <span class=\"string\">'用户表'</span>;</span><br></pre></td></tr></table></figure>\n<p>写入几条测试数据</p>\n<figure class=\"highlight less\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">INSERT</span> <span class=\"selector-tag\">INTO</span> `<span class=\"selector-tag\">user</span>` ( <span class=\"built_in\">`age`</span>, <span class=\"built_in\">`name`</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">VALUES</span></span><br><span class=\"line\">\t( <span class=\"number\">11</span>, <span class=\"string\">'张小明'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">26</span>, <span class=\"string\">'林小红'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">21</span>, <span class=\"string\">'李小狼'</span>),</span><br><span class=\"line\">\t( <span class=\"number\">18</span>, <span class=\"string\">'陈小洋'</span>);</span><br></pre></td></tr></table></figure>\n<p>当我们想找出年龄最接近25岁的用户时，会出现Mysql错误：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">select *,ABS(age - 25) as age_sort <span class=\"keyword\">from</span><span class=\"built_in\"> user </span>order by age_sort asc limit 1;</span><br><span class=\"line\">===&gt;BIGINT UNSIGNED value is out of range <span class=\"keyword\">in</span> <span class=\"string\">'(`user`.`age` - 25)'</span></span><br></pre></td></tr></table></figure>\n<p>解决方法：使用cast把无符号age转为带符号的number</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> *,<span class=\"built_in\">ABS</span>(<span class=\"keyword\">CAST</span>(age <span class=\"keyword\">AS</span> SIGNED) - <span class=\"number\">25</span>) <span class=\"keyword\">as</span> age_sort </span><br><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"symbol\">`user`</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> age_sort <span class=\"keyword\">asc</span> <span class=\"keyword\">limit</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"php内置http服务器","date":"2016-01-26T13:52:27.000Z","_content":"\nphp5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。\n\n启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:\n\n```\n\tphp -S localhost:8000\n```\n\n在浏览器中输入`localhost:8000/index.php`就可以访问到当前目录下的index.php文件了。\n\n上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。\n\n如果需要对指向的php服务器指向非默认的php配置文件，可以用`-c`选项去指定对应的ini文件：\n\n```\n\tphp -S localhost:8000 -c app/config/php.ini\n```\n\n\n","source":"_posts/php/php-webserver.md","raw":"title: php内置http服务器  \ndate: 2016-01-26 21:52:27  \ncategories: php  \ntags: php  \n\n---\n\nphp5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。\n\n启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:\n\n```\n\tphp -S localhost:8000\n```\n\n在浏览器中输入`localhost:8000/index.php`就可以访问到当前目录下的index.php文件了。\n\n上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。\n\n如果需要对指向的php服务器指向非默认的php配置文件，可以用`-c`选项去指定对应的ini文件：\n\n```\n\tphp -S localhost:8000 -c app/config/php.ini\n```\n\n\n","slug":"php/php-webserver","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pb002ji9skybvfex6r","content":"<p>php5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。</p>\n<p>启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">php</span> <span class=\"selector-tag\">-S</span> <span class=\"selector-tag\">localhost</span><span class=\"selector-pseudo\">:8000</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入<code>localhost:8000/index.php</code>就可以访问到当前目录下的index.php文件了。</p>\n<p>上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。</p>\n<p>如果需要对指向的php服务器指向非默认的php配置文件，可以用<code>-c</code>选项去指定对应的ini文件：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -S <span class=\"string\">localhost:</span><span class=\"number\">8000</span> -c app<span class=\"regexp\">/config/</span>php.ini</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>php5.4开始内置了web服务器，虽然并不建议在生产环境中使用，但就本地调试来说这是个不错的工具。</p>\n<p>启动服务器很简单，打开终端，进入到项目根目录，执行以下命令:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">php</span> <span class=\"selector-tag\">-S</span> <span class=\"selector-tag\">localhost</span><span class=\"selector-pseudo\">:8000</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入<code>localhost:8000/index.php</code>就可以访问到当前目录下的index.php文件了。</p>\n<p>上面命令会启动一个php Web Server,端口是4000，端口可以根据自己需要换，但注意不要跟其他服务常用端口重复了。</p>\n<p>如果需要对指向的php服务器指向非默认的php配置文件，可以用<code>-c</code>选项去指定对应的ini文件：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -S <span class=\"string\">localhost:</span><span class=\"number\">8000</span> -c app<span class=\"regexp\">/config/</span>php.ini</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"ThinkPHP3.1 事务BUG","date":"2020-02-11T10:13:00.000Z","_content":"\n>  久远的框架不一定就安全，可能有一些隐藏的BUG\n\n## 发现问题\n\n影响：开启事务，rollback后，再执行update/delete/insert等写操作，数据没有发生变化\n\n```php\n\n$UserModel = new UserModel();\n$UserModel->startTrans();\n$uid = 1;\ntry {\n  //dosomething.....\n  $UserModel->where(array(\"uid\"=>$uid))->save(array(\"status\"=>1));\n  $UserModel->commit();\n} catch (\\Exception $e) {\n  $UserModel->rollback();\n}\n//更新无效\n$UserModel->where(array(\"uid\"=>$uid))->save(array(\"login_time\"=>time()));\n\n```\n\n\n## 原因：\n\n事务启动时会关闭mysql的自动提交，事务正常提交后会重新打开mysql的自动提交,但rollback时没重新打开\n\n```\n    /**\n     * 启动事务\n     * @access public\n     * @return void\n     */\n    public function startTrans() {\n\t$this->error = '';//清空错误信息\n        $this->initConnect(true);\n        //数据rollback 支持\n        if ($this->transTimes == 0) {\n            $this->_linkID->autocommit(false);\n        }\n        $this->transTimes++;\n        return ;\n    }\n\t\n    /**\n     * 用于非自动提交状态下面的查询提交\n     * @access public\n     * @return boolen\n     */\n    public function commit() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->commit();\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n\t\t\t\t$this->_linkID->autocommit( true);\n                return false;\n            }\n\t\t\t$this->_linkID->autocommit( true);\n        }\n        return true;\n    }\n\n    /**\n     * 事务回滚\n     * @access public\n     * @return boolen\n     */\n    public function rollback() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->rollback();\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n\n```\n\n\n## 修复：\n在rollback里重新打开自动提交\n\n```\n    /**\n     * 事务回滚\n     * @access public\n     * @return boolen\n     */\n    public function rollback() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->rollback();\n\t\t\t//打开自动提交\n\t\t\t$this->_linkID->autocommit( true);\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n```\n\n\n\n","source":"_posts/php/php_thinkphp3.1_db_bug.md","raw":"title: ThinkPHP3.1 事务BUG\ndate: 2020-02-11 18:13\ncategories: php  \ntags:  [php,mysql]  \n\n---\n\n>  久远的框架不一定就安全，可能有一些隐藏的BUG\n\n## 发现问题\n\n影响：开启事务，rollback后，再执行update/delete/insert等写操作，数据没有发生变化\n\n```php\n\n$UserModel = new UserModel();\n$UserModel->startTrans();\n$uid = 1;\ntry {\n  //dosomething.....\n  $UserModel->where(array(\"uid\"=>$uid))->save(array(\"status\"=>1));\n  $UserModel->commit();\n} catch (\\Exception $e) {\n  $UserModel->rollback();\n}\n//更新无效\n$UserModel->where(array(\"uid\"=>$uid))->save(array(\"login_time\"=>time()));\n\n```\n\n\n## 原因：\n\n事务启动时会关闭mysql的自动提交，事务正常提交后会重新打开mysql的自动提交,但rollback时没重新打开\n\n```\n    /**\n     * 启动事务\n     * @access public\n     * @return void\n     */\n    public function startTrans() {\n\t$this->error = '';//清空错误信息\n        $this->initConnect(true);\n        //数据rollback 支持\n        if ($this->transTimes == 0) {\n            $this->_linkID->autocommit(false);\n        }\n        $this->transTimes++;\n        return ;\n    }\n\t\n    /**\n     * 用于非自动提交状态下面的查询提交\n     * @access public\n     * @return boolen\n     */\n    public function commit() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->commit();\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n\t\t\t\t$this->_linkID->autocommit( true);\n                return false;\n            }\n\t\t\t$this->_linkID->autocommit( true);\n        }\n        return true;\n    }\n\n    /**\n     * 事务回滚\n     * @access public\n     * @return boolen\n     */\n    public function rollback() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->rollback();\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n\n```\n\n\n## 修复：\n在rollback里重新打开自动提交\n\n```\n    /**\n     * 事务回滚\n     * @access public\n     * @return boolen\n     */\n    public function rollback() {\n        if ($this->transTimes > 0) {\n            $result = $this->_linkID->rollback();\n\t\t\t//打开自动提交\n\t\t\t$this->_linkID->autocommit( true);\n            $this->transTimes = 0;\n            if(!$result){\n                $this->error();\n                return false;\n            }\n        }\n        return true;\n    }\n```\n\n\n\n","slug":"php/php_thinkphp3.1_db_bug","published":1,"updated":"2022-04-12T03:12:24.378Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pc002li9skpxaqab1m","content":"<blockquote>\n<p> 久远的框架不一定就安全，可能有一些隐藏的BUG</p>\n</blockquote>\n<h2 id=\"u53D1_u73B0_u95EE_u9898\"><a href=\"#u53D1_u73B0_u95EE_u9898\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>影响：开启事务，rollback后，再执行update/delete/insert等写操作，数据没有发生变化</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$UserModel = <span class=\"keyword\">new</span> UserModel();</span><br><span class=\"line\">$UserModel-&gt;startTrans();</span><br><span class=\"line\">$uid = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething.....</span></span><br><span class=\"line\">  $UserModel-&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">\"uid\"</span>=&gt;$uid))-&gt;save(<span class=\"keyword\">array</span>(<span class=\"string\">\"status\"</span>=&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">  $UserModel-&gt;commit();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (\\<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">  $UserModel-&gt;rollback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新无效</span></span><br><span class=\"line\">$UserModel-&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">\"uid\"</span>=&gt;$uid))-&gt;save(<span class=\"keyword\">array</span>(<span class=\"string\">\"login_time\"</span>=&gt;time()));</span><br></pre></td></tr></table></figure>\n<h2 id=\"u539F_u56E0_uFF1A\"><a href=\"#u539F_u56E0_uFF1A\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><p>事务启动时会关闭mysql的自动提交，事务正常提交后会重新打开mysql的自动提交,但rollback时没重新打开</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动事务</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startTrans</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;error = <span class=\"string\">''</span>;<span class=\"comment\">//清空错误信息</span></span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;initConnect(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       <span class=\"comment\">//数据rollback 支持</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;transTimes++;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用于非自动提交状态下面的查询提交</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;commit();</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 事务回滚</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rollback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u590D_uFF1A\"><a href=\"#u4FEE_u590D_uFF1A\" class=\"headerlink\" title=\"修复：\"></a>修复：</h2><p>在rollback里重新打开自动提交</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 事务回滚</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rollback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class=\"line\"><span class=\"comment\">//打开自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">         <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 久远的框架不一定就安全，可能有一些隐藏的BUG</p>\n</blockquote>\n<h2 id=\"u53D1_u73B0_u95EE_u9898\"><a href=\"#u53D1_u73B0_u95EE_u9898\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h2><p>影响：开启事务，rollback后，再执行update/delete/insert等写操作，数据没有发生变化</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$UserModel = <span class=\"keyword\">new</span> UserModel();</span><br><span class=\"line\">$UserModel-&gt;startTrans();</span><br><span class=\"line\">$uid = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//dosomething.....</span></span><br><span class=\"line\">  $UserModel-&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">\"uid\"</span>=&gt;$uid))-&gt;save(<span class=\"keyword\">array</span>(<span class=\"string\">\"status\"</span>=&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">  $UserModel-&gt;commit();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (\\<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">  $UserModel-&gt;rollback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//更新无效</span></span><br><span class=\"line\">$UserModel-&gt;where(<span class=\"keyword\">array</span>(<span class=\"string\">\"uid\"</span>=&gt;$uid))-&gt;save(<span class=\"keyword\">array</span>(<span class=\"string\">\"login_time\"</span>=&gt;time()));</span><br></pre></td></tr></table></figure>\n<h2 id=\"u539F_u56E0_uFF1A\"><a href=\"#u539F_u56E0_uFF1A\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><p>事务启动时会关闭mysql的自动提交，事务正常提交后会重新打开mysql的自动提交,但rollback时没重新打开</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 启动事务</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">startTrans</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;error = <span class=\"string\">''</span>;<span class=\"comment\">//清空错误信息</span></span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;initConnect(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">       <span class=\"comment\">//数据rollback 支持</span></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;transTimes++;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 用于非自动提交状态下面的查询提交</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">commit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;commit();</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 事务回滚</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rollback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class=\"line\">           <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u590D_uFF1A\"><a href=\"#u4FEE_u590D_uFF1A\" class=\"headerlink\" title=\"修复：\"></a>修复：</h2><p>在rollback里重新打开自动提交</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 事务回滚</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@access</span> public</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span> boolen</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rollback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;transTimes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         $result = <span class=\"keyword\">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class=\"line\"><span class=\"comment\">//打开自动提交</span></span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;_linkID-&gt;autocommit( <span class=\"keyword\">true</span>);</span><br><span class=\"line\">         <span class=\"keyword\">$this</span>-&gt;transTimes = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(!$result)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;error();</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"修改用brew安装的mysql配置","date":"2015-10-18T07:35:33.000Z","_content":"\n## 用brew安装mysql\n\n[brew](http://brew.sh/)是OS X上的包管理工具，类型linux上的apt-get, yum等\n\n### 首先，需要先装好brew\n\n```\n\t$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### mysql install\n\n安装：\n\n```\n\t$ brew install mysql\n```\n\n设置开机启动:\n \n```\n \t$ ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n \t$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n \n## 修改mysql配置  \n \n### 查看配置文件引用的路径\n \n```\n\t$ mysqld --help --verbose | more\n```\n \n通过这命令，可以看出mysql默认调用的配置文件路径：\n\n```\n\tDefault options are read from the following files in the given order:\n\t/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n```\n\n### 创建配置文件 \n\nbrew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。\n先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  \n\n```\n\t$ ls $(brew --prefix mysql)/support-files/my-*\n```\n   \n复制到引用目录：\n\n```\n\t$ cp /usr/local/opt/mysql/support-files/my-default.cnf /etc/my.cnf\n```\n\t\n然后就可以按自己需求修改配置了\n\n## mysql启动命令\n\n重启mysql,  unload 是关闭， load是启动\n\n```\n\t$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n\t$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n\n为了文件管理可以把命令alias下：\n\n```\n\t$ vim ~/.bash_aliases\n```\n\n输入以下内容，保存\n\n```\n\talias mysql.start=\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.stop=\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.restart='mysql.stop && mysql.start'  \n```\n\n保存后添加到.bash_profile文件中\n\n```\n\techo \"[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases\" >> ~/.bash_profile     \n\tsource ~/.bash_profile\n```\n\n这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了\n\n```\n\t$ mysql.start\t\n\t$ mysql.stop\n\t$ mysql.restart\n```\n\n\n\n\n","source":"_posts/mysql/brew-mysql.md","raw":"title: 修改用brew安装的mysql配置\ndate: 2015-10-18 15:35:33\ncategories: mysql\ntags: brew\n---\n\n## 用brew安装mysql\n\n[brew](http://brew.sh/)是OS X上的包管理工具，类型linux上的apt-get, yum等\n\n### 首先，需要先装好brew\n\n```\n\t$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n### mysql install\n\n安装：\n\n```\n\t$ brew install mysql\n```\n\n设置开机启动:\n \n```\n \t$ ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents\n \t$ launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n \n## 修改mysql配置  \n \n### 查看配置文件引用的路径\n \n```\n\t$ mysqld --help --verbose | more\n```\n \n通过这命令，可以看出mysql默认调用的配置文件路径：\n\n```\n\tDefault options are read from the following files in the given order:\n\t/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n```\n\n### 创建配置文件 \n\nbrew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。\n先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  \n\n```\n\t$ ls $(brew --prefix mysql)/support-files/my-*\n```\n   \n复制到引用目录：\n\n```\n\t$ cp /usr/local/opt/mysql/support-files/my-default.cnf /etc/my.cnf\n```\n\t\n然后就可以按自己需求修改配置了\n\n## mysql启动命令\n\n重启mysql,  unload 是关闭， load是启动\n\n```\n\t$ launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n\t$ launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\n```\n\n为了文件管理可以把命令alias下：\n\n```\n\t$ vim ~/.bash_aliases\n```\n\n输入以下内容，保存\n\n```\n\talias mysql.start=\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.stop=\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"\n\talias mysql.restart='mysql.stop && mysql.start'  \n```\n\n保存后添加到.bash_profile文件中\n\n```\n\techo \"[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases\" >> ~/.bash_profile     \n\tsource ~/.bash_profile\n```\n\n这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了\n\n```\n\t$ mysql.start\t\n\t$ mysql.stop\n\t$ mysql.restart\n```\n\n\n\n\n","slug":"mysql/brew-mysql","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pc002pi9skhoyjvv23","content":"<h2 id=\"u7528brew_u5B89_u88C5mysql\"><a href=\"#u7528brew_u5B89_u88C5mysql\" class=\"headerlink\" title=\"用brew安装mysql\"></a>用brew安装mysql</h2><p><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">brew</a>是OS X上的包管理工具，类型linux上的apt-get, yum等</p>\n<h3 id=\"u9996_u5148_uFF0C_u9700_u8981_u5148_u88C5_u597Dbrew\"><a href=\"#u9996_u5148_uFF0C_u9700_u8981_u5148_u88C5_u597Dbrew\" class=\"headerlink\" title=\"首先，需要先装好brew\"></a>首先，需要先装好brew</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> ruby <span class=\"literal\">-e</span> <span class=\"string\">\"<span class=\"variable\">$</span>(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql_install\"><a href=\"#mysql_install\" class=\"headerlink\" title=\"mysql install\"></a>mysql install</h3><p>安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mysql</span><br></pre></td></tr></table></figure>\n<p>设置开机启动:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ln -sfv /usr/local/opt/mysql/*.plist ~<span class=\"regexp\">/Library/</span>LaunchAgents</span><br><span class=\"line\"><span class=\"variable\">$ </span>launchctl load ~<span class=\"regexp\">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539mysql_u914D_u7F6E\"><a href=\"#u4FEE_u6539mysql_u914D_u7F6E\" class=\"headerlink\" title=\"修改mysql配置\"></a>修改mysql配置</h2><h3 id=\"u67E5_u770B_u914D_u7F6E_u6587_u4EF6_u5F15_u7528_u7684_u8DEF_u5F84\"><a href=\"#u67E5_u770B_u914D_u7F6E_u6587_u4EF6_u5F15_u7528_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"查看配置文件引用的路径\"></a>查看配置文件引用的路径</h3><figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mysqld <span class=\"comment\">--help --verbose | more</span></span><br></pre></td></tr></table></figure>\n<p>通过这命令，可以看出mysql默认调用的配置文件路径：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Default</span> <span class=\"keyword\">options</span> are <span class=\"keyword\">read</span> <span class=\"keyword\">from</span> the following files in the given order:</span><br><span class=\"line\"><span class=\"regexp\">/etc/my</span>.cnf <span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/my.cnf /u</span>sr<span class=\"regexp\">/local/</span>etc<span class=\"regexp\">/my.cnf ~/</span>.my.cnf</span><br></pre></td></tr></table></figure>\n<h3 id=\"u521B_u5EFA_u914D_u7F6E_u6587_u4EF6\"><a href=\"#u521B_u5EFA_u914D_u7F6E_u6587_u4EF6\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><p>brew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。<br>先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  </p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> ls <span class=\"symbol\">$</span>(brew --prefix mysql)/support-<span class=\"keyword\">files</span>/my-*</span><br></pre></td></tr></table></figure>\n<p>复制到引用目录：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/my</span>sql<span class=\"regexp\">/support-files/my</span>-<span class=\"keyword\">default</span>.cnf <span class=\"regexp\">/etc/my</span>.cnf</span><br></pre></td></tr></table></figure>\n<p>然后就可以按自己需求修改配置了</p>\n<h2 id=\"mysql_u542F_u52A8_u547D_u4EE4\"><a href=\"#mysql_u542F_u52A8_u547D_u4EE4\" class=\"headerlink\" title=\"mysql启动命令\"></a>mysql启动命令</h2><p>重启mysql,  unload 是关闭， load是启动</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ launchctl unload -w ~/Library/LaunchAgents/homebrew<span class=\"selector-class\">.mxcl</span><span class=\"selector-class\">.mysql</span>.plist</span><br><span class=\"line\">$ launchctl load -w ~/Library/LaunchAgents/homebrew<span class=\"selector-class\">.mxcl</span><span class=\"selector-class\">.mysql</span>.plist</span><br></pre></td></tr></table></figure>\n<p>为了文件管理可以把命令alias下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>vim ~<span class=\"regexp\">/.bash_aliases</span></span><br></pre></td></tr></table></figure>\n<p>输入以下内容，保存</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> mysql.<span class=\"built_in\">start</span>=<span class=\"string\">\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mysql.<span class=\"built_in\">stop</span>=<span class=\"string\">\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mysql.restart=<span class=\"string\">'mysql.stop &amp;&amp; mysql.start'</span></span><br></pre></td></tr></table></figure>\n<p>保存后添加到.bash_profile文件中</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"[[ -f ~/.bash_aliases ]] &amp;&amp; . ~/.bash_aliases\"</span> &gt;&gt; ~<span class=\"string\">/.bash_profile</span>     </span><br><span class=\"line\">source ~<span class=\"string\">/.bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>mysql.start\t</span><br><span class=\"line\"><span class=\"variable\">$ </span>mysql.stop</span><br><span class=\"line\"><span class=\"variable\">$ </span>mysql.restart</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u7528brew_u5B89_u88C5mysql\"><a href=\"#u7528brew_u5B89_u88C5mysql\" class=\"headerlink\" title=\"用brew安装mysql\"></a>用brew安装mysql</h2><p><a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">brew</a>是OS X上的包管理工具，类型linux上的apt-get, yum等</p>\n<h3 id=\"u9996_u5148_uFF0C_u9700_u8981_u5148_u88C5_u597Dbrew\"><a href=\"#u9996_u5148_uFF0C_u9700_u8981_u5148_u88C5_u597Dbrew\" class=\"headerlink\" title=\"首先，需要先装好brew\"></a>首先，需要先装好brew</h3><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> ruby <span class=\"literal\">-e</span> <span class=\"string\">\"<span class=\"variable\">$</span>(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql_install\"><a href=\"#mysql_install\" class=\"headerlink\" title=\"mysql install\"></a>mysql install</h3><p>安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mysql</span><br></pre></td></tr></table></figure>\n<p>设置开机启动:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ln -sfv /usr/local/opt/mysql/*.plist ~<span class=\"regexp\">/Library/</span>LaunchAgents</span><br><span class=\"line\"><span class=\"variable\">$ </span>launchctl load ~<span class=\"regexp\">/Library/</span>LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539mysql_u914D_u7F6E\"><a href=\"#u4FEE_u6539mysql_u914D_u7F6E\" class=\"headerlink\" title=\"修改mysql配置\"></a>修改mysql配置</h2><h3 id=\"u67E5_u770B_u914D_u7F6E_u6587_u4EF6_u5F15_u7528_u7684_u8DEF_u5F84\"><a href=\"#u67E5_u770B_u914D_u7F6E_u6587_u4EF6_u5F15_u7528_u7684_u8DEF_u5F84\" class=\"headerlink\" title=\"查看配置文件引用的路径\"></a>查看配置文件引用的路径</h3><figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mysqld <span class=\"comment\">--help --verbose | more</span></span><br></pre></td></tr></table></figure>\n<p>通过这命令，可以看出mysql默认调用的配置文件路径：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Default</span> <span class=\"keyword\">options</span> are <span class=\"keyword\">read</span> <span class=\"keyword\">from</span> the following files in the given order:</span><br><span class=\"line\"><span class=\"regexp\">/etc/my</span>.cnf <span class=\"regexp\">/etc/my</span>sql<span class=\"regexp\">/my.cnf /u</span>sr<span class=\"regexp\">/local/</span>etc<span class=\"regexp\">/my.cnf ~/</span>.my.cnf</span><br></pre></td></tr></table></figure>\n<h3 id=\"u521B_u5EFA_u914D_u7F6E_u6587_u4EF6\"><a href=\"#u521B_u5EFA_u914D_u7F6E_u6587_u4EF6\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h3><p>brew安装的mysql，通常这几个路径都是没有创建配置文件的，我们自己创建一下。<br>先找出我们安装的mysql的配置样例文件,在安装文件中的support-files文件夹中：  </p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> ls <span class=\"symbol\">$</span>(brew --prefix mysql)/support-<span class=\"keyword\">files</span>/my-*</span><br></pre></td></tr></table></figure>\n<p>复制到引用目录：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cp <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/opt/my</span>sql<span class=\"regexp\">/support-files/my</span>-<span class=\"keyword\">default</span>.cnf <span class=\"regexp\">/etc/my</span>.cnf</span><br></pre></td></tr></table></figure>\n<p>然后就可以按自己需求修改配置了</p>\n<h2 id=\"mysql_u542F_u52A8_u547D_u4EE4\"><a href=\"#mysql_u542F_u52A8_u547D_u4EE4\" class=\"headerlink\" title=\"mysql启动命令\"></a>mysql启动命令</h2><p>重启mysql,  unload 是关闭， load是启动</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ launchctl unload -w ~/Library/LaunchAgents/homebrew<span class=\"selector-class\">.mxcl</span><span class=\"selector-class\">.mysql</span>.plist</span><br><span class=\"line\">$ launchctl load -w ~/Library/LaunchAgents/homebrew<span class=\"selector-class\">.mxcl</span><span class=\"selector-class\">.mysql</span>.plist</span><br></pre></td></tr></table></figure>\n<p>为了文件管理可以把命令alias下：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>vim ~<span class=\"regexp\">/.bash_aliases</span></span><br></pre></td></tr></table></figure>\n<p>输入以下内容，保存</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> mysql.<span class=\"built_in\">start</span>=<span class=\"string\">\"launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mysql.<span class=\"built_in\">stop</span>=<span class=\"string\">\"launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\"</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mysql.restart=<span class=\"string\">'mysql.stop &amp;&amp; mysql.start'</span></span><br></pre></td></tr></table></figure>\n<p>保存后添加到.bash_profile文件中</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"[[ -f ~/.bash_aliases ]] &amp;&amp; . ~/.bash_aliases\"</span> &gt;&gt; ~<span class=\"string\">/.bash_profile</span>     </span><br><span class=\"line\">source ~<span class=\"string\">/.bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>这样，bash_aliases就生效了，通过以下命令就可以控制mysql开启，关闭和重启了</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>mysql.start\t</span><br><span class=\"line\"><span class=\"variable\">$ </span>mysql.stop</span><br><span class=\"line\"><span class=\"variable\">$ </span>mysql.restart</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"distinct 排重查询","date":"2015-01-11T13:06:35.000Z","_content":"\n>distinct 的作用是根据某字段或某些字段去除重复数据  \n\n\n example,student表结构数据如下    \n\nid | class | name   \n--- | --- | ---\n1 | 1 | jacky\n2 | 1 | jacky\n3 | 1 | tom\n4 | 2 | alen\n5 | 2 | jacky\n6 | 4 | jacky\n\n\n# 查询  \n\n## 查询粟子1:单个排重\n\n```\nselect distinct name from student\n```\n搜索结果：\n\n| name |   \n| --- |\n| jacky |\n| tom |\n| alen |\n\n对name进行去重，但搜索结果只有name这个字段\n\n## 查询粟子2：组合排重\n\n```\nselect distinct name, class from student\n\n```\n则是对 (name, class) 组合起来去重。搜索结果是：\n\n| name | class |\n| --- | --- |\n| jackey |\t1 |\n| tom |\t1 |\n| alen\t| 2 |\n| jackey\t| 2 |\n| jackey\t| 4 |\n\n# 统计  \n\n## 统计粟子1：单个排重统计\n\n```\nselect count(distinct name) from student\n```\n\n结果：3 (去重后的name只有jackey,tom,alen)  \n同理也可以进行组合去重统计\n\n## 统计粟子2： 组合排重统计\n\n```\nselect count(distinct name, class) from student\n\n```\n\n结果： 5\n\n---\n\n\n\n\n\n\n","source":"_posts/mysql/mysql-distinct.md","raw":"title: distinct 排重查询\ndate: 2015-1-11 21:06:35\ncategories: mysql\ntags: [mysql,distinct]\n\n---\n\n>distinct 的作用是根据某字段或某些字段去除重复数据  \n\n\n example,student表结构数据如下    \n\nid | class | name   \n--- | --- | ---\n1 | 1 | jacky\n2 | 1 | jacky\n3 | 1 | tom\n4 | 2 | alen\n5 | 2 | jacky\n6 | 4 | jacky\n\n\n# 查询  \n\n## 查询粟子1:单个排重\n\n```\nselect distinct name from student\n```\n搜索结果：\n\n| name |   \n| --- |\n| jacky |\n| tom |\n| alen |\n\n对name进行去重，但搜索结果只有name这个字段\n\n## 查询粟子2：组合排重\n\n```\nselect distinct name, class from student\n\n```\n则是对 (name, class) 组合起来去重。搜索结果是：\n\n| name | class |\n| --- | --- |\n| jackey |\t1 |\n| tom |\t1 |\n| alen\t| 2 |\n| jackey\t| 2 |\n| jackey\t| 4 |\n\n# 统计  \n\n## 统计粟子1：单个排重统计\n\n```\nselect count(distinct name) from student\n```\n\n结果：3 (去重后的name只有jackey,tom,alen)  \n同理也可以进行组合去重统计\n\n## 统计粟子2： 组合排重统计\n\n```\nselect count(distinct name, class) from student\n\n```\n\n结果： 5\n\n---\n\n\n\n\n\n\n","slug":"mysql/mysql-distinct","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pd002ri9skdh87qqmz","content":"<blockquote>\n<p>distinct 的作用是根据某字段或某些字段去除重复数据  </p>\n</blockquote>\n<p> example,student表结构数据如下    </p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>class</th>\n<th>name   </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>tom</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>alen</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>jacky</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"u67E5_u8BE2\"><a href=\"#u67E5_u8BE2\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"u67E5_u8BE2_u7C9F_u5B501_3A_u5355_u4E2A_u6392_u91CD\"><a href=\"#u67E5_u8BE2_u7C9F_u5B501_3A_u5355_u4E2A_u6392_u91CD\" class=\"headerlink\" title=\"查询粟子1:单个排重\"></a>查询粟子1:单个排重</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>搜索结果：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jacky</td>\n</tr>\n<tr>\n<td>tom</td>\n</tr>\n<tr>\n<td>alen</td>\n</tr>\n</tbody>\n</table>\n<p>对name进行去重，但搜索结果只有name这个字段</p>\n<h2 id=\"u67E5_u8BE2_u7C9F_u5B502_uFF1A_u7EC4_u5408_u6392_u91CD\"><a href=\"#u67E5_u8BE2_u7C9F_u5B502_uFF1A_u7EC4_u5408_u6392_u91CD\" class=\"headerlink\" title=\"查询粟子2：组合排重\"></a>查询粟子2：组合排重</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">class</span> <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>则是对 (name, class) 组合起来去重。搜索结果是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jackey</td>\n<td>1</td>\n</tr>\n<tr>\n<td>tom</td>\n<td>1</td>\n</tr>\n<tr>\n<td>alen</td>\n<td>2</td>\n</tr>\n<tr>\n<td>jackey</td>\n<td>2</td>\n</tr>\n<tr>\n<td>jackey</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1\" class=\"headerlink\" title=\"统计\"></a>统计</h1><h2 id=\"u7EDF_u8BA1_u7C9F_u5B501_uFF1A_u5355_u4E2A_u6392_u91CD_u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1_u7C9F_u5B501_uFF1A_u5355_u4E2A_u6392_u91CD_u7EDF_u8BA1\" class=\"headerlink\" title=\"统计粟子1：单个排重统计\"></a>统计粟子1：单个排重统计</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>结果：3 (去重后的name只有jackey,tom,alen)<br>同理也可以进行组合去重统计</p>\n<h2 id=\"u7EDF_u8BA1_u7C9F_u5B502_uFF1A__u7EC4_u5408_u6392_u91CD_u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1_u7C9F_u5B502_uFF1A__u7EC4_u5408_u6392_u91CD_u7EDF_u8BA1\" class=\"headerlink\" title=\"统计粟子2： 组合排重统计\"></a>统计粟子2： 组合排重统计</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">class</span>) <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>结果： 5</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>distinct 的作用是根据某字段或某些字段去除重复数据  </p>\n</blockquote>\n<p> example,student表结构数据如下    </p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>class</th>\n<th>name   </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1</td>\n<td>tom</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>alen</td>\n</tr>\n<tr>\n<td>5</td>\n<td>2</td>\n<td>jacky</td>\n</tr>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>jacky</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"u67E5_u8BE2\"><a href=\"#u67E5_u8BE2\" class=\"headerlink\" title=\"查询\"></a>查询</h1><h2 id=\"u67E5_u8BE2_u7C9F_u5B501_3A_u5355_u4E2A_u6392_u91CD\"><a href=\"#u67E5_u8BE2_u7C9F_u5B501_3A_u5355_u4E2A_u6392_u91CD\" class=\"headerlink\" title=\"查询粟子1:单个排重\"></a>查询粟子1:单个排重</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>搜索结果：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jacky</td>\n</tr>\n<tr>\n<td>tom</td>\n</tr>\n<tr>\n<td>alen</td>\n</tr>\n</tbody>\n</table>\n<p>对name进行去重，但搜索结果只有name这个字段</p>\n<h2 id=\"u67E5_u8BE2_u7C9F_u5B502_uFF1A_u7EC4_u5408_u6392_u91CD\"><a href=\"#u67E5_u8BE2_u7C9F_u5B502_uFF1A_u7EC4_u5408_u6392_u91CD\" class=\"headerlink\" title=\"查询粟子2：组合排重\"></a>查询粟子2：组合排重</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">class</span> <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>则是对 (name, class) 组合起来去重。搜索结果是：</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jackey</td>\n<td>1</td>\n</tr>\n<tr>\n<td>tom</td>\n<td>1</td>\n</tr>\n<tr>\n<td>alen</td>\n<td>2</td>\n</tr>\n<tr>\n<td>jackey</td>\n<td>2</td>\n</tr>\n<tr>\n<td>jackey</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1\" class=\"headerlink\" title=\"统计\"></a>统计</h1><h2 id=\"u7EDF_u8BA1_u7C9F_u5B501_uFF1A_u5355_u4E2A_u6392_u91CD_u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1_u7C9F_u5B501_uFF1A_u5355_u4E2A_u6392_u91CD_u7EDF_u8BA1\" class=\"headerlink\" title=\"统计粟子1：单个排重统计\"></a>统计粟子1：单个排重统计</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>) <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>结果：3 (去重后的name只有jackey,tom,alen)<br>同理也可以进行组合去重统计</p>\n<h2 id=\"u7EDF_u8BA1_u7C9F_u5B502_uFF1A__u7EC4_u5408_u6392_u91CD_u7EDF_u8BA1\"><a href=\"#u7EDF_u8BA1_u7C9F_u5B502_uFF1A__u7EC4_u5408_u6392_u91CD_u7EDF_u8BA1\" class=\"headerlink\" title=\"统计粟子2： 组合排重统计\"></a>统计粟子2： 组合排重统计</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">count</span>(<span class=\"keyword\">distinct</span> <span class=\"keyword\">name</span>, <span class=\"keyword\">class</span>) <span class=\"keyword\">from</span> student</span><br></pre></td></tr></table></figure>\n<p>结果： 5</p>\n<hr>\n","sticky":0},{"title":"mysql case的用法","date":"2016-01-14T15:15:47.000Z","_content":"\n>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 \n\n现在我们先建一个公司职员表来试一下：\n\n|id|department|name|wages|sex|\n|---|---|---|---|---|\n|1|人事部|aimer|8500|1|\n|2|人事部|jack|6000|2|\n|3|销售部|tom|15000|2|\n|4|销售部|tony|9000|2|\n|5|人事部|supercell|8500|1|\n|6|销售部|lisa|18000|1|\n\n## 在查询结果中用case\n\nsex字段中，1是女士，2是男士  \nwages字段中，薪酬的级别分布是这样：  \nt10: 5000 < wages <= 6500  \nt9: 6500 < wages <= 8500  \nt8: 8500 < wages <= 11000  \nt7: 11000 < wages <= 14000  \nt6: 14000 < wages <= 17500\nt5: 17500 < wages <= 22000\nt4: 22000 < wages <= 27000\n  \n如果我们要在查询结果中清析地表现出来可以这样：\n\n```\n\tSELECT \n\t\tdepartment,name,\n\t\t\tCASE \n\t\t\tWHEN 5000<wages AND wages<=6500 THEN 't10'\n\t\t\tWHEN 6500 < wages AND wages <= 8500 THEN 't9'\n\t\t\tWHEN 8500 < wages AND wages <= 11000 THEN 't8'\n\t\t\tWHEN 11000 < wages AND wages <= 14000 THEN 't7'\n\t\t\tWHEN 14000 < wages AND wages <= 17500 THEN 't6'\n\t\t\tWHEN 17500 < wages AND wages <= 22000 THEN 't5'\n\t\t\tWHEN 22000 < wages AND wages <= 27000 THEN 't6'\n            ELSE '未定义级别'\n            END as wages\n\t\t\t,\n\t\t\tCASE  \n\t\t\tWHEN sex = 1 THEN '女'\n\t\t\tWHEN sex = 2 THEN '男'\n\t\t\tELSE '未知性别'\n\t\t\tEND as sex\n\tFROM\n\t\t`cdb_member`\n```\n结果如下:\n\n|department|name|wages|sex|\n|---|---|---|---|\n|人事部|aimer|t9\t|女|\n|人事部|jack|t10|\t男|\n|销售部|tom|\tt6|\t女|\n|销售部|tony|t8\t|女|\n|人事部|supercell|t9|\t男|\n|销售部|lisa|t5\t|男|\n\n## 在统计结果中用case\n\n如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：\n\n```\n\tSELECT \n\t\tdepartment,\n\t\tSUM(CASE WHEN sex = 1 THEN 1 ELSE 0 END) as 'man',\n\t\tSUM(CASE WHEN sex = 2 THEN 1 ELSE 0 END) as 'woman',\n\t\tSUM(CASE WHEN 5000 < wages AND wages <= 6500 THEN 1 ELSE 0 END ) AS 't10',\n\t\tSUM(CASE WHEN 6500 < wages AND wages <= 8500 THEN 1 ELSE 0 END ) AS 't9',\n\t\tSUM(CASE WHEN 8500 < wages AND wages <= 11000 THEN 1 ELSE 0 END ) AS 't8',\n\t\tSUM(CASE WHEN 11000 < wages AND wages <= 14000 THEN 1 ELSE 0 END ) AS 't7',\n\t\tSUM(CASE WHEN 14000 < wages AND wages <= 17500 THEN 1 ELSE 0 END ) AS 't6',\n\t\tSUM(CASE WHEN 17500 < wages AND wages <= 22000 THEN 1 ELSE 0 END ) AS 't5',\n\t\tSUM(CASE WHEN 22000 < wages AND wages <= 27000 THEN 1 ELSE 0 END ) AS 't4'\n\tFROM\n\t\t`cdb_member`\n    GROUP BY \n    department\n```\n\n|department|man|woman|t10|t9|t8|t7|t6|t5|t4|\n|---|---|---|---|---|---|---|---|---|---|\n|人事部\t|1|\t2|\t1|\t2|\t0|\t0\t|0|\t0|\t0|\n|销售部\t|2\t|1|\t0\t|0|\t1|\t0\t|1\t|1|\t0|\n","source":"_posts/mysql/mysql-case.md","raw":"title: mysql case的用法  \ndate: 2016-01-14 23:15:47  \ncategories: mysql  \ntags: mysql  \n\n---\n\n>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 \n\n现在我们先建一个公司职员表来试一下：\n\n|id|department|name|wages|sex|\n|---|---|---|---|---|\n|1|人事部|aimer|8500|1|\n|2|人事部|jack|6000|2|\n|3|销售部|tom|15000|2|\n|4|销售部|tony|9000|2|\n|5|人事部|supercell|8500|1|\n|6|销售部|lisa|18000|1|\n\n## 在查询结果中用case\n\nsex字段中，1是女士，2是男士  \nwages字段中，薪酬的级别分布是这样：  \nt10: 5000 < wages <= 6500  \nt9: 6500 < wages <= 8500  \nt8: 8500 < wages <= 11000  \nt7: 11000 < wages <= 14000  \nt6: 14000 < wages <= 17500\nt5: 17500 < wages <= 22000\nt4: 22000 < wages <= 27000\n  \n如果我们要在查询结果中清析地表现出来可以这样：\n\n```\n\tSELECT \n\t\tdepartment,name,\n\t\t\tCASE \n\t\t\tWHEN 5000<wages AND wages<=6500 THEN 't10'\n\t\t\tWHEN 6500 < wages AND wages <= 8500 THEN 't9'\n\t\t\tWHEN 8500 < wages AND wages <= 11000 THEN 't8'\n\t\t\tWHEN 11000 < wages AND wages <= 14000 THEN 't7'\n\t\t\tWHEN 14000 < wages AND wages <= 17500 THEN 't6'\n\t\t\tWHEN 17500 < wages AND wages <= 22000 THEN 't5'\n\t\t\tWHEN 22000 < wages AND wages <= 27000 THEN 't6'\n            ELSE '未定义级别'\n            END as wages\n\t\t\t,\n\t\t\tCASE  \n\t\t\tWHEN sex = 1 THEN '女'\n\t\t\tWHEN sex = 2 THEN '男'\n\t\t\tELSE '未知性别'\n\t\t\tEND as sex\n\tFROM\n\t\t`cdb_member`\n```\n结果如下:\n\n|department|name|wages|sex|\n|---|---|---|---|\n|人事部|aimer|t9\t|女|\n|人事部|jack|t10|\t男|\n|销售部|tom|\tt6|\t女|\n|销售部|tony|t8\t|女|\n|人事部|supercell|t9|\t男|\n|销售部|lisa|t5\t|男|\n\n## 在统计结果中用case\n\n如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：\n\n```\n\tSELECT \n\t\tdepartment,\n\t\tSUM(CASE WHEN sex = 1 THEN 1 ELSE 0 END) as 'man',\n\t\tSUM(CASE WHEN sex = 2 THEN 1 ELSE 0 END) as 'woman',\n\t\tSUM(CASE WHEN 5000 < wages AND wages <= 6500 THEN 1 ELSE 0 END ) AS 't10',\n\t\tSUM(CASE WHEN 6500 < wages AND wages <= 8500 THEN 1 ELSE 0 END ) AS 't9',\n\t\tSUM(CASE WHEN 8500 < wages AND wages <= 11000 THEN 1 ELSE 0 END ) AS 't8',\n\t\tSUM(CASE WHEN 11000 < wages AND wages <= 14000 THEN 1 ELSE 0 END ) AS 't7',\n\t\tSUM(CASE WHEN 14000 < wages AND wages <= 17500 THEN 1 ELSE 0 END ) AS 't6',\n\t\tSUM(CASE WHEN 17500 < wages AND wages <= 22000 THEN 1 ELSE 0 END ) AS 't5',\n\t\tSUM(CASE WHEN 22000 < wages AND wages <= 27000 THEN 1 ELSE 0 END ) AS 't4'\n\tFROM\n\t\t`cdb_member`\n    GROUP BY \n    department\n```\n\n|department|man|woman|t10|t9|t8|t7|t6|t5|t4|\n|---|---|---|---|---|---|---|---|---|---|\n|人事部\t|1|\t2|\t1|\t2|\t0|\t0\t|0|\t0|\t0|\n|销售部\t|2\t|1|\t0\t|0|\t1|\t0\t|1\t|1|\t0|\n","slug":"mysql/mysql-case","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pd002vi9sk11xo7hpo","content":"<blockquote>\n<p>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 </p>\n</blockquote>\n<p>现在我们先建一个公司职员表来试一下：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>department</th>\n<th>name</th>\n<th>wages</th>\n<th>sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>人事部</td>\n<td>aimer</td>\n<td>8500</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>人事部</td>\n<td>jack</td>\n<td>6000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>销售部</td>\n<td>tom</td>\n<td>15000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>销售部</td>\n<td>tony</td>\n<td>9000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>人事部</td>\n<td>supercell</td>\n<td>8500</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>销售部</td>\n<td>lisa</td>\n<td>18000</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"u5728_u67E5_u8BE2_u7ED3_u679C_u4E2D_u7528case\"><a href=\"#u5728_u67E5_u8BE2_u7ED3_u679C_u4E2D_u7528case\" class=\"headerlink\" title=\"在查询结果中用case\"></a>在查询结果中用case</h2><p>sex字段中，1是女士，2是男士<br>wages字段中，薪酬的级别分布是这样：<br>t10: 5000 &lt; wages &lt;= 6500<br>t9: 6500 &lt; wages &lt;= 8500<br>t8: 8500 &lt; wages &lt;= 11000<br>t7: 11000 &lt; wages &lt;= 14000<br>t6: 14000 &lt; wages &lt;= 17500<br>t5: 17500 &lt; wages &lt;= 22000<br>t4: 22000 &lt; wages &lt;= 27000</p>\n<p>如果我们要在查询结果中清析地表现出来可以这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\tdepartment,<span class=\"keyword\">name</span>,</span><br><span class=\"line\">\t\t<span class=\"keyword\">CASE</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">5000</span>&lt;wages <span class=\"keyword\">AND</span> wages&lt;=<span class=\"number\">6500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t10'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">6500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">8500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t9'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">8500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">11000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t8'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">11000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">14000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t7'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">14000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">17500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t6'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">17500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">22000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t5'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">22000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">27000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t6'</span></span><br><span class=\"line\">           <span class=\"keyword\">ELSE</span> <span class=\"string\">'未定义级别'</span></span><br><span class=\"line\">           <span class=\"keyword\">END</span> <span class=\"keyword\">as</span> wages</span><br><span class=\"line\">\t\t,</span><br><span class=\"line\">\t\t<span class=\"keyword\">CASE</span>  </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> sex = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'女'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> sex = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'男'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">ELSE</span> <span class=\"string\">'未知性别'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">END</span> <span class=\"keyword\">as</span> sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t<span class=\"string\">`cdb_member`</span></span><br></pre></td></tr></table></figure>\n<p>结果如下:</p>\n<table>\n<thead>\n<tr>\n<th>department</th>\n<th>name</th>\n<th>wages</th>\n<th>sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人事部</td>\n<td>aimer</td>\n<td>t9</td>\n<td>女</td>\n</tr>\n<tr>\n<td>人事部</td>\n<td>jack</td>\n<td>t10</td>\n<td>男</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>tom</td>\n<td>t6</td>\n<td>女</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>tony</td>\n<td>t8</td>\n<td>女</td>\n</tr>\n<tr>\n<td>人事部</td>\n<td>supercell</td>\n<td>t9</td>\n<td>男</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>lisa</td>\n<td>t5</td>\n<td>男</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"u5728_u7EDF_u8BA1_u7ED3_u679C_u4E2D_u7528case\"><a href=\"#u5728_u7EDF_u8BA1_u7ED3_u679C_u4E2D_u7528case\" class=\"headerlink\" title=\"在统计结果中用case\"></a>在统计结果中用case</h2><p>如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\tdepartment,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> sex = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">as</span> <span class=\"string\">'man'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> sex = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">as</span> <span class=\"string\">'woman'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">5000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">6500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t10'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">6500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">8500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t9'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">8500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">11000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t8'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">11000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">14000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t7'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">14000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">17500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t6'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">17500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">22000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t5'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">22000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">27000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t4'</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t<span class=\"string\">`cdb_member`</span></span><br><span class=\"line\">   <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> </span><br><span class=\"line\">   department</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>department</th>\n<th>man</th>\n<th>woman</th>\n<th>t10</th>\n<th>t9</th>\n<th>t8</th>\n<th>t7</th>\n<th>t6</th>\n<th>t5</th>\n<th>t4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人事部</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>mysql中的case是类似于if的功能，通过这功能我们的统计结果更灵活 </p>\n</blockquote>\n<p>现在我们先建一个公司职员表来试一下：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>department</th>\n<th>name</th>\n<th>wages</th>\n<th>sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>人事部</td>\n<td>aimer</td>\n<td>8500</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>人事部</td>\n<td>jack</td>\n<td>6000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>销售部</td>\n<td>tom</td>\n<td>15000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>销售部</td>\n<td>tony</td>\n<td>9000</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>人事部</td>\n<td>supercell</td>\n<td>8500</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>销售部</td>\n<td>lisa</td>\n<td>18000</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"u5728_u67E5_u8BE2_u7ED3_u679C_u4E2D_u7528case\"><a href=\"#u5728_u67E5_u8BE2_u7ED3_u679C_u4E2D_u7528case\" class=\"headerlink\" title=\"在查询结果中用case\"></a>在查询结果中用case</h2><p>sex字段中，1是女士，2是男士<br>wages字段中，薪酬的级别分布是这样：<br>t10: 5000 &lt; wages &lt;= 6500<br>t9: 6500 &lt; wages &lt;= 8500<br>t8: 8500 &lt; wages &lt;= 11000<br>t7: 11000 &lt; wages &lt;= 14000<br>t6: 14000 &lt; wages &lt;= 17500<br>t5: 17500 &lt; wages &lt;= 22000<br>t4: 22000 &lt; wages &lt;= 27000</p>\n<p>如果我们要在查询结果中清析地表现出来可以这样：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\tdepartment,<span class=\"keyword\">name</span>,</span><br><span class=\"line\">\t\t<span class=\"keyword\">CASE</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">5000</span>&lt;wages <span class=\"keyword\">AND</span> wages&lt;=<span class=\"number\">6500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t10'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">6500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">8500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t9'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">8500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">11000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t8'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">11000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">14000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t7'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">14000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">17500</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t6'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">17500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">22000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t5'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> <span class=\"number\">22000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">27000</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'t6'</span></span><br><span class=\"line\">           <span class=\"keyword\">ELSE</span> <span class=\"string\">'未定义级别'</span></span><br><span class=\"line\">           <span class=\"keyword\">END</span> <span class=\"keyword\">as</span> wages</span><br><span class=\"line\">\t\t,</span><br><span class=\"line\">\t\t<span class=\"keyword\">CASE</span>  </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> sex = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'女'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">WHEN</span> sex = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'男'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">ELSE</span> <span class=\"string\">'未知性别'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">END</span> <span class=\"keyword\">as</span> sex</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t<span class=\"string\">`cdb_member`</span></span><br></pre></td></tr></table></figure>\n<p>结果如下:</p>\n<table>\n<thead>\n<tr>\n<th>department</th>\n<th>name</th>\n<th>wages</th>\n<th>sex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人事部</td>\n<td>aimer</td>\n<td>t9</td>\n<td>女</td>\n</tr>\n<tr>\n<td>人事部</td>\n<td>jack</td>\n<td>t10</td>\n<td>男</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>tom</td>\n<td>t6</td>\n<td>女</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>tony</td>\n<td>t8</td>\n<td>女</td>\n</tr>\n<tr>\n<td>人事部</td>\n<td>supercell</td>\n<td>t9</td>\n<td>男</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>lisa</td>\n<td>t5</td>\n<td>男</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"u5728_u7EDF_u8BA1_u7ED3_u679C_u4E2D_u7528case\"><a href=\"#u5728_u7EDF_u8BA1_u7ED3_u679C_u4E2D_u7528case\" class=\"headerlink\" title=\"在统计结果中用case\"></a>在统计结果中用case</h2><p>如果我们要统计每个部门的男女分布情况，薪酬级别人数可以这么来写：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">\tdepartment,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> sex = <span class=\"number\">1</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">as</span> <span class=\"string\">'man'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> sex = <span class=\"number\">2</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">as</span> <span class=\"string\">'woman'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">5000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">6500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t10'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">6500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">8500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t9'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">8500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">11000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t8'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">11000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">14000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t7'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">14000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">17500</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t6'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">17500</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">22000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t5'</span>,</span><br><span class=\"line\">\t<span class=\"keyword\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"number\">22000</span> &lt; wages <span class=\"keyword\">AND</span> wages &lt;= <span class=\"number\">27000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span> ) <span class=\"keyword\">AS</span> <span class=\"string\">'t4'</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">\t<span class=\"string\">`cdb_member`</span></span><br><span class=\"line\">   <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> </span><br><span class=\"line\">   department</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>department</th>\n<th>man</th>\n<th>woman</th>\n<th>t10</th>\n<th>t9</th>\n<th>t8</th>\n<th>t7</th>\n<th>t6</th>\n<th>t5</th>\n<th>t4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>人事部</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>销售部</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n","sticky":0},{"title":"订阅发布者模式","date":"2016-04-04T09:21:45.000Z","_content":"\n>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。\n\n## 订阅发布者\n\n我们创建一个简单的订阅发布者，基本的4个方法：\n\n* registerSubscriber 注册订阅者\n* removeSubscriber   订阅的取消\n* publish            消息推送\n* sortList           消息推送排序\n\n```\n\nclass DispatcherPattern\n{\n    protected $subList = array();\n\n    public function registerSubscriber($name, $callback)\n    {\n        $this->subList[$name] = $callback;\n    }\n\n    public function removeSubscriber($name){\n        if (isset($this->subList[$name])) {\n            unset($this->subList[$name]);\n        }\n    }\n\n    public function publish($params)\n    {\n        if (empty($this->subList) || !is_array($this->subList)) {\n            return 'null';\n        }\n        foreach ($this->subList as $callback) {\n            call_user_func_array($callback, $params);\n        }\n    }\n\n    public function sortList()\n    {\n        ksort($this->subList);\n    }\n}\n```\n\n## 订阅体\n\n接着我们创建一个用户对象,用户对象有增加积分的功能\n\n```\nclass User\n{\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function addScore($score)\n    {\n        printf( $this->name . ' add Score :' . $score . \"\\r\\n\");\n    }\n}\n```\n\n## 通过订阅发布者模式为用户增加积分\n\n```\n$score = 1;\n\n$dispatcher = new DispatcherPattern();\n\n$dispatcher->registerSubscriber('0', function()\n{\n    printf( \"this is first handle \\r\\n\");\n});\n\n$dispatcher->registerSubscriber('3', array(new User('user3'), 'addScore'));\n$dispatcher->registerSubscriber('1', array(new User('user1'), 'addScore'));\n$dispatcher->registerSubscriber('2', array(new User('user2'), 'addScore'));\n\n$dispatcher->removeSubscriber('2');\n\n$dispatcher->sortList();\n$dispatcher->publish(array($score));\n\n```\n\nresult:\n\n```\nthis is first handle \nuser1 add Score :1 \nuser3 add Score :1 \n```","source":"_posts/patterns/pattern-pub-sub.md","raw":"title: 订阅发布者模式\ndate: 2016-04-04 17:21:45\ncategories: pattern \ntags: [pattern,php]\n\n---\n\n>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。\n\n## 订阅发布者\n\n我们创建一个简单的订阅发布者，基本的4个方法：\n\n* registerSubscriber 注册订阅者\n* removeSubscriber   订阅的取消\n* publish            消息推送\n* sortList           消息推送排序\n\n```\n\nclass DispatcherPattern\n{\n    protected $subList = array();\n\n    public function registerSubscriber($name, $callback)\n    {\n        $this->subList[$name] = $callback;\n    }\n\n    public function removeSubscriber($name){\n        if (isset($this->subList[$name])) {\n            unset($this->subList[$name]);\n        }\n    }\n\n    public function publish($params)\n    {\n        if (empty($this->subList) || !is_array($this->subList)) {\n            return 'null';\n        }\n        foreach ($this->subList as $callback) {\n            call_user_func_array($callback, $params);\n        }\n    }\n\n    public function sortList()\n    {\n        ksort($this->subList);\n    }\n}\n```\n\n## 订阅体\n\n接着我们创建一个用户对象,用户对象有增加积分的功能\n\n```\nclass User\n{\n    protected $name;\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n\n    public function addScore($score)\n    {\n        printf( $this->name . ' add Score :' . $score . \"\\r\\n\");\n    }\n}\n```\n\n## 通过订阅发布者模式为用户增加积分\n\n```\n$score = 1;\n\n$dispatcher = new DispatcherPattern();\n\n$dispatcher->registerSubscriber('0', function()\n{\n    printf( \"this is first handle \\r\\n\");\n});\n\n$dispatcher->registerSubscriber('3', array(new User('user3'), 'addScore'));\n$dispatcher->registerSubscriber('1', array(new User('user1'), 'addScore'));\n$dispatcher->registerSubscriber('2', array(new User('user2'), 'addScore'));\n\n$dispatcher->removeSubscriber('2');\n\n$dispatcher->sortList();\n$dispatcher->publish(array($score));\n\n```\n\nresult:\n\n```\nthis is first handle \nuser1 add Score :1 \nuser3 add Score :1 \n```","slug":"patterns/pattern-pub-sub","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pe002xi9sk5wzc98ku","content":"<blockquote>\n<p>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。</p>\n</blockquote>\n<h2 id=\"u8BA2_u9605_u53D1_u5E03_u8005\"><a href=\"#u8BA2_u9605_u53D1_u5E03_u8005\" class=\"headerlink\" title=\"订阅发布者\"></a>订阅发布者</h2><p>我们创建一个简单的订阅发布者，基本的4个方法：</p>\n<ul>\n<li>registerSubscriber 注册订阅者</li>\n<li>removeSubscriber   订阅的取消</li>\n<li>publish            消息推送</li>\n<li>sortList           消息推送排序</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DispatcherPattern</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $subList = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerSubscriber</span><span class=\"params\">($name, $callback)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subList[$name] = $callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeSubscriber</span><span class=\"params\">($name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;subList[$name])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;subList[$name]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($params)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;subList) || !is_array(<span class=\"keyword\">$this</span>-&gt;subList)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;subList <span class=\"keyword\">as</span> $callback) &#123;</span><br><span class=\"line\">            call_user_func_array($callback, $params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ksort(<span class=\"keyword\">$this</span>-&gt;subList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8BA2_u9605_u4F53\"><a href=\"#u8BA2_u9605_u4F53\" class=\"headerlink\" title=\"订阅体\"></a>订阅体</h2><p>接着我们创建一个用户对象,用户对象有增加积分的功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScore</span><span class=\"params\">($score)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        printf( <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">' add Score :'</span> . $score . <span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u901A_u8FC7_u8BA2_u9605_u53D1_u5E03_u8005_u6A21_u5F0F_u4E3A_u7528_u6237_u589E_u52A0_u79EF_u5206\"><a href=\"#u901A_u8FC7_u8BA2_u9605_u53D1_u5E03_u8005_u6A21_u5F0F_u4E3A_u7528_u6237_u589E_u52A0_u79EF_u5206\" class=\"headerlink\" title=\"通过订阅发布者模式为用户增加积分\"></a>通过订阅发布者模式为用户增加积分</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$score = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher = <span class=\"keyword\">new</span> DispatcherPattern();</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'0'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printf( <span class=\"string\">\"this is first handle \\r\\n\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'3'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user3'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'1'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user1'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'2'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user2'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;removeSubscriber(<span class=\"string\">'2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;sortList();</span><br><span class=\"line\">$dispatcher-&gt;publish(<span class=\"keyword\">array</span>($score));</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> <span class=\"keyword\">is</span> first handle </span><br><span class=\"line\">user1 <span class=\"keyword\">add</span> Score :<span class=\"number\">1</span> </span><br><span class=\"line\">user3 <span class=\"keyword\">add</span> Score :<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>发布/ 订阅者模式（Publish/Subscribe）有两个参与者：发布者和订阅者。发布者创建某个信息，订阅者绑定这个信道，当发布者有消息发布至该信道时，订阅者就会接收到一个通知。最重要的一点是，发布者和订阅者是完全解耦的，彼此并不知晓对方的存在一种消息模式。</p>\n</blockquote>\n<h2 id=\"u8BA2_u9605_u53D1_u5E03_u8005\"><a href=\"#u8BA2_u9605_u53D1_u5E03_u8005\" class=\"headerlink\" title=\"订阅发布者\"></a>订阅发布者</h2><p>我们创建一个简单的订阅发布者，基本的4个方法：</p>\n<ul>\n<li>registerSubscriber 注册订阅者</li>\n<li>removeSubscriber   订阅的取消</li>\n<li>publish            消息推送</li>\n<li>sortList           消息推送排序</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DispatcherPattern</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $subList = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerSubscriber</span><span class=\"params\">($name, $callback)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;subList[$name] = $callback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeSubscriber</span><span class=\"params\">($name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;subList[$name])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;subList[$name]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span><span class=\"params\">($params)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;subList) || !is_array(<span class=\"keyword\">$this</span>-&gt;subList)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">$this</span>-&gt;subList <span class=\"keyword\">as</span> $callback) &#123;</span><br><span class=\"line\">            call_user_func_array($callback, $params);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortList</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        ksort(<span class=\"keyword\">$this</span>-&gt;subList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u8BA2_u9605_u4F53\"><a href=\"#u8BA2_u9605_u4F53\" class=\"headerlink\" title=\"订阅体\"></a>订阅体</h2><p>接着我们创建一个用户对象,用户对象有增加积分的功能</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> $name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addScore</span><span class=\"params\">($score)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        printf( <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">' add Score :'</span> . $score . <span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u901A_u8FC7_u8BA2_u9605_u53D1_u5E03_u8005_u6A21_u5F0F_u4E3A_u7528_u6237_u589E_u52A0_u79EF_u5206\"><a href=\"#u901A_u8FC7_u8BA2_u9605_u53D1_u5E03_u8005_u6A21_u5F0F_u4E3A_u7528_u6237_u589E_u52A0_u79EF_u5206\" class=\"headerlink\" title=\"通过订阅发布者模式为用户增加积分\"></a>通过订阅发布者模式为用户增加积分</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$score = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher = <span class=\"keyword\">new</span> DispatcherPattern();</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'0'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printf( <span class=\"string\">\"this is first handle \\r\\n\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'3'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user3'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'1'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user1'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\">$dispatcher-&gt;registerSubscriber(<span class=\"string\">'2'</span>, <span class=\"keyword\">array</span>(<span class=\"keyword\">new</span> User(<span class=\"string\">'user2'</span>), <span class=\"string\">'addScore'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;removeSubscriber(<span class=\"string\">'2'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$dispatcher-&gt;sortList();</span><br><span class=\"line\">$dispatcher-&gt;publish(<span class=\"keyword\">array</span>($score));</span><br></pre></td></tr></table></figure>\n<p>result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span> <span class=\"keyword\">is</span> first handle </span><br><span class=\"line\">user1 <span class=\"keyword\">add</span> Score :<span class=\"number\">1</span> </span><br><span class=\"line\">user3 <span class=\"keyword\">add</span> Score :<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"mysql修改表结构语句","date":"2015-09-24T15:02:00.000Z","_content":"\n## 首先，创建一个测试表 tableA\n\n```\n\tCREATE TABLE `tableA` (\n\t `createTime` int(10) unsigned NOT NULL default 0 COMMENT 'createTime'\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 增加字段\n\n格式：\n\n```\n\tALTER TABLE tableName ADD newField TYPE; \n```\n  \n增加主键粟子:\n\n```\n\tALTER TABLE tableA ADD id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT  COMMENT 'id' ,ADD PRIMARY KEY(id);\n```\n\n增加元素粟子:\n\n```\n\tALTER TABLE tableA ADD nameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `nameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n\n## 修改字段\n\n格式：\n\n```\n\tALTER TABLE tableName CHANGE oldField newField TYPE; \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除字段\n\n格式：\n\n```\n\tALTER TABLE tableName DROP COLUMN removeField;  \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA DROP COLUMN createTime;\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 创建索引\n\n格式：\n\n```\n\tCREATE INDEX KeyName ON tableName(fieldOneName,fieldTwoName);\n```\n\n粟子：\n\n```\n\tCREATE INDEX `newNameStr` ON `tableA`(newNameStr);\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`),\n\t  KEY `newNameStr` (`newNameStr`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除索引\n\n格式：\n\n```\n\tDROP INDEX KeyName ON tableName;\n```\n\n粟子：\n\n```\n\tDROP INDEX `newNameStr` ON `tableA`;\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```","source":"_posts/mysql/mysql-modifySql.md","raw":"title: mysql修改表结构语句\ndate: 2015-09-24 23:02\ncategories: mysql\ntags: mysql\n\n---\n\n## 首先，创建一个测试表 tableA\n\n```\n\tCREATE TABLE `tableA` (\n\t `createTime` int(10) unsigned NOT NULL default 0 COMMENT 'createTime'\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 增加字段\n\n格式：\n\n```\n\tALTER TABLE tableName ADD newField TYPE; \n```\n  \n增加主键粟子:\n\n```\n\tALTER TABLE tableA ADD id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT  COMMENT 'id' ,ADD PRIMARY KEY(id);\n```\n\n增加元素粟子:\n\n```\n\tALTER TABLE tableA ADD nameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `nameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n\n## 修改字段\n\n格式：\n\n```\n\tALTER TABLE tableName CHANGE oldField newField TYPE; \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) NOT NULL DEFAULT 'default' COMMENT 'name'\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `createTime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'tmp',\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除字段\n\n格式：\n\n```\n\tALTER TABLE tableName DROP COLUMN removeField;  \n```\n\n粟子：\n\n```\n\tALTER TABLE tableA DROP COLUMN createTime;\n```\n\n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 创建索引\n\n格式：\n\n```\n\tCREATE INDEX KeyName ON tableName(fieldOneName,fieldTwoName);\n```\n\n粟子：\n\n```\n\tCREATE INDEX `newNameStr` ON `tableA`(newNameStr);\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`),\n\t  KEY `newNameStr` (`newNameStr`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```\n\n## 删除索引\n\n格式：\n\n```\n\tDROP INDEX KeyName ON tableName;\n```\n\n粟子：\n\n```\n\tDROP INDEX `newNameStr` ON `tableA`;\n```\n   \n执行结果：\n\n```\n\tCREATE TABLE `tableA` (\n\t  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',\n\t  `newNameStr` varchar(255) NOT NULL DEFAULT 'default' COMMENT 'name',\n\t  PRIMARY KEY (`id`)\n\t) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;\n```","slug":"mysql/mysql-modifySql","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pe0031i9sk4yzrdc9k","content":"<h2 id=\"u9996_u5148_uFF0C_u521B_u5EFA_u4E00_u4E2A_u6D4B_u8BD5_u8868_tableA\"><a href=\"#u9996_u5148_uFF0C_u521B_u5EFA_u4E00_u4E2A_u6D4B_u8BD5_u8868_tableA\" class=\"headerlink\" title=\"首先，创建一个测试表 tableA\"></a>首先，创建一个测试表 tableA</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\"> `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> default </span>0 COMMENT <span class=\"string\">'createTime'</span></span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u589E_u52A0_u5B57_u6BB5\"><a href=\"#u589E_u52A0_u5B57_u6BB5\" class=\"headerlink\" title=\"增加字段\"></a>增加字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">ADD</span> newField <span class=\"keyword\">TYPE</span>;</span><br></pre></td></tr></table></figure>\n<p>增加主键粟子:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableA <span class=\"keyword\">ADD</span> <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">UNSIGNED</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span> ,<span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>);</span><br></pre></td></tr></table></figure>\n<p>增加元素粟子:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tableA <span class=\"builtin-name\">ADD</span> nameStr VARCHAR(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span></span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'0'</span> COMMENT <span class=\"string\">'tmp'</span>,</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `nameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539_u5B57_u6BB5\"><a href=\"#u4FEE_u6539_u5B57_u6BB5\" class=\"headerlink\" title=\"修改字段\"></a>修改字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">CHANGE</span> oldField newField <span class=\"keyword\">TYPE</span>;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'0'</span> COMMENT <span class=\"string\">'tmp'</span>,</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664_u5B57_u6BB5\"><a href=\"#u5220_u9664_u5B57_u6BB5\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> removeField;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableA <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> createTime;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521B_u5EFA_u7D22_u5F15\"><a href=\"#u521B_u5EFA_u7D22_u5F15\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>格式：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> KeyName <span class=\"keyword\">ON</span> tableName(fieldOneName,fieldTwoName);</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> <span class=\"symbol\">`newNameStr`</span> <span class=\"keyword\">ON</span> <span class=\"symbol\">`tableA`</span>(newNameStr);</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `newNameStr` (`newNameStr`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664_u7D22_u5F15\"><a href=\"#u5220_u9664_u7D22_u5F15\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h2><p>格式：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> KeyName <span class=\"keyword\">ON</span> tableName;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> <span class=\"symbol\">`newNameStr`</span> <span class=\"keyword\">ON</span> <span class=\"symbol\">`tableA`</span>;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u9996_u5148_uFF0C_u521B_u5EFA_u4E00_u4E2A_u6D4B_u8BD5_u8868_tableA\"><a href=\"#u9996_u5148_uFF0C_u521B_u5EFA_u4E00_u4E2A_u6D4B_u8BD5_u8868_tableA\" class=\"headerlink\" title=\"首先，创建一个测试表 tableA\"></a>首先，创建一个测试表 tableA</h2><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\"> `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> default </span>0 COMMENT <span class=\"string\">'createTime'</span></span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u589E_u52A0_u5B57_u6BB5\"><a href=\"#u589E_u52A0_u5B57_u6BB5\" class=\"headerlink\" title=\"增加字段\"></a>增加字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">ADD</span> newField <span class=\"keyword\">TYPE</span>;</span><br></pre></td></tr></table></figure>\n<p>增加主键粟子:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableA <span class=\"keyword\">ADD</span> <span class=\"keyword\">id</span> <span class=\"built_in\">INT</span>(<span class=\"number\">10</span>) <span class=\"keyword\">UNSIGNED</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'id'</span> ,<span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span>(<span class=\"keyword\">id</span>);</span><br></pre></td></tr></table></figure>\n<p>增加元素粟子:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tableA <span class=\"builtin-name\">ADD</span> nameStr VARCHAR(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span></span><br></pre></td></tr></table></figure>\n<p>执行结果</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'0'</span> COMMENT <span class=\"string\">'tmp'</span>,</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `nameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539_u5B57_u6BB5\"><a href=\"#u4FEE_u6539_u5B57_u6BB5\" class=\"headerlink\" title=\"修改字段\"></a>修改字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">CHANGE</span> oldField newField <span class=\"keyword\">TYPE</span>;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE tableA CHANGE nameStr newNameStr VARCHAR(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `createTime` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'0'</span> COMMENT <span class=\"string\">'tmp'</span>,</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664_u5B57_u6BB5\"><a href=\"#u5220_u9664_u5B57_u6BB5\" class=\"headerlink\" title=\"删除字段\"></a>删除字段</h2><p>格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableName <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> removeField;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> tableA <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> createTime;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u521B_u5EFA_u7D22_u5F15\"><a href=\"#u521B_u5EFA_u7D22_u5F15\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>格式：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> KeyName <span class=\"keyword\">ON</span> tableName(fieldOneName,fieldTwoName);</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> <span class=\"symbol\">`newNameStr`</span> <span class=\"keyword\">ON</span> <span class=\"symbol\">`tableA`</span>(newNameStr);</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  KEY `newNameStr` (`newNameStr`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5220_u9664_u7D22_u5F15\"><a href=\"#u5220_u9664_u7D22_u5F15\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h2><p>格式：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> KeyName <span class=\"keyword\">ON</span> tableName;</span><br></pre></td></tr></table></figure>\n<p>粟子：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> <span class=\"symbol\">`newNameStr`</span> <span class=\"keyword\">ON</span> <span class=\"symbol\">`tableA`</span>;</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `tableA` (</span><br><span class=\"line\">  `id` int(10) unsigned <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">'id'</span>,</span><br><span class=\"line\">  `newNameStr` varchar(255) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span><span class=\"built_in\"> DEFAULT </span><span class=\"string\">'default'</span> COMMENT <span class=\"string\">'name'</span>,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=MyISAM <span class=\"attribute\">AUTO_INCREMENT</span>=4<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"mysql[ON DUPLICE KEY UPDATE]","date":"2016-06-10T09:37:51.000Z","_content":"\n## ON DUPLICE KEY UPDATE\n\n[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.\n\n## 测试表\n\n表结构：\n\n```\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(70) COLLATE utf8_unicode_ci DEFAULT NULL,\n  `body` longtext COLLATE utf8_unicode_ci,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n其中`id`为PRIMARY KEY\n表数据：\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+--------+-------+\n\t| id | title  | body  |\n\t+----+--------+-------+\n\t|  1 | title1 | NULL  |\n\t|  2 | title2 | body2 |\n\t| 12 | title1 | body3 |\n\t| 13 | title1 | body4 |\n\t| 14 | NULL   | body5 |\n\t+----+--------+-------+\n```\n\n## 插入一条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 2 rows affected (0.00 sec)\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+-----------+----------+\n\t| id | title     | body     |\n\t+----+-----------+----------+\n\t|  1 | titleTest | bodyTest |\n\t|  2 | title2    | body2    |\n\t| 12 | title1    | body3    |\n\t| 13 | title1    | body4    |\n\t| 14 | NULL      | body5    |\n\t+----+-----------+----------+\n```\n\n## 插入多条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest'),('2','titleTest2','bodyTest2'),('3','titleTest3','bodyTest3') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 1  Warnings: 0\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;                                                                                                                                                           +----+------------+-----------+\n\t| id | title      | body      |\n\t+----+------------+-----------+\n\t|  1 | titleTest  | bodyTest  |\n\t|  2 | titleTest2 | bodyTest2 |\n\t|  3 | titleTest3 | bodyTest3 |\n\t| 12 | title1     | body3     |\n\t| 13 | title1     | body4     |\n\t| 14 | NULL       | body5     |\n\t+----+------------+-----------+\n\t6 rows in set (0.00 sec)\n```\n\n因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据","source":"_posts/mysql/mysql-on-duplice-key-update.md","raw":"title: mysql[ON DUPLICE KEY UPDATE]  \ndate: 2016-06-10 17:37:51  \ncategories: mysql\ntags: mysql\n\n---\n\n## ON DUPLICE KEY UPDATE\n\n[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.\n\n## 测试表\n\n表结构：\n\n```\nCREATE TABLE `news` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `title` varchar(70) COLLATE utf8_unicode_ci DEFAULT NULL,\n  `body` longtext COLLATE utf8_unicode_ci,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```\n\n其中`id`为PRIMARY KEY\n表数据：\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+--------+-------+\n\t| id | title  | body  |\n\t+----+--------+-------+\n\t|  1 | title1 | NULL  |\n\t|  2 | title2 | body2 |\n\t| 12 | title1 | body3 |\n\t| 13 | title1 | body4 |\n\t| 14 | NULL   | body5 |\n\t+----+--------+-------+\n```\n\n## 插入一条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 2 rows affected (0.00 sec)\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;\n\t+----+-----------+----------+\n\t| id | title     | body     |\n\t+----+-----------+----------+\n\t|  1 | titleTest | bodyTest |\n\t|  2 | title2    | body2    |\n\t| 12 | title1    | body3    |\n\t| 13 | title1    | body4    |\n\t| 14 | NULL      | body5    |\n\t+----+-----------+----------+\n```\n\n## 插入多条重复数据\n\n```\nmysql> INSERT INTO `news` (`id`,`title`,`body`) VALUES ('1','titleTest','bodyTest'),('2','titleTest2','bodyTest2'),('3','titleTest3','bodyTest3') ON DUPLICATE KEY UPDATE `title`= VALUES(`title`),`body`=VALUES(`body`);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3  Duplicates: 1  Warnings: 0\n```\n\nshow data:\n\n```\n\tmysql> SELECT * FROM news;                                                                                                                                                           +----+------------+-----------+\n\t| id | title      | body      |\n\t+----+------------+-----------+\n\t|  1 | titleTest  | bodyTest  |\n\t|  2 | titleTest2 | bodyTest2 |\n\t|  3 | titleTest3 | bodyTest3 |\n\t| 12 | title1     | body3     |\n\t| 13 | title1     | body4     |\n\t| 14 | NULL       | body5     |\n\t+----+------------+-----------+\n\t6 rows in set (0.00 sec)\n```\n\n因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据","slug":"mysql/mysql-on-duplice-key-update","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pf0033i9skdrkd3yjt","content":"<h2 id=\"ON_DUPLICE_KEY_UPDATE\"><a href=\"#ON_DUPLICE_KEY_UPDATE\" class=\"headerlink\" title=\"ON DUPLICE KEY UPDATE\"></a>ON DUPLICE KEY UPDATE</h2><p>[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.</p>\n<h2 id=\"u6D4B_u8BD5_u8868\"><a href=\"#u6D4B_u8BD5_u8868\" class=\"headerlink\" title=\"测试表\"></a>测试表</h2><p>表结构：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `news` (</span><br><span class=\"line\">  `id` int(11) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `title` varchar(70) COLLATE utf8_unicode_ci<span class=\"built_in\"> DEFAULT </span><span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  `body` longtext COLLATE utf8_unicode_ci,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=InnoDB<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8 <span class=\"attribute\">COLLATE</span>=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n<p>其中<code>id</code>为PRIMARY KEY<br>表数据：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM news;</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">| id | title  | body  |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">|  1 | title1 | NULL  |</span><br><span class=\"line\">|  2 | title2 | body2 |</span><br><span class=\"line\">| 12 | title1 | body3 |</span><br><span class=\"line\">| 13 | title1 | body4 |</span><br><span class=\"line\">| 14 | NULL   | body5 |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E\"><a href=\"#u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E\" class=\"headerlink\" title=\"插入一条重复数据\"></a>插入一条重复数据</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`news`</span> (<span class=\"symbol\">`id`</span>,<span class=\"symbol\">`title`</span>,<span class=\"symbol\">`body`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'1'</span>,<span class=\"string\">'titleTest'</span>,<span class=\"string\">'bodyTest'</span>) <span class=\"keyword\">ON</span> DUPLICATE <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`title`</span>= <span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`title`</span>),<span class=\"symbol\">`body`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`body`</span>);</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>show data:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM news;</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br><span class=\"line\">| id | title     | body     |</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br><span class=\"line\">|  1 | titleTest | bodyTest |</span><br><span class=\"line\">|  2 | title2    | body2    |</span><br><span class=\"line\">| 12 | title1    | body3    |</span><br><span class=\"line\">| 13 | title1    | body4    |</span><br><span class=\"line\">| 14 | NULL      | body5    |</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E\"><a href=\"#u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E\" class=\"headerlink\" title=\"插入多条重复数据\"></a>插入多条重复数据</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`news`</span> (<span class=\"symbol\">`id`</span>,<span class=\"symbol\">`title`</span>,<span class=\"symbol\">`body`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'1'</span>,<span class=\"string\">'titleTest'</span>,<span class=\"string\">'bodyTest'</span>),(<span class=\"string\">'2'</span>,<span class=\"string\">'titleTest2'</span>,<span class=\"string\">'bodyTest2'</span>),(<span class=\"string\">'3'</span>,<span class=\"string\">'titleTest3'</span>,<span class=\"string\">'bodyTest3'</span>) <span class=\"keyword\">ON</span> DUPLICATE <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`title`</span>= <span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`title`</span>),<span class=\"symbol\">`body`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`body`</span>);</span><br><span class=\"line\">Query OK, 3 rows affected (0.00 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 1  Warnings: 0</span><br></pre></td></tr></table></figure>\n<p>show data:</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT <span class=\"symbol\">*</span> FROM news;                                                                                                                                                           +----+------------+-----------+</span><br><span class=\"line\">|<span class=\"string\"> id </span>|<span class=\"string\"> title      </span>|<span class=\"string\"> body      </span>|</span><br><span class=\"line\">+----+------------+-----------+</span><br><span class=\"line\">|<span class=\"string\">  1 </span>|<span class=\"string\"> titleTest  </span>|<span class=\"string\"> bodyTest  </span>|</span><br><span class=\"line\">|<span class=\"string\">  2 </span>|<span class=\"string\"> titleTest2 </span>|<span class=\"string\"> bodyTest2 </span>|</span><br><span class=\"line\">|<span class=\"string\">  3 </span>|<span class=\"string\"> titleTest3 </span>|<span class=\"string\"> bodyTest3 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 12 </span>|<span class=\"string\"> title1     </span>|<span class=\"string\"> body3     </span>|</span><br><span class=\"line\">|<span class=\"string\"> 13 </span>|<span class=\"string\"> title1     </span>|<span class=\"string\"> body4     </span>|</span><br><span class=\"line\">|<span class=\"string\"> 14 </span>|<span class=\"string\"> NULL       </span>|<span class=\"string\"> body5     </span>|</span><br><span class=\"line\">+----+------------+-----------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ON_DUPLICE_KEY_UPDATE\"><a href=\"#ON_DUPLICE_KEY_UPDATE\" class=\"headerlink\" title=\"ON DUPLICE KEY UPDATE\"></a>ON DUPLICE KEY UPDATE</h2><p>[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.</p>\n<h2 id=\"u6D4B_u8BD5_u8868\"><a href=\"#u6D4B_u8BD5_u8868\" class=\"headerlink\" title=\"测试表\"></a>测试表</h2><p>表结构：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `news` (</span><br><span class=\"line\">  `id` int(11) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `title` varchar(70) COLLATE utf8_unicode_ci<span class=\"built_in\"> DEFAULT </span><span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  `body` longtext COLLATE utf8_unicode_ci,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) <span class=\"attribute\">ENGINE</span>=InnoDB<span class=\"built_in\"> DEFAULT </span><span class=\"attribute\">CHARSET</span>=utf8 <span class=\"attribute\">COLLATE</span>=utf8_unicode_ci;</span><br></pre></td></tr></table></figure>\n<p>其中<code>id</code>为PRIMARY KEY<br>表数据：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM news;</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">| id | title  | body  |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">|  1 | title1 | NULL  |</span><br><span class=\"line\">|  2 | title2 | body2 |</span><br><span class=\"line\">| 12 | title1 | body3 |</span><br><span class=\"line\">| 13 | title1 | body4 |</span><br><span class=\"line\">| 14 | NULL   | body5 |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E\"><a href=\"#u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E\" class=\"headerlink\" title=\"插入一条重复数据\"></a>插入一条重复数据</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`news`</span> (<span class=\"symbol\">`id`</span>,<span class=\"symbol\">`title`</span>,<span class=\"symbol\">`body`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'1'</span>,<span class=\"string\">'titleTest'</span>,<span class=\"string\">'bodyTest'</span>) <span class=\"keyword\">ON</span> DUPLICATE <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`title`</span>= <span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`title`</span>),<span class=\"symbol\">`body`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`body`</span>);</span><br><span class=\"line\">Query OK, 2 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>show data:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM news;</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br><span class=\"line\">| id | title     | body     |</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br><span class=\"line\">|  1 | titleTest | bodyTest |</span><br><span class=\"line\">|  2 | title2    | body2    |</span><br><span class=\"line\">| 12 | title1    | body3    |</span><br><span class=\"line\">| 13 | title1    | body4    |</span><br><span class=\"line\">| 14 | NULL      | body5    |</span><br><span class=\"line\"><span class=\"code\">+----+</span>-----------<span class=\"code\">+----------+</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E\"><a href=\"#u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E\" class=\"headerlink\" title=\"插入多条重复数据\"></a>插入多条重复数据</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`news`</span> (<span class=\"symbol\">`id`</span>,<span class=\"symbol\">`title`</span>,<span class=\"symbol\">`body`</span>) <span class=\"keyword\">VALUES</span> (<span class=\"string\">'1'</span>,<span class=\"string\">'titleTest'</span>,<span class=\"string\">'bodyTest'</span>),(<span class=\"string\">'2'</span>,<span class=\"string\">'titleTest2'</span>,<span class=\"string\">'bodyTest2'</span>),(<span class=\"string\">'3'</span>,<span class=\"string\">'titleTest3'</span>,<span class=\"string\">'bodyTest3'</span>) <span class=\"keyword\">ON</span> DUPLICATE <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`title`</span>= <span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`title`</span>),<span class=\"symbol\">`body`</span>=<span class=\"keyword\">VALUES</span>(<span class=\"symbol\">`body`</span>);</span><br><span class=\"line\">Query OK, 3 rows affected (0.00 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 1  Warnings: 0</span><br></pre></td></tr></table></figure>\n<p>show data:</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT <span class=\"symbol\">*</span> FROM news;                                                                                                                                                           +----+------------+-----------+</span><br><span class=\"line\">|<span class=\"string\"> id </span>|<span class=\"string\"> title      </span>|<span class=\"string\"> body      </span>|</span><br><span class=\"line\">+----+------------+-----------+</span><br><span class=\"line\">|<span class=\"string\">  1 </span>|<span class=\"string\"> titleTest  </span>|<span class=\"string\"> bodyTest  </span>|</span><br><span class=\"line\">|<span class=\"string\">  2 </span>|<span class=\"string\"> titleTest2 </span>|<span class=\"string\"> bodyTest2 </span>|</span><br><span class=\"line\">|<span class=\"string\">  3 </span>|<span class=\"string\"> titleTest3 </span>|<span class=\"string\"> bodyTest3 </span>|</span><br><span class=\"line\">|<span class=\"string\"> 12 </span>|<span class=\"string\"> title1     </span>|<span class=\"string\"> body3     </span>|</span><br><span class=\"line\">|<span class=\"string\"> 13 </span>|<span class=\"string\"> title1     </span>|<span class=\"string\"> body4     </span>|</span><br><span class=\"line\">|<span class=\"string\"> 14 </span>|<span class=\"string\"> NULL       </span>|<span class=\"string\"> body5     </span>|</span><br><span class=\"line\">+----+------------+-----------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据</p>\n","sticky":0},{"title":"多条insert语句合并","date":"2014-09-14T14:37:00.000Z","_content":"\n表a君Article内容如下：\n\n|key|value|\n|---|---|\n|id | int|\n|name|string|\n|title|strit|\n\n\n现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：\n\n```\nINSERT INTO `Article`(`name`,`title`)VALUES ('name1','title1');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name2','title2');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name3','title3');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name4','title4');\n...\n```\n\n之后发现了sql的insert语句可以含多个参数:\n\n```\nINSERT INTO `Article`(`name`,`title`)\nVALUES ('name1','title1'),\nVALUES ('name2','title2'),\nVALUES ('name3','title3'),\nVALUES ('name4','title4'),\n...;\n```\n\n这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。\n\n所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。\n\n","source":"_posts/mysql/mysql-insertMoreThanOne.md","raw":"title: 多条insert语句合并  \ndate: 2014-09-14 22:37  \ncategories: mysql  \ntags: mysql  \n\n---\n\n表a君Article内容如下：\n\n|key|value|\n|---|---|\n|id | int|\n|name|string|\n|title|strit|\n\n\n现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：\n\n```\nINSERT INTO `Article`(`name`,`title`)VALUES ('name1','title1');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name2','title2');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name3','title3');\nINSERT INTO `Article`(`name`,`title`)VALUES ('name4','title4');\n...\n```\n\n之后发现了sql的insert语句可以含多个参数:\n\n```\nINSERT INTO `Article`(`name`,`title`)\nVALUES ('name1','title1'),\nVALUES ('name2','title2'),\nVALUES ('name3','title3'),\nVALUES ('name4','title4'),\n...;\n```\n\n这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。\n\n所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。\n\n","slug":"mysql/mysql-insertMoreThanOne","published":1,"updated":"2021-08-09T06:15:05.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pf0036i9skz6bhjqp3","content":"<p>表a君Article内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>title</td>\n<td>strit</td>\n</tr>\n</tbody>\n</table>\n<p>现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name1'</span>,<span class=\"string\">'title1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name2'</span>,<span class=\"string\">'title2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name3'</span>,<span class=\"string\">'title3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name4'</span>,<span class=\"string\">'title4'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>之后发现了sql的insert语句可以含多个参数:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`Article`</span>(<span class=\"string\">`name`</span>,<span class=\"string\">`title`</span>)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name1'</span>,<span class=\"string\">'title1'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name2'</span>,<span class=\"string\">'title2'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name3'</span>,<span class=\"string\">'title3'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name4'</span>,<span class=\"string\">'title4'</span>),</span><br><span class=\"line\">...;</span><br></pre></td></tr></table></figure>\n<p>这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。</p>\n<p>所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>表a君Article内容如下：</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n</tr>\n<tr>\n<td>title</td>\n<td>strit</td>\n</tr>\n</tbody>\n</table>\n<p>现在，我们有一批数据需要插入表A,那么来了，按照我们普通的方式，排队1条1条来：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name1'</span>,<span class=\"string\">'title1'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name2'</span>,<span class=\"string\">'title2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name3'</span>,<span class=\"string\">'title3'</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"symbol\">`Article`</span>(<span class=\"symbol\">`name`</span>,<span class=\"symbol\">`title`</span>)<span class=\"keyword\">VALUES</span> (<span class=\"string\">'name4'</span>,<span class=\"string\">'title4'</span>);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>之后发现了sql的insert语句可以含多个参数:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"string\">`Article`</span>(<span class=\"string\">`name`</span>,<span class=\"string\">`title`</span>)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name1'</span>,<span class=\"string\">'title1'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name2'</span>,<span class=\"string\">'title2'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name3'</span>,<span class=\"string\">'title3'</span>),</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">'name4'</span>,<span class=\"string\">'title4'</span>),</span><br><span class=\"line\">...;</span><br></pre></td></tr></table></figure>\n<p>这样一变，我们的多条语句变成了一个，好处是调用mysql的api次数减少了，开销降低，提高了性能和速度。</p>\n<p>所以，在多条语句插入同个表时，我们尽量地用一条语句插入，提高性能，速度。</p>\n","sticky":0},{"title":"mysql的时间转换函数","date":"2015-07-05T13:42:00.000Z","_content":"\n## 格式化时间戳FROM_UNIXTIME\n\n`FROM_UNIXTIME(unix_timestamp, format)`第一个参数是时间戳格式。 第二个是最终想转换的格式，如\n\n```\n\tSELECT FROM_UNIXTIME(1436102304,'%Y年%m月%d日') as date;\n```\n\n结果:\n                \n```\n\tdate     :       2015年07月05日\n```\n\n\n## 字符串转换unix时间戳UNIX_TIMESTAMP\n\n`UNIX_TIMESTAMP(date)` 是将时间转化为时间戳，如 \n\n```\n\tSELECT UNIX_TIMESTAMP('2015-07-05');  \n```\n\n结果是：\n\n```\n\t1436068800\n```\n\n示例：找出2015-05到2015-07 log表中的记录:\n\n```\n       SELECT id, FROM_UNIXTIME(time,'%Y-%m-%d') as date \n       FROM log \n       WHERE  time BETWEEN UNIX_TIMESTAMP('2015-05-01') AND UNIX_TIMESTAMP('2015-07-01');\n```       ","source":"_posts/mysql/mysql-timeMethod.md","raw":"title: mysql的时间转换函数\ndate: 2015-07-05 21:42\ncategories: mysql\ntags: mysql\n\n---\n\n## 格式化时间戳FROM_UNIXTIME\n\n`FROM_UNIXTIME(unix_timestamp, format)`第一个参数是时间戳格式。 第二个是最终想转换的格式，如\n\n```\n\tSELECT FROM_UNIXTIME(1436102304,'%Y年%m月%d日') as date;\n```\n\n结果:\n                \n```\n\tdate     :       2015年07月05日\n```\n\n\n## 字符串转换unix时间戳UNIX_TIMESTAMP\n\n`UNIX_TIMESTAMP(date)` 是将时间转化为时间戳，如 \n\n```\n\tSELECT UNIX_TIMESTAMP('2015-07-05');  \n```\n\n结果是：\n\n```\n\t1436068800\n```\n\n示例：找出2015-05到2015-07 log表中的记录:\n\n```\n       SELECT id, FROM_UNIXTIME(time,'%Y-%m-%d') as date \n       FROM log \n       WHERE  time BETWEEN UNIX_TIMESTAMP('2015-05-01') AND UNIX_TIMESTAMP('2015-07-01');\n```       ","slug":"mysql/mysql-timeMethod","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pg0039i9ski24t50ek","content":"<h2 id=\"u683C_u5F0F_u5316_u65F6_u95F4_u6233FROM_UNIXTIME\"><a href=\"#u683C_u5F0F_u5316_u65F6_u95F4_u6233FROM_UNIXTIME\" class=\"headerlink\" title=\"格式化时间戳FROM_UNIXTIME\"></a>格式化时间戳FROM_UNIXTIME</h2><p><code>FROM_UNIXTIME(unix_timestamp, format)</code>第一个参数是时间戳格式。 第二个是最终想转换的格式，如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1436102304</span>,<span class=\"string\">'%Y年%m月%d日'</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">date</span>;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">date     :</span>       <span class=\"number\">2015</span><span class=\"string\">年07月05日</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B57_u7B26_u4E32_u8F6C_u6362unix_u65F6_u95F4_u6233UNIX_TIMESTAMP\"><a href=\"#u5B57_u7B26_u4E32_u8F6C_u6362unix_u65F6_u95F4_u6233UNIX_TIMESTAMP\" class=\"headerlink\" title=\"字符串转换unix时间戳UNIX_TIMESTAMP\"></a>字符串转换unix时间戳UNIX_TIMESTAMP</h2><p><code>UNIX_TIMESTAMP(date)</code> 是将时间转化为时间戳，如 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UNIX_TIMESTAMP</span>(<span class=\"string\">'2015-07-05'</span>);</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1436068800</span></span><br></pre></td></tr></table></figure>\n<p>示例：找出2015-05到2015-07 log表中的记录:</p>\n<pre><code>SELECT id, FROM_UNIXTIME(time,&apos;%Y-%m-%d&apos;) as date \nFROM log \nWHERE  time BETWEEN UNIX_TIMESTAMP(&apos;2015-05-01&apos;) AND UNIX_TIMESTAMP(&apos;2015-07-01&apos;);\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u683C_u5F0F_u5316_u65F6_u95F4_u6233FROM_UNIXTIME\"><a href=\"#u683C_u5F0F_u5316_u65F6_u95F4_u6233FROM_UNIXTIME\" class=\"headerlink\" title=\"格式化时间戳FROM_UNIXTIME\"></a>格式化时间戳FROM_UNIXTIME</h2><p><code>FROM_UNIXTIME(unix_timestamp, format)</code>第一个参数是时间戳格式。 第二个是最终想转换的格式，如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> FROM_UNIXTIME(<span class=\"number\">1436102304</span>,<span class=\"string\">'%Y年%m月%d日'</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">date</span>;</span><br></pre></td></tr></table></figure>\n<p>结果:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">date     :</span>       <span class=\"number\">2015</span><span class=\"string\">年07月05日</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B57_u7B26_u4E32_u8F6C_u6362unix_u65F6_u95F4_u6233UNIX_TIMESTAMP\"><a href=\"#u5B57_u7B26_u4E32_u8F6C_u6362unix_u65F6_u95F4_u6233UNIX_TIMESTAMP\" class=\"headerlink\" title=\"字符串转换unix时间戳UNIX_TIMESTAMP\"></a>字符串转换unix时间戳UNIX_TIMESTAMP</h2><p><code>UNIX_TIMESTAMP(date)</code> 是将时间转化为时间戳，如 </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">UNIX_TIMESTAMP</span>(<span class=\"string\">'2015-07-05'</span>);</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1436068800</span></span><br></pre></td></tr></table></figure>\n<p>示例：找出2015-05到2015-07 log表中的记录:</p>\n<pre><code>SELECT id, FROM_UNIXTIME(time,&apos;%Y-%m-%d&apos;) as date \nFROM log \nWHERE  time BETWEEN UNIX_TIMESTAMP(&apos;2015-05-01&apos;) AND UNIX_TIMESTAMP(&apos;2015-07-01&apos;);\n</code></pre>","sticky":0},{"title":"正则表达式","date":"2014-11-09T14:57:00.000Z","_content":"\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","source":"_posts/regEx/regex.md","raw":"title: 正则表达式\ndate: 2014-11-09 22:57\ntags: regEx\ncategories: regEx\n\n---\n\n>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。\n\n要在文本\"phone number is 131-1111-1111\"  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: `#1[385]\\d-[\\d]{4}-[\\d]{4}#`    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   \n\n \n\n## 字符集\n\n### []\n\n`[]`字符集：中括号中的是想匹配的字符的集合.\n\n如：`[abc]`的作用相当于匹配a字符或b字符或c字符，与`a|b|c`作用相同，顺便一说，`|`的意义是或。\n\n* `[]`的后面也可以加上`{time}`，来表示对这字符集匹配time次。  \n\n* `[]`中若字符的类型相同，顺序连贯，也可以用'-'符号将首尾连起来。如`[a-z][a-h][A-Z][0-9]`代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。\n\n### [^]\n\n`[^]` 取反字符集：匹配所有不在括号中出现的字符。\n\n如`[^a]`匹配所有非a字符。用法可以参考字符集`[]`的用法，只是效果是取反的。\n\n### `^`    \n\n`^`代表从文本的开始处匹配    如：`^abc`    匹配以abc为开始的文本\n\n### `$`\n\n`$`代表从文本的结束处匹配如：`abc$`匹配以abc为结束的文本\n\n\n\n## 简化字符集\n\n字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。\n\n* `\\d` : 数字字符集，匹配数字 = `[0-9]`\n* `\\s` : 任意的空白符 = `[ ]`\n* `\\w` : 数字或子母或下划线 = `[0-9a-zA-Z_]`\n* `.`  : 除换行符以外的任意字符 = `[^\\n\\r]`\n* `\\b` : 匹配单词的开始或结束,`\\babc\\b` 匹配文本'this is  abc'中的单词abc\n* `\\D` : 任意非数字字符 = `[^0-9]`\n* `\\S` : 任意非空白字符 = `[^ ]`\n* `\\W` : 任意不是字母数字或下划线的字符\n* `\\B` : 任意不是单词的开头或结尾\n\n\n\n## 匹配次数\n\n* `+`    一次或多次。     如 `a+` 可以匹配a, aa, aaa, aaaa....\n\n* `*`    0次或多次。 \n\n* `?`    0次或一次。\n\n* `{n}`   n次\n\n* `{n,}`  n次或n次以上\n\n* `{n,m}` n到m次\n\n\n\n## 懒惰限制符\n\n* `*?`    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于'/a+?/' 匹配'aaaa'时会匹配出a\n\n* `+?`    重复一至多次，尽量少次。   相当于+的最少匹配次数\n\n* `??`    重复0次到1次，尽量少次。\n\n* `{n,}?`  重复n次或n次以上，尽量少次。\n\n* `{n,m}?` 重复n到m次，尽量少次。\n\n    \n\n## 组与向后引用\n\n正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：\n\n### 普通捕获：\n\n```\n\t(exp)\\1\n```\n\nexp表示的是表达式，\\1代表的是在xp式子匹配到的文本。\n\nexample：\n\n```\n\t([\\w]{3}).*\\1\n```\n表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： 'abcdefabc','d_1d_1'，组1存的是'abc','d_1',而后面组1又出现了，所以整个文本匹配成功。\n\n### 命名捕获\n\n```\n\t(?<name>exp)\\k<name>\n```\n\n也可以写成(?'name'exp)\\k'name'   与上1类似，将捕获的文本保存在组name中。name可以自己命名。\n\n而组的作用是什么呢？php中的正则匹配`preg_match_all`方法示例:\n\n```\n\techo '<pre>';\n\t//文本\n\t$str = 'yes, that is ok!';                            \n\t//正则表达式   如果匹配到ok,则分配到anser组中\n\t$regEx = '#(?<anser>ok).*\\k<anser>#';\n\t$count = preg_match_all($regEx, $str, $match);       \n\t//匹配成功次数\n\tvar_dump($count);//1                 \n\t//匹配结果集: array('0'=>'ok!','anser'=>'ok','1'=>'ok')\n\tvar_dump($match);                       \n\t//匹配结果集中的anser组\n\tvar_dump($match['anser']);  //'ok'\n```\n       \n从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.\n\n组的作用还可以引用在替换式中，用php中的正则替换`preg_replace`示例：\n\n```\n\t$regEx = '#.*([\\w]{3,}\\.[\\w]+\\.[\\w]{2,3})#';\n\t$str = 'link = www.example.com';\n\t//将$str的内容替换成\"<a href='\\\\1'>\",\\\\1则代表正则中的分组1\n\t$urlTag = preg_replace($regEx, \"<a href='\\\\1'>\", $str);  \n\tvar_dump($urlTag);\n\t//结果 ：string '<a href='www.example.com'>' (length=26)\n```\n在这里注意的是双引号\"\"中的引用需要多加一个\\则组1变成\\\\1，而单引号''号中则还是\\1。\n\n### 不分组不引用式括号\n\n* `(?:exp)`   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。\n\n### 零宽断言\n\n* `(?=exp)`     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。\n\n* `(?<=exp)`    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。\n\n### 负向零宽断言\n\n* `(?!exp)`     匹配不是以exp结尾的内容。\n\n* `(?<!exp)`    匹配不是以exp开始的内容。\n\n### 注释\n\n* `(?#comment)` 括号中的comment对表达式并无影响，只是注释作用。\n\n\n\n## 处理选项\n\n* `i`    匹配时不区分字母大小写。 如'/text/i'    能匹配到TeXt\n\n* `m`    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。  \n如  ： 用 `#\\w$#m`匹配文本 \"abc\\nabc\\n\"的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c \n\n* `s`    单行模式.  更改'.'的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）\n\n\n\n## 注意\n\n* 正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。\n\n* 正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\\\1，而单引号则是\\1。\n\n* 字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。\n\n* 匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w","slug":"regEx/regex","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pg003ci9sk55texb47","content":"<blockquote>\n<p>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。</p>\n</blockquote>\n<p>要在文本”phone number is 131-1111-1111”  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: <code>#1[385]\\d-[\\d]{4}-[\\d]{4}#</code>    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   </p>\n<h2 id=\"u5B57_u7B26_u96C6\"><a href=\"#u5B57_u7B26_u96C6\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"5B_5D\"><a href=\"#5B_5D\" class=\"headerlink\" title=\"[]\"></a>[]</h3><p><code>[]</code>字符集：中括号中的是想匹配的字符的集合.</p>\n<p>如：<code>[abc]</code>的作用相当于匹配a字符或b字符或c字符，与<code>a|b|c</code>作用相同，顺便一说，<code>|</code>的意义是或。</p>\n<ul>\n<li><p><code>[]</code>的后面也可以加上<code>{time}</code>，来表示对这字符集匹配time次。  </p>\n</li>\n<li><p><code>[]</code>中若字符的类型相同，顺序连贯，也可以用’-‘符号将首尾连起来。如<code>[a-z][a-h][A-Z][0-9]</code>代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。</p>\n</li>\n</ul>\n<h3 id=\"5B_5E_5D\"><a href=\"#5B_5E_5D\" class=\"headerlink\" title=\"[^]\"></a>[^]</h3><p><code>[^]</code> 取反字符集：匹配所有不在括号中出现的字符。</p>\n<p>如<code>[^a]</code>匹配所有非a字符。用法可以参考字符集<code>[]</code>的用法，只是效果是取反的。</p>\n<h3 id=\"5E\"><a href=\"#5E\" class=\"headerlink\" title=\"^\"></a><code>^</code></h3><p><code>^</code>代表从文本的开始处匹配    如：<code>^abc</code>    匹配以abc为开始的文本</p>\n<h3 id=\"24\"><a href=\"#24\" class=\"headerlink\" title=\"$\"></a><code>$</code></h3><p><code>$</code>代表从文本的结束处匹配如：<code>abc$</code>匹配以abc为结束的文本</p>\n<h2 id=\"u7B80_u5316_u5B57_u7B26_u96C6\"><a href=\"#u7B80_u5316_u5B57_u7B26_u96C6\" class=\"headerlink\" title=\"简化字符集\"></a>简化字符集</h2><p>字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。</p>\n<ul>\n<li><code>\\d</code> : 数字字符集，匹配数字 = <code>[0-9]</code></li>\n<li><code>\\s</code> : 任意的空白符 = <code>[ ]</code></li>\n<li><code>\\w</code> : 数字或子母或下划线 = <code>[0-9a-zA-Z_]</code></li>\n<li><code>.</code>  : 除换行符以外的任意字符 = <code>[^\\n\\r]</code></li>\n<li><code>\\b</code> : 匹配单词的开始或结束,<code>\\babc\\b</code> 匹配文本’this is  abc’中的单词abc</li>\n<li><code>\\D</code> : 任意非数字字符 = <code>[^0-9]</code></li>\n<li><code>\\S</code> : 任意非空白字符 = <code>[^ ]</code></li>\n<li><code>\\W</code> : 任意不是字母数字或下划线的字符</li>\n<li><code>\\B</code> : 任意不是单词的开头或结尾</li>\n</ul>\n<h2 id=\"u5339_u914D_u6B21_u6570\"><a href=\"#u5339_u914D_u6B21_u6570\" class=\"headerlink\" title=\"匹配次数\"></a>匹配次数</h2><ul>\n<li><p><code>+</code>    一次或多次。     如 <code>a+</code> 可以匹配a, aa, aaa, aaaa….</p>\n</li>\n<li><p><code>*</code>    0次或多次。 </p>\n</li>\n<li><p><code>?</code>    0次或一次。</p>\n</li>\n<li><p><code>{n}</code>   n次</p>\n</li>\n<li><p><code>{n,}</code>  n次或n次以上</p>\n</li>\n<li><p><code>{n,m}</code> n到m次</p>\n</li>\n</ul>\n<h2 id=\"u61D2_u60F0_u9650_u5236_u7B26\"><a href=\"#u61D2_u60F0_u9650_u5236_u7B26\" class=\"headerlink\" title=\"懒惰限制符\"></a>懒惰限制符</h2><ul>\n<li><p><code>*?</code>    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于’/a+?/‘ 匹配’aaaa’时会匹配出a</p>\n</li>\n<li><p><code>+?</code>    重复一至多次，尽量少次。   相当于+的最少匹配次数</p>\n</li>\n<li><p><code>??</code>    重复0次到1次，尽量少次。</p>\n</li>\n<li><p><code>{n,}?</code>  重复n次或n次以上，尽量少次。</p>\n</li>\n<li><p><code>{n,m}?</code> 重复n到m次，尽量少次。</p>\n</li>\n</ul>\n<h2 id=\"u7EC4_u4E0E_u5411_u540E_u5F15_u7528\"><a href=\"#u7EC4_u4E0E_u5411_u540E_u5F15_u7528\" class=\"headerlink\" title=\"组与向后引用\"></a>组与向后引用</h2><p>正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：</p>\n<h3 id=\"u666E_u901A_u6355_u83B7_uFF1A\"><a href=\"#u666E_u901A_u6355_u83B7_uFF1A\" class=\"headerlink\" title=\"普通捕获：\"></a>普通捕获：</h3><figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">exp</span>)\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>exp表示的是表达式，\\1代表的是在xp式子匹配到的文本。</p>\n<p>example：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">([\\w]&#123;<span class=\"number\">3</span>&#125;).*\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： ‘abcdefabc’,’d_1d_1’，组1存的是’abc’,’d_1’,而后面组1又出现了，所以整个文本匹配成功。</p>\n<h3 id=\"u547D_u540D_u6355_u83B7\"><a href=\"#u547D_u540D_u6355_u83B7\" class=\"headerlink\" title=\"命名捕获\"></a>命名捕获</h3><figure class=\"highlight fortran\"><table><tr><td class=\"code\"><pre><span class=\"line\">(?&lt;<span class=\"keyword\">name</span>&gt;<span class=\"built_in\">exp</span>)\\k&lt;<span class=\"keyword\">name</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以写成(?’name’exp)\\k’name’   与上1类似，将捕获的文本保存在组name中。name可以自己命名。</p>\n<p>而组的作用是什么呢？php中的正则匹配<code>preg_match_all</code>方法示例:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span>文本</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">'yes, that is ok!'</span>;                            </span><br><span class=\"line\"><span class=\"regexp\">//</span>正则表达式   如果匹配到ok,则分配到anser组中</span><br><span class=\"line\"><span class=\"variable\">$regEx</span> = <span class=\"string\">'#(?&lt;anser&gt;ok).*\\k&lt;anser&gt;#'</span>;</span><br><span class=\"line\"><span class=\"variable\">$count</span> = preg_match_all(<span class=\"variable\">$regEx</span>, <span class=\"variable\">$str</span>, <span class=\"variable\">$match</span>);       </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配成功次数</span><br><span class=\"line\">var_dump(<span class=\"variable\">$count</span>);<span class=\"regexp\">//</span><span class=\"number\">1</span>                 </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配结果集: array(<span class=\"string\">'0'</span>=&gt;<span class=\"string\">'ok!'</span>,<span class=\"string\">'anser'</span>=&gt;<span class=\"string\">'ok'</span>,<span class=\"string\">'1'</span>=&gt;<span class=\"string\">'ok'</span>)</span><br><span class=\"line\">var_dump(<span class=\"variable\">$match</span>);                       </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配结果集中的anser组</span><br><span class=\"line\">var_dump(<span class=\"variable\">$match</span>[<span class=\"string\">'anser'</span>]);  <span class=\"regexp\">//</span><span class=\"string\">'ok'</span></span><br></pre></td></tr></table></figure>\n<p>从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.</p>\n<p>组的作用还可以引用在替换式中，用php中的正则替换<code>preg_replace</code>示例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$regEx</span> = <span class=\"string\">'#.*([\\w]&#123;3,&#125;\\.[\\w]+\\.[\\w]&#123;2,3&#125;)#'</span>;</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">'link = www.example.com'</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span>将<span class=\"variable\">$str</span>的内容替换成<span class=\"string\">\"&lt;a href='\\\\1'&gt;\"</span>,\\\\<span class=\"number\">1</span>则代表正则中的分组<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">$urlTag</span> = preg_replace(<span class=\"variable\">$regEx</span>, <span class=\"string\">\"&lt;a href='\\\\1'&gt;\"</span>, <span class=\"variable\">$str</span>);  </span><br><span class=\"line\">var_dump(<span class=\"variable\">$urlTag</span>);</span><br><span class=\"line\"><span class=\"regexp\">//</span>结果 ：string <span class=\"string\">'&lt;a href='</span>www.example.com<span class=\"string\">'&gt;'</span> (length=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<p>在这里注意的是双引号””中的引用需要多加一个\\则组1变成\\1，而单引号’’号中则还是\\1。</p>\n<h3 id=\"u4E0D_u5206_u7EC4_u4E0D_u5F15_u7528_u5F0F_u62EC_u53F7\"><a href=\"#u4E0D_u5206_u7EC4_u4E0D_u5F15_u7528_u5F0F_u62EC_u53F7\" class=\"headerlink\" title=\"不分组不引用式括号\"></a>不分组不引用式括号</h3><ul>\n<li><code>(?:exp)</code>   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。</li>\n</ul>\n<h3 id=\"u96F6_u5BBD_u65AD_u8A00\"><a href=\"#u96F6_u5BBD_u65AD_u8A00\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h3><ul>\n<li><p><code>(?=exp)</code>     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。</p>\n</li>\n<li><p><code>(?&lt;=exp)</code>    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。</p>\n</li>\n</ul>\n<h3 id=\"u8D1F_u5411_u96F6_u5BBD_u65AD_u8A00\"><a href=\"#u8D1F_u5411_u96F6_u5BBD_u65AD_u8A00\" class=\"headerlink\" title=\"负向零宽断言\"></a>负向零宽断言</h3><ul>\n<li><p><code>(?!exp)</code>     匹配不是以exp结尾的内容。</p>\n</li>\n<li><p><code>(?&lt;!exp)</code>    匹配不是以exp开始的内容。</p>\n</li>\n</ul>\n<h3 id=\"u6CE8_u91CA\"><a href=\"#u6CE8_u91CA\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><code>(?#comment)</code> 括号中的comment对表达式并无影响，只是注释作用。</li>\n</ul>\n<h2 id=\"u5904_u7406_u9009_u9879\"><a href=\"#u5904_u7406_u9009_u9879\" class=\"headerlink\" title=\"处理选项\"></a>处理选项</h2><ul>\n<li><p><code>i</code>    匹配时不区分字母大小写。 如’/text/i’    能匹配到TeXt</p>\n</li>\n<li><p><code>m</code>    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。<br>如  ： 用 <code>#\\w$#m</code>匹配文本 “abc\\nabc\\n”的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c </p>\n</li>\n<li><p><code>s</code>    单行模式.  更改’.’的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）</p>\n</li>\n</ul>\n<h2 id=\"u6CE8_u610F\"><a href=\"#u6CE8_u610F\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li><p>正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。</p>\n</li>\n<li><p>正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\1，而单引号则是\\1。</p>\n</li>\n<li><p>字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。</p>\n</li>\n<li><p>匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>正则表达式 是一种用来描述一定数量文本的模式，通过定义好的正则语句能匹配到目标文本集中所想要的文本。</p>\n</blockquote>\n<p>要在文本”phone number is 131-1111-1111”  中取到电话号码，首先分析电话的格式:第1个数字为1，第2个数字为3,5,8之中的一个,后面再加上9个数字组成。这些规则就可以来写正则表达式了: <code>#1[385]\\d-[\\d]{4}-[\\d]{4}#</code>    ##的中间就是正则表达式。[]中是字符集\\d，表示的是任意数字，而{4}则代表匹配前面的字符几次。下面系统地整理下正则表达式的使用方法：   </p>\n<h2 id=\"u5B57_u7B26_u96C6\"><a href=\"#u5B57_u7B26_u96C6\" class=\"headerlink\" title=\"字符集\"></a>字符集</h2><h3 id=\"5B_5D\"><a href=\"#5B_5D\" class=\"headerlink\" title=\"[]\"></a>[]</h3><p><code>[]</code>字符集：中括号中的是想匹配的字符的集合.</p>\n<p>如：<code>[abc]</code>的作用相当于匹配a字符或b字符或c字符，与<code>a|b|c</code>作用相同，顺便一说，<code>|</code>的意义是或。</p>\n<ul>\n<li><p><code>[]</code>的后面也可以加上<code>{time}</code>，来表示对这字符集匹配time次。  </p>\n</li>\n<li><p><code>[]</code>中若字符的类型相同，顺序连贯，也可以用’-‘符号将首尾连起来。如<code>[a-z][a-h][A-Z][0-9]</code>代表匹配第一个字符在a到z的26个字母中，第二个字符在a到h的8个字母中，第三个字符是0到9的10个数字中。</p>\n</li>\n</ul>\n<h3 id=\"5B_5E_5D\"><a href=\"#5B_5E_5D\" class=\"headerlink\" title=\"[^]\"></a>[^]</h3><p><code>[^]</code> 取反字符集：匹配所有不在括号中出现的字符。</p>\n<p>如<code>[^a]</code>匹配所有非a字符。用法可以参考字符集<code>[]</code>的用法，只是效果是取反的。</p>\n<h3 id=\"5E\"><a href=\"#5E\" class=\"headerlink\" title=\"^\"></a><code>^</code></h3><p><code>^</code>代表从文本的开始处匹配    如：<code>^abc</code>    匹配以abc为开始的文本</p>\n<h3 id=\"24\"><a href=\"#24\" class=\"headerlink\" title=\"$\"></a><code>$</code></h3><p><code>$</code>代表从文本的结束处匹配如：<code>abc$</code>匹配以abc为结束的文本</p>\n<h2 id=\"u7B80_u5316_u5B57_u7B26_u96C6\"><a href=\"#u7B80_u5316_u5B57_u7B26_u96C6\" class=\"headerlink\" title=\"简化字符集\"></a>简化字符集</h2><p>字符集可以按规律划分为以下几类，使用简化字符集可以提高写正则的效率。</p>\n<ul>\n<li><code>\\d</code> : 数字字符集，匹配数字 = <code>[0-9]</code></li>\n<li><code>\\s</code> : 任意的空白符 = <code>[ ]</code></li>\n<li><code>\\w</code> : 数字或子母或下划线 = <code>[0-9a-zA-Z_]</code></li>\n<li><code>.</code>  : 除换行符以外的任意字符 = <code>[^\\n\\r]</code></li>\n<li><code>\\b</code> : 匹配单词的开始或结束,<code>\\babc\\b</code> 匹配文本’this is  abc’中的单词abc</li>\n<li><code>\\D</code> : 任意非数字字符 = <code>[^0-9]</code></li>\n<li><code>\\S</code> : 任意非空白字符 = <code>[^ ]</code></li>\n<li><code>\\W</code> : 任意不是字母数字或下划线的字符</li>\n<li><code>\\B</code> : 任意不是单词的开头或结尾</li>\n</ul>\n<h2 id=\"u5339_u914D_u6B21_u6570\"><a href=\"#u5339_u914D_u6B21_u6570\" class=\"headerlink\" title=\"匹配次数\"></a>匹配次数</h2><ul>\n<li><p><code>+</code>    一次或多次。     如 <code>a+</code> 可以匹配a, aa, aaa, aaaa….</p>\n</li>\n<li><p><code>*</code>    0次或多次。 </p>\n</li>\n<li><p><code>?</code>    0次或一次。</p>\n</li>\n<li><p><code>{n}</code>   n次</p>\n</li>\n<li><p><code>{n,}</code>  n次或n次以上</p>\n</li>\n<li><p><code>{n,m}</code> n到m次</p>\n</li>\n</ul>\n<h2 id=\"u61D2_u60F0_u9650_u5236_u7B26\"><a href=\"#u61D2_u60F0_u9650_u5236_u7B26\" class=\"headerlink\" title=\"懒惰限制符\"></a>懒惰限制符</h2><ul>\n<li><p><code>*?</code>    重复任意次，但尽量少次。   相当于*的最少匹配次数  相当于’/a+?/‘ 匹配’aaaa’时会匹配出a</p>\n</li>\n<li><p><code>+?</code>    重复一至多次，尽量少次。   相当于+的最少匹配次数</p>\n</li>\n<li><p><code>??</code>    重复0次到1次，尽量少次。</p>\n</li>\n<li><p><code>{n,}?</code>  重复n次或n次以上，尽量少次。</p>\n</li>\n<li><p><code>{n,m}?</code> 重复n到m次，尽量少次。</p>\n</li>\n</ul>\n<h2 id=\"u7EC4_u4E0E_u5411_u540E_u5F15_u7528\"><a href=\"#u7EC4_u4E0E_u5411_u540E_u5F15_u7528\" class=\"headerlink\" title=\"组与向后引用\"></a>组与向后引用</h2><p>正则表达式中用()括起来的部分所匹配到的文本会分到单独的组中，若没名字则默认从1开始递增的值为组名，有设置名字的组则以名字为组名（如2所述），而且还能以组名代表式子向后引用：</p>\n<h3 id=\"u666E_u901A_u6355_u83B7_uFF1A\"><a href=\"#u666E_u901A_u6355_u83B7_uFF1A\" class=\"headerlink\" title=\"普通捕获：\"></a>普通捕获：</h3><figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"built_in\">exp</span>)\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>exp表示的是表达式，\\1代表的是在xp式子匹配到的文本。</p>\n<p>example：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">([\\w]&#123;<span class=\"number\">3</span>&#125;).*\\<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>表示是匹配到3个数字或字符或下划线组成的文本，存入组1中，中间匹配任意字符任意次数，后面再匹配组1中的文本，能匹配到的格式是： ‘abcdefabc’,’d_1d_1’，组1存的是’abc’,’d_1’,而后面组1又出现了，所以整个文本匹配成功。</p>\n<h3 id=\"u547D_u540D_u6355_u83B7\"><a href=\"#u547D_u540D_u6355_u83B7\" class=\"headerlink\" title=\"命名捕获\"></a>命名捕获</h3><figure class=\"highlight fortran\"><table><tr><td class=\"code\"><pre><span class=\"line\">(?&lt;<span class=\"keyword\">name</span>&gt;<span class=\"built_in\">exp</span>)\\k&lt;<span class=\"keyword\">name</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以写成(?’name’exp)\\k’name’   与上1类似，将捕获的文本保存在组name中。name可以自己命名。</p>\n<p>而组的作用是什么呢？php中的正则匹配<code>preg_match_all</code>方法示例:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'&lt;pre&gt;'</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span>文本</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">'yes, that is ok!'</span>;                            </span><br><span class=\"line\"><span class=\"regexp\">//</span>正则表达式   如果匹配到ok,则分配到anser组中</span><br><span class=\"line\"><span class=\"variable\">$regEx</span> = <span class=\"string\">'#(?&lt;anser&gt;ok).*\\k&lt;anser&gt;#'</span>;</span><br><span class=\"line\"><span class=\"variable\">$count</span> = preg_match_all(<span class=\"variable\">$regEx</span>, <span class=\"variable\">$str</span>, <span class=\"variable\">$match</span>);       </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配成功次数</span><br><span class=\"line\">var_dump(<span class=\"variable\">$count</span>);<span class=\"regexp\">//</span><span class=\"number\">1</span>                 </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配结果集: array(<span class=\"string\">'0'</span>=&gt;<span class=\"string\">'ok!'</span>,<span class=\"string\">'anser'</span>=&gt;<span class=\"string\">'ok'</span>,<span class=\"string\">'1'</span>=&gt;<span class=\"string\">'ok'</span>)</span><br><span class=\"line\">var_dump(<span class=\"variable\">$match</span>);                       </span><br><span class=\"line\"><span class=\"regexp\">//</span>匹配结果集中的anser组</span><br><span class=\"line\">var_dump(<span class=\"variable\">$match</span>[<span class=\"string\">'anser'</span>]);  <span class=\"regexp\">//</span><span class=\"string\">'ok'</span></span><br></pre></td></tr></table></figure>\n<p>从结果看到，组的作用是将结果分到设定的组名中，方便取数据，匹配成功的次数是1次，而且文本组有2个，一个是默认的1，一个是设置的anser.</p>\n<p>组的作用还可以引用在替换式中，用php中的正则替换<code>preg_replace</code>示例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$regEx</span> = <span class=\"string\">'#.*([\\w]&#123;3,&#125;\\.[\\w]+\\.[\\w]&#123;2,3&#125;)#'</span>;</span><br><span class=\"line\"><span class=\"variable\">$str</span> = <span class=\"string\">'link = www.example.com'</span>;</span><br><span class=\"line\"><span class=\"regexp\">//</span>将<span class=\"variable\">$str</span>的内容替换成<span class=\"string\">\"&lt;a href='\\\\1'&gt;\"</span>,\\\\<span class=\"number\">1</span>则代表正则中的分组<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"variable\">$urlTag</span> = preg_replace(<span class=\"variable\">$regEx</span>, <span class=\"string\">\"&lt;a href='\\\\1'&gt;\"</span>, <span class=\"variable\">$str</span>);  </span><br><span class=\"line\">var_dump(<span class=\"variable\">$urlTag</span>);</span><br><span class=\"line\"><span class=\"regexp\">//</span>结果 ：string <span class=\"string\">'&lt;a href='</span>www.example.com<span class=\"string\">'&gt;'</span> (length=<span class=\"number\">26</span>)</span><br></pre></td></tr></table></figure>\n<p>在这里注意的是双引号””中的引用需要多加一个\\则组1变成\\1，而单引号’’号中则还是\\1。</p>\n<h3 id=\"u4E0D_u5206_u7EC4_u4E0D_u5F15_u7528_u5F0F_u62EC_u53F7\"><a href=\"#u4E0D_u5206_u7EC4_u4E0D_u5F15_u7528_u5F0F_u62EC_u53F7\" class=\"headerlink\" title=\"不分组不引用式括号\"></a>不分组不引用式括号</h3><ul>\n<li><code>(?:exp)</code>   有些表达式只是需要括号将内容括起来当一个小整体，这时用这种方法括起来就不会产生分组和引用，减少资源的浪费。</li>\n</ul>\n<h3 id=\"u96F6_u5BBD_u65AD_u8A00\"><a href=\"#u96F6_u5BBD_u65AD_u8A00\" class=\"headerlink\" title=\"零宽断言\"></a>零宽断言</h3><ul>\n<li><p><code>(?=exp)</code>     匹配exp表达式前面的内容，即以exp结尾的内容但又不包括exp。</p>\n</li>\n<li><p><code>(?&lt;=exp)</code>    匹配exp表达式后面的内容，即以exp开始的内容但又不包括exp。</p>\n</li>\n</ul>\n<h3 id=\"u8D1F_u5411_u96F6_u5BBD_u65AD_u8A00\"><a href=\"#u8D1F_u5411_u96F6_u5BBD_u65AD_u8A00\" class=\"headerlink\" title=\"负向零宽断言\"></a>负向零宽断言</h3><ul>\n<li><p><code>(?!exp)</code>     匹配不是以exp结尾的内容。</p>\n</li>\n<li><p><code>(?&lt;!exp)</code>    匹配不是以exp开始的内容。</p>\n</li>\n</ul>\n<h3 id=\"u6CE8_u91CA\"><a href=\"#u6CE8_u91CA\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li><code>(?#comment)</code> 括号中的comment对表达式并无影响，只是注释作用。</li>\n</ul>\n<h2 id=\"u5904_u7406_u9009_u9879\"><a href=\"#u5904_u7406_u9009_u9879\" class=\"headerlink\" title=\"处理选项\"></a>处理选项</h2><ul>\n<li><p><code>i</code>    匹配时不区分字母大小写。 如’/text/i’    能匹配到TeXt</p>\n</li>\n<li><p><code>m</code>    多行模式  更改^和$的含义， 使它们分别在任意一行的行首和行尾匹配，而不仅仅在字符串的开关和结尾匹配，在此状态下$的含义是匹配\\n之前的位置及字符串结束前的位置 。<br>如  ： 用 <code>#\\w$#m</code>匹配文本 “abc\\nabc\\n”的匹配结果：c, c .(2次换行前的c都匹配到)。不加m,结果c </p>\n</li>\n<li><p><code>s</code>    单行模式.  更改’.’的含义，使它与每个字符依次匹配，包括换行符\\n（.本来是匹配除换行符以外的文本）</p>\n</li>\n</ul>\n<h2 id=\"u6CE8_u610F\"><a href=\"#u6CE8_u610F\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li><p>正则表达式中有特殊字符：( )[ ] \\ ^ $ . ? + * | 想匹配这些字符的本体，需要加上\\来换码。</p>\n</li>\n<li><p>正则表达式用单引号与双引号括时有些细节会有差别，双引号括时，引用分组如\\1得写成\\1，而单引号则是\\1。</p>\n</li>\n<li><p>字符串中有\\n\\r\\t等特殊字符时，字符串最外层需用双引号，而不是单引号。</p>\n</li>\n<li><p>匹配次数的重叠需谨慎，如`#([\\w]{3}){4,6}#  所代表的是匹配12到18次的\\w</p>\n</li>\n</ul>\n","sticky":0},{"title":"Redis有序集合做订阅列表","date":"2016-01-18T14:33:00.000Z","_content":"\nRedis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。\n\n以有序集合的特性，可以用来做订阅列表的存储\n\n## 订阅功能\n\n订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  \n\n设计订阅表subscriber,以mysql为例 \n\n|field|type|comment|\n|---|---|---|\n|uid|int|用户id|\n|rUid|int|订阅目标id|\n|createTime|int|创建时间|\n|updateTime|int|修改时间|\n|status|int|状态 枚举:`-1`删除`0`正常|\n\n订阅表的基本功能需要满足：\n\n* 通过`uid`查出所有已经订阅的`rUid`的信息，并按`createTime`排序\n* 通过订阅目标`rUid`查出所有`uid`，并按`createTime`排序\n* 查找是否已经订阅\n* 取消订阅\n\n## 添加订阅\n\n按照基本功能的1和2，我们需要保持2个集合\n一个集合以用户为中心:\n\n```\n以用户为中心的key统一一个前缀，后面加上用户的uid:\nexampleKey(uid为1): subscriberUid1\n```\n\n一个集合以订阅目标为中心:\n\n```\n以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:\nexampleKey(rUid为100): subscriberRUid100\n```\n添加的命令是\n\n```\n\t# 增加1条数据\n\tZADD score member\n\t# 增加多条数据\n\tZADD score1 member1 [score2 member2]...\n```\n为了以时间排序，我们可以以时间戳为分数，保存订阅信息\n\n```\n\t127.0.0.1:6379>ZADD subscriberUid1 1453129638 100\n\t127.0.0.1:6379>ZADD subscriberRUid100 1453129638 1\n\n\t127.0.0.1:6379> ZADD subscriberUid1 1453129639 200 1453129640 300 1453129640 400 1453129641 500\t1453129638 10000\n\t127.0.0.1:6379> ZADD subscriberRUid100 1453129639 2 1453129640 3 1453129640 4 1453129641 5 1453129611 6\n```\n\n## 获取订阅列表\n\n获取集合的命令是\n\n```\n\t# 按分数正序排列 withscore 是指附带分数\n\tZRANGE key start stop [WITHSCORE]\n\t# 按分数倒序排列\n\tZREVRANGE key start stop [WITHSCORE]\n```\n\n我们现在来获取用户1的订阅列表：\n\n```\n   # 正序获取，从0开始，-1指取到尽头，相当于limit\n   127.0.0.1:6379> ZRANGE subscriberUid1 0 -1 WITHSCORES\n   # 结果如下\n\t 1) \"100\"\n\t 2) \"1453129638\"\n\t 3) \"10000\"\n\t 4) \"1453129638\"\n\t 5) \"200\"\n\t 6) \"1453129639\"\n\t 7) \"300\"\n\t 8) \"1453129640\"\n\t 9) \"400\"\n\t10) \"1453129640\"\n\t11) \"500\"\n\t12) \"1453129641\"\n```\n\n这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:\n\n```\n\t# 倒序获取，从0开始，-1指取到尽头\n   127.0.0.1:6379> ZREVRANGE subscriberUid1 0 -1\n   # 结果如下\n\t1) \"500\"\n\t2) \"400\"\n\t3) \"300\"\n\t4) \"200\"\n\t5) \"10000\"\n\t6) \"100\"\n```\n\n## 查找是否已订阅\n\n查找可以用一个方法来确认，查找对应成员的分数：\n\n```\n\tZSCORE key member\n```\n\n```\n127.0.0.1:6379> ZSCORE subscriberUid1 100\n\"1453129638\"\n127.0.0.1:6379> ZSCORE subscriberUid1 1000\n(nil)\n```\n\n每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。\n\n## 取消订阅\n\n删除成员操作\n\n```\n\t# 删除1个成员\n\tZREM key member\n\t# 删除1个或多个成员\n\tZREM key member [member ...]\n```\n因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：\n\n```\n\t# 删除用户为中心的集合\n\t127.0.0.1:6379> ZREM subscriberUid1 100\n\t(integer) 1\n\t127.0.0.1:6379> ZRANGE subscriberUid1 0 -1\n\t1) \"10000\"\n\t2) \"200\"\n\t3) \"300\"\n\t4) \"400\"\n\t5) \"500\"\n\n\t# 删除订阅目录为中心的集合\n\t127.0.0.1:6379>  ZREM subscriberRUid100 1\n\t(integer) 1\n\t127.0.0.1:6379>  ZRANGE subscriberRUid100 0 -1\n\t1) \"6\"\n\t2) \"2\"\n\t3) \"3\"\n\t4) \"4\"\n\t5) \"5\"\n```\n\n到此，我们的订阅功能就完成了。","source":"_posts/redis/redis-sortedSet.md","raw":"title: Redis有序集合做订阅列表\ndate: 2016-01-18 22:33\ncategories: redis\ntags: redis\n\n---\n\nRedis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。\n\n以有序集合的特性，可以用来做订阅列表的存储\n\n## 订阅功能\n\n订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  \n\n设计订阅表subscriber,以mysql为例 \n\n|field|type|comment|\n|---|---|---|\n|uid|int|用户id|\n|rUid|int|订阅目标id|\n|createTime|int|创建时间|\n|updateTime|int|修改时间|\n|status|int|状态 枚举:`-1`删除`0`正常|\n\n订阅表的基本功能需要满足：\n\n* 通过`uid`查出所有已经订阅的`rUid`的信息，并按`createTime`排序\n* 通过订阅目标`rUid`查出所有`uid`，并按`createTime`排序\n* 查找是否已经订阅\n* 取消订阅\n\n## 添加订阅\n\n按照基本功能的1和2，我们需要保持2个集合\n一个集合以用户为中心:\n\n```\n以用户为中心的key统一一个前缀，后面加上用户的uid:\nexampleKey(uid为1): subscriberUid1\n```\n\n一个集合以订阅目标为中心:\n\n```\n以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:\nexampleKey(rUid为100): subscriberRUid100\n```\n添加的命令是\n\n```\n\t# 增加1条数据\n\tZADD score member\n\t# 增加多条数据\n\tZADD score1 member1 [score2 member2]...\n```\n为了以时间排序，我们可以以时间戳为分数，保存订阅信息\n\n```\n\t127.0.0.1:6379>ZADD subscriberUid1 1453129638 100\n\t127.0.0.1:6379>ZADD subscriberRUid100 1453129638 1\n\n\t127.0.0.1:6379> ZADD subscriberUid1 1453129639 200 1453129640 300 1453129640 400 1453129641 500\t1453129638 10000\n\t127.0.0.1:6379> ZADD subscriberRUid100 1453129639 2 1453129640 3 1453129640 4 1453129641 5 1453129611 6\n```\n\n## 获取订阅列表\n\n获取集合的命令是\n\n```\n\t# 按分数正序排列 withscore 是指附带分数\n\tZRANGE key start stop [WITHSCORE]\n\t# 按分数倒序排列\n\tZREVRANGE key start stop [WITHSCORE]\n```\n\n我们现在来获取用户1的订阅列表：\n\n```\n   # 正序获取，从0开始，-1指取到尽头，相当于limit\n   127.0.0.1:6379> ZRANGE subscriberUid1 0 -1 WITHSCORES\n   # 结果如下\n\t 1) \"100\"\n\t 2) \"1453129638\"\n\t 3) \"10000\"\n\t 4) \"1453129638\"\n\t 5) \"200\"\n\t 6) \"1453129639\"\n\t 7) \"300\"\n\t 8) \"1453129640\"\n\t 9) \"400\"\n\t10) \"1453129640\"\n\t11) \"500\"\n\t12) \"1453129641\"\n```\n\n这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:\n\n```\n\t# 倒序获取，从0开始，-1指取到尽头\n   127.0.0.1:6379> ZREVRANGE subscriberUid1 0 -1\n   # 结果如下\n\t1) \"500\"\n\t2) \"400\"\n\t3) \"300\"\n\t4) \"200\"\n\t5) \"10000\"\n\t6) \"100\"\n```\n\n## 查找是否已订阅\n\n查找可以用一个方法来确认，查找对应成员的分数：\n\n```\n\tZSCORE key member\n```\n\n```\n127.0.0.1:6379> ZSCORE subscriberUid1 100\n\"1453129638\"\n127.0.0.1:6379> ZSCORE subscriberUid1 1000\n(nil)\n```\n\n每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。\n\n## 取消订阅\n\n删除成员操作\n\n```\n\t# 删除1个成员\n\tZREM key member\n\t# 删除1个或多个成员\n\tZREM key member [member ...]\n```\n因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：\n\n```\n\t# 删除用户为中心的集合\n\t127.0.0.1:6379> ZREM subscriberUid1 100\n\t(integer) 1\n\t127.0.0.1:6379> ZRANGE subscriberUid1 0 -1\n\t1) \"10000\"\n\t2) \"200\"\n\t3) \"300\"\n\t4) \"400\"\n\t5) \"500\"\n\n\t# 删除订阅目录为中心的集合\n\t127.0.0.1:6379>  ZREM subscriberRUid100 1\n\t(integer) 1\n\t127.0.0.1:6379>  ZRANGE subscriberRUid100 0 -1\n\t1) \"6\"\n\t2) \"2\"\n\t3) \"3\"\n\t4) \"4\"\n\t5) \"5\"\n```\n\n到此，我们的订阅功能就完成了。","slug":"redis/redis-sortedSet","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7ph003fi9skna4d3whq","content":"<p>Redis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。</p>\n<p>以有序集合的特性，可以用来做订阅列表的存储</p>\n<h2 id=\"u8BA2_u9605_u529F_u80FD\"><a href=\"#u8BA2_u9605_u529F_u80FD\" class=\"headerlink\" title=\"订阅功能\"></a>订阅功能</h2><p>订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  </p>\n<p>设计订阅表subscriber,以mysql为例 </p>\n<table>\n<thead>\n<tr>\n<th>field</th>\n<th>type</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uid</td>\n<td>int</td>\n<td>用户id</td>\n</tr>\n<tr>\n<td>rUid</td>\n<td>int</td>\n<td>订阅目标id</td>\n</tr>\n<tr>\n<td>createTime</td>\n<td>int</td>\n<td>创建时间</td>\n</tr>\n<tr>\n<td>updateTime</td>\n<td>int</td>\n<td>修改时间</td>\n</tr>\n<tr>\n<td>status</td>\n<td>int</td>\n<td>状态 枚举:<code>-1</code>删除<code>0</code>正常</td>\n</tr>\n</tbody>\n</table>\n<p>订阅表的基本功能需要满足：</p>\n<ul>\n<li>通过<code>uid</code>查出所有已经订阅的<code>rUid</code>的信息，并按<code>createTime</code>排序</li>\n<li>通过订阅目标<code>rUid</code>查出所有<code>uid</code>，并按<code>createTime</code>排序</li>\n<li>查找是否已经订阅</li>\n<li>取消订阅</li>\n</ul>\n<h2 id=\"u6DFB_u52A0_u8BA2_u9605\"><a href=\"#u6DFB_u52A0_u8BA2_u9605\" class=\"headerlink\" title=\"添加订阅\"></a>添加订阅</h2><p>按照基本功能的1和2，我们需要保持2个集合<br>一个集合以用户为中心:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">以用户为中心的key统一一个前缀，后面加上用户的uid:</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">exampleKey</span><span class=\"params\">(uid为<span class=\"number\">1</span>)</span></span>: subscriberUid1</span><br></pre></td></tr></table></figure>\n<p>一个集合以订阅目标为中心:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">exampleKey</span><span class=\"params\">(rUid为<span class=\"number\">100</span>)</span></span>: subscriberRUid100</span><br></pre></td></tr></table></figure>\n<p>添加的命令是</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加1条数据</span></span><br><span class=\"line\">ZADD <span class=\"keyword\">score </span>member</span><br><span class=\"line\"><span class=\"comment\"># 增加多条数据</span></span><br><span class=\"line\">ZADD <span class=\"keyword\">score1 </span>member1 [<span class=\"keyword\">score2 </span>member2]...</span><br></pre></td></tr></table></figure>\n<p>为了以时间排序，我们可以以时间戳为分数，保存订阅信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;ZADD</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">1453129638</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;ZADD</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1453129638</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZADD</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">1453129639</span> <span class=\"number\">200</span> <span class=\"number\">1453129640</span> <span class=\"number\">300</span> <span class=\"number\">1453129640</span> <span class=\"number\">400</span> <span class=\"number\">1453129641</span> <span class=\"number\">500</span>\t<span class=\"number\">1453129638</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZADD</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1453129639</span> <span class=\"number\">2</span> <span class=\"number\">1453129640</span> <span class=\"number\">3</span> <span class=\"number\">1453129640</span> <span class=\"number\">4</span> <span class=\"number\">1453129641</span> <span class=\"number\">5</span> <span class=\"number\">1453129611</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6_u8BA2_u9605_u5217_u8868\"><a href=\"#u83B7_u53D6_u8BA2_u9605_u5217_u8868\" class=\"headerlink\" title=\"获取订阅列表\"></a>获取订阅列表</h2><p>获取集合的命令是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按分数正序排列 withscore 是指附带分数</span></span><br><span class=\"line\">ZRANGE key <span class=\"keyword\">start</span> <span class=\"keyword\">stop</span> [WITHSCORE]</span><br><span class=\"line\"><span class=\"comment\"># 按分数倒序排列</span></span><br><span class=\"line\">ZREVRANGE <span class=\"keyword\">key</span> <span class=\"keyword\">start</span> <span class=\"keyword\">stop</span> [WITHSCORE]</span><br></pre></td></tr></table></figure>\n<p>我们现在来获取用户1的订阅列表：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\"># 正序获取，从0开始，-1指取到尽头，相当于limit</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span> <span class=\"string\">WITHSCORES</span></span><br><span class=\"line\">  <span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"> <span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"100\"</span></span><br><span class=\"line\"> <span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"> <span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"> <span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"string\">)</span> <span class=\"string\">\"1453129639\"</span></span><br><span class=\"line\"> <span class=\"number\">7</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"> <span class=\"number\">8</span><span class=\"string\">)</span> <span class=\"string\">\"1453129640\"</span></span><br><span class=\"line\"> <span class=\"number\">9</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">10</span><span class=\"string\">)</span> <span class=\"string\">\"1453129640\"</span></span><br><span class=\"line\"><span class=\"number\">11</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"><span class=\"number\">12</span><span class=\"string\">)</span> <span class=\"string\">\"1453129641\"</span></span><br></pre></td></tr></table></figure>\n<p>这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 倒序获取，从0开始，-1指取到尽头</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZREVRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"><span class=\"number\">6</span><span class=\"string\">)</span> <span class=\"string\">\"100\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u67E5_u627E_u662F_u5426_u5DF2_u8BA2_u9605\"><a href=\"#u67E5_u627E_u662F_u5426_u5DF2_u8BA2_u9605\" class=\"headerlink\" title=\"查找是否已订阅\"></a>查找是否已订阅</h2><p>查找可以用一个方法来确认，查找对应成员的分数：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZSCORE <span class=\"built_in\">key</span> <span class=\"built_in\">member</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1:6379</span>&gt; ZSCORE subscriberUid1 <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6379</span>&gt; ZSCORE subscriberUid1 <span class=\"number\">1000</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<p>每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。</p>\n<h2 id=\"u53D6_u6D88_u8BA2_u9605\"><a href=\"#u53D6_u6D88_u8BA2_u9605\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h2><p>删除成员操作</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除<span class=\"number\">1</span>个成员</span><br><span class=\"line\">ZREM <span class=\"built_in\">key</span> <span class=\"built_in\">member</span></span><br><span class=\"line\"># 删除<span class=\"number\">1</span>个或多个成员</span><br><span class=\"line\">ZREM <span class=\"built_in\">key</span> <span class=\"built_in\">member</span> [<span class=\"built_in\">member</span> ...]</span><br></pre></td></tr></table></figure>\n<p>因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除用户为中心的集合</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZREM</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">(integer)</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除订阅目录为中心的集合</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span>  <span class=\"string\">ZREM</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"string\">(integer)</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span>  <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"5\"</span></span><br></pre></td></tr></table></figure>\n<p>到此，我们的订阅功能就完成了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis 的有序集合和集合一样，成员(member)的值是string类型，而且成员是唯一的，并不重复,重复地保存同一个成员只会重置成员的分数，以最后一次保存为主。每一个成员有对应的分数(score)，分数可相同，通过分数来对成员进行排序。</p>\n<p>以有序集合的特性，可以用来做订阅列表的存储</p>\n<h2 id=\"u8BA2_u9605_u529F_u80FD\"><a href=\"#u8BA2_u9605_u529F_u80FD\" class=\"headerlink\" title=\"订阅功能\"></a>订阅功能</h2><p>订阅的基本数据我存储在mysql中，redis用于缓存读取，当然直接用redis存储数据也是可以的。  </p>\n<p>设计订阅表subscriber,以mysql为例 </p>\n<table>\n<thead>\n<tr>\n<th>field</th>\n<th>type</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uid</td>\n<td>int</td>\n<td>用户id</td>\n</tr>\n<tr>\n<td>rUid</td>\n<td>int</td>\n<td>订阅目标id</td>\n</tr>\n<tr>\n<td>createTime</td>\n<td>int</td>\n<td>创建时间</td>\n</tr>\n<tr>\n<td>updateTime</td>\n<td>int</td>\n<td>修改时间</td>\n</tr>\n<tr>\n<td>status</td>\n<td>int</td>\n<td>状态 枚举:<code>-1</code>删除<code>0</code>正常</td>\n</tr>\n</tbody>\n</table>\n<p>订阅表的基本功能需要满足：</p>\n<ul>\n<li>通过<code>uid</code>查出所有已经订阅的<code>rUid</code>的信息，并按<code>createTime</code>排序</li>\n<li>通过订阅目标<code>rUid</code>查出所有<code>uid</code>，并按<code>createTime</code>排序</li>\n<li>查找是否已经订阅</li>\n<li>取消订阅</li>\n</ul>\n<h2 id=\"u6DFB_u52A0_u8BA2_u9605\"><a href=\"#u6DFB_u52A0_u8BA2_u9605\" class=\"headerlink\" title=\"添加订阅\"></a>添加订阅</h2><p>按照基本功能的1和2，我们需要保持2个集合<br>一个集合以用户为中心:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">以用户为中心的key统一一个前缀，后面加上用户的uid:</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">exampleKey</span><span class=\"params\">(uid为<span class=\"number\">1</span>)</span></span>: subscriberUid1</span><br></pre></td></tr></table></figure>\n<p>一个集合以订阅目标为中心:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">以订阅目录为中心的key统一一个前缀，后面加上目标用户的rUid:</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">exampleKey</span><span class=\"params\">(rUid为<span class=\"number\">100</span>)</span></span>: subscriberRUid100</span><br></pre></td></tr></table></figure>\n<p>添加的命令是</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加1条数据</span></span><br><span class=\"line\">ZADD <span class=\"keyword\">score </span>member</span><br><span class=\"line\"><span class=\"comment\"># 增加多条数据</span></span><br><span class=\"line\">ZADD <span class=\"keyword\">score1 </span>member1 [<span class=\"keyword\">score2 </span>member2]...</span><br></pre></td></tr></table></figure>\n<p>为了以时间排序，我们可以以时间戳为分数，保存订阅信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;ZADD</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">1453129638</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;ZADD</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1453129638</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZADD</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">1453129639</span> <span class=\"number\">200</span> <span class=\"number\">1453129640</span> <span class=\"number\">300</span> <span class=\"number\">1453129640</span> <span class=\"number\">400</span> <span class=\"number\">1453129641</span> <span class=\"number\">500</span>\t<span class=\"number\">1453129638</span> <span class=\"number\">10000</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZADD</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1453129639</span> <span class=\"number\">2</span> <span class=\"number\">1453129640</span> <span class=\"number\">3</span> <span class=\"number\">1453129640</span> <span class=\"number\">4</span> <span class=\"number\">1453129641</span> <span class=\"number\">5</span> <span class=\"number\">1453129611</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u83B7_u53D6_u8BA2_u9605_u5217_u8868\"><a href=\"#u83B7_u53D6_u8BA2_u9605_u5217_u8868\" class=\"headerlink\" title=\"获取订阅列表\"></a>获取订阅列表</h2><p>获取集合的命令是</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按分数正序排列 withscore 是指附带分数</span></span><br><span class=\"line\">ZRANGE key <span class=\"keyword\">start</span> <span class=\"keyword\">stop</span> [WITHSCORE]</span><br><span class=\"line\"><span class=\"comment\"># 按分数倒序排列</span></span><br><span class=\"line\">ZREVRANGE <span class=\"keyword\">key</span> <span class=\"keyword\">start</span> <span class=\"keyword\">stop</span> [WITHSCORE]</span><br></pre></td></tr></table></figure>\n<p>我们现在来获取用户1的订阅列表：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\"># 正序获取，从0开始，-1指取到尽头，相当于limit</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span> <span class=\"string\">WITHSCORES</span></span><br><span class=\"line\">  <span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"> <span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"100\"</span></span><br><span class=\"line\"> <span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"> <span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"> <span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"string\">)</span> <span class=\"string\">\"1453129639\"</span></span><br><span class=\"line\"> <span class=\"number\">7</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"> <span class=\"number\">8</span><span class=\"string\">)</span> <span class=\"string\">\"1453129640\"</span></span><br><span class=\"line\"> <span class=\"number\">9</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">10</span><span class=\"string\">)</span> <span class=\"string\">\"1453129640\"</span></span><br><span class=\"line\"><span class=\"number\">11</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"><span class=\"number\">12</span><span class=\"string\">)</span> <span class=\"string\">\"1453129641\"</span></span><br></pre></td></tr></table></figure>\n<p>这正是对应了分数的顺序，接下来试试倒序，并隐藏分数输出:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 倒序获取，从0开始，-1指取到尽头</span></span><br><span class=\"line\">  <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZREVRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"comment\"># 结果如下</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"><span class=\"number\">6</span><span class=\"string\">)</span> <span class=\"string\">\"100\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u67E5_u627E_u662F_u5426_u5DF2_u8BA2_u9605\"><a href=\"#u67E5_u627E_u662F_u5426_u5DF2_u8BA2_u9605\" class=\"headerlink\" title=\"查找是否已订阅\"></a>查找是否已订阅</h2><p>查找可以用一个方法来确认，查找对应成员的分数：</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZSCORE <span class=\"built_in\">key</span> <span class=\"built_in\">member</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0.0.1:6379</span>&gt; ZSCORE subscriberUid1 <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">\"1453129638\"</span></span><br><span class=\"line\"><span class=\"number\">127.0.0.1:6379</span>&gt; ZSCORE subscriberUid1 <span class=\"number\">1000</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<p>每个成员我们都会分配对应的分数，通过获取分数，判断是否有分数，我们就可以判断这成员是否在集合中。</p>\n<h2 id=\"u53D6_u6D88_u8BA2_u9605\"><a href=\"#u53D6_u6D88_u8BA2_u9605\" class=\"headerlink\" title=\"取消订阅\"></a>取消订阅</h2><p>删除成员操作</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除<span class=\"number\">1</span>个成员</span><br><span class=\"line\">ZREM <span class=\"built_in\">key</span> <span class=\"built_in\">member</span></span><br><span class=\"line\"># 删除<span class=\"number\">1</span>个或多个成员</span><br><span class=\"line\">ZREM <span class=\"built_in\">key</span> <span class=\"built_in\">member</span> [<span class=\"built_in\">member</span> ...]</span><br></pre></td></tr></table></figure>\n<p>因为我们的订阅数据需要同时维护2个集合，所以我们的删除是同时删除2个集合中的对应数据：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除用户为中心的集合</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZREM</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"string\">(integer)</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span> <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberUid1</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"10000\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"200\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"300\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"400\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"500\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除订阅目录为中心的集合</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span>  <span class=\"string\">ZREM</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"string\">(integer)</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:6379&gt;</span>  <span class=\"string\">ZRANGE</span> <span class=\"string\">subscriberRUid100</span> <span class=\"number\">0</span> <span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">)</span> <span class=\"string\">\"6\"</span></span><br><span class=\"line\"><span class=\"number\">2</span><span class=\"string\">)</span> <span class=\"string\">\"2\"</span></span><br><span class=\"line\"><span class=\"number\">3</span><span class=\"string\">)</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"number\">4</span><span class=\"string\">)</span> <span class=\"string\">\"4\"</span></span><br><span class=\"line\"><span class=\"number\">5</span><span class=\"string\">)</span> <span class=\"string\">\"5\"</span></span><br></pre></td></tr></table></figure>\n<p>到此，我们的订阅功能就完成了。</p>\n","sticky":0},{"title":"mysql 字符串函数","date":"2016-05-22T14:58:20.000Z","_content":"\n# test table\n\n使用一个测试表：\n\n```\nmysql> select * from news ;\n+----+--------+-------+\n| id | title  | body  |\n+----+--------+-------+\n|  1 | title1 | NULL  |\n|  2 | title2 | body2 |\n| 12 | title1 | body3 |\n| 13 | title1 | body4 |\n| 14 | NULL   | body5 |\n+----+--------+-------+\n```\n\n# concat\n\n使用方法：\n\n```\n\tCONCAT(str1,str2,...)\n```\n\n返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.\n\nEXAMPLE:\n\n```\nmysql> select concat(id, '-', title, '-', body) from news ;\n+-----------------------------------+\n| concat(id, '-', title, '-', body) |\n+-----------------------------------+\n| NULL                              |\n| 2-title2-body2                    |\n| 12-title1-body3                   |\n| 13-title1-body4                   |\n| NULL                              |\n+-----------------------------------+\n```\n\n# concat_ws\n\n使用方法：\n\n```\n\tCONCAT_WS(separator,str1,str2,...)\n```\n\nconcat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过\n\nEXAMPLE:\n\n```\nmysql> select concat_ws('-', title, body) from news ;\n+-----------------------------+\n| concat_ws('-', title, body) |\n+-----------------------------+\n| title1                      |\n| title2-body2                |\n| title1-body3                |\n| title1-body4                |\n| body5                       |\n+-----------------------------+\n```\n\n# group_concat\n\n使用方法\n\n```\n\tGROUP_CONCAT([DISTINCT] Field [ORDER BY ASC/DESC SortField] [separator Separator])\n```\n\ngroup_concat是把结果数据按字段Field连接起来，默认分隔符是`,`,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。\n\nEXAMPLE:\n\n```\nmysql> select group_concat(title) from news ;\n+-----------------------------+\n| group_concat(title)         |\n+-----------------------------+\n| title1,title2,title1,title1 |\n+-----------------------------+\n```\n\n```\nmysql> select group_concat(distinct title order by id desc separator ';') from news ;\n+-------------------------------------------------------------+\n| group_concat(distinct title order by id desc separator ';') |\n+-------------------------------------------------------------+\n| title2;title1                                               |\n+-------------------------------------------------------------+\n```\n\n```\nmysql> select title,group_concat(distinct body order by id desc separator ';') from news group by title;\n+--------+------------------------------------------------------------+\n| title  | group_concat(distinct body order by id desc separator ';') |\n+--------+------------------------------------------------------------+\n| NULL   | body5                                                      |\n| title1 | body4;body3                                                |\n| title2 | body2                                                      |\n+--------+------------------------------------------------------------+\n```\n\n# repeat\n\n使用方法\n\n```\nrepeat(str, repeatTime)\n```\n\n将str循环repeatTime次\n\nEXAMPLE\n\n```\nmysql> select repeat('test', 4);\n+-------------------+\n| repeat('test', 4) |\n+-------------------+\n| testtesttesttest  |\n+-------------------+\n```\n\n```\nmysql> select repeat(body, 4) from news;\n+----------------------+\n| repeat(body, 4)      |\n+----------------------+\n| NULL                 |\n| body2body2body2body2 |\n| body3body3body3body3 |\n| body4body4body4body4 |\n| body5body5body5body5 |\n+----------------------+\n```","source":"_posts/mysql/mysql-strimg.md","raw":"title: mysql 字符串函数  \ndate: 2016-05-22 22:58:20  \ncategories: mysql  \ntags: mysql  \n\n---\n\n# test table\n\n使用一个测试表：\n\n```\nmysql> select * from news ;\n+----+--------+-------+\n| id | title  | body  |\n+----+--------+-------+\n|  1 | title1 | NULL  |\n|  2 | title2 | body2 |\n| 12 | title1 | body3 |\n| 13 | title1 | body4 |\n| 14 | NULL   | body5 |\n+----+--------+-------+\n```\n\n# concat\n\n使用方法：\n\n```\n\tCONCAT(str1,str2,...)\n```\n\n返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.\n\nEXAMPLE:\n\n```\nmysql> select concat(id, '-', title, '-', body) from news ;\n+-----------------------------------+\n| concat(id, '-', title, '-', body) |\n+-----------------------------------+\n| NULL                              |\n| 2-title2-body2                    |\n| 12-title1-body3                   |\n| 13-title1-body4                   |\n| NULL                              |\n+-----------------------------------+\n```\n\n# concat_ws\n\n使用方法：\n\n```\n\tCONCAT_WS(separator,str1,str2,...)\n```\n\nconcat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过\n\nEXAMPLE:\n\n```\nmysql> select concat_ws('-', title, body) from news ;\n+-----------------------------+\n| concat_ws('-', title, body) |\n+-----------------------------+\n| title1                      |\n| title2-body2                |\n| title1-body3                |\n| title1-body4                |\n| body5                       |\n+-----------------------------+\n```\n\n# group_concat\n\n使用方法\n\n```\n\tGROUP_CONCAT([DISTINCT] Field [ORDER BY ASC/DESC SortField] [separator Separator])\n```\n\ngroup_concat是把结果数据按字段Field连接起来，默认分隔符是`,`,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。\n\nEXAMPLE:\n\n```\nmysql> select group_concat(title) from news ;\n+-----------------------------+\n| group_concat(title)         |\n+-----------------------------+\n| title1,title2,title1,title1 |\n+-----------------------------+\n```\n\n```\nmysql> select group_concat(distinct title order by id desc separator ';') from news ;\n+-------------------------------------------------------------+\n| group_concat(distinct title order by id desc separator ';') |\n+-------------------------------------------------------------+\n| title2;title1                                               |\n+-------------------------------------------------------------+\n```\n\n```\nmysql> select title,group_concat(distinct body order by id desc separator ';') from news group by title;\n+--------+------------------------------------------------------------+\n| title  | group_concat(distinct body order by id desc separator ';') |\n+--------+------------------------------------------------------------+\n| NULL   | body5                                                      |\n| title1 | body4;body3                                                |\n| title2 | body2                                                      |\n+--------+------------------------------------------------------------+\n```\n\n# repeat\n\n使用方法\n\n```\nrepeat(str, repeatTime)\n```\n\n将str循环repeatTime次\n\nEXAMPLE\n\n```\nmysql> select repeat('test', 4);\n+-------------------+\n| repeat('test', 4) |\n+-------------------+\n| testtesttesttest  |\n+-------------------+\n```\n\n```\nmysql> select repeat(body, 4) from news;\n+----------------------+\n| repeat(body, 4)      |\n+----------------------+\n| NULL                 |\n| body2body2body2body2 |\n| body3body3body3body3 |\n| body4body4body4body4 |\n| body5body5body5body5 |\n+----------------------+\n```","slug":"mysql/mysql-strimg","published":1,"updated":"2021-08-09T06:15:05.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7ph003ii9skj7z5594l","content":"<h1 id=\"test_table\"><a href=\"#test_table\" class=\"headerlink\" title=\"test table\"></a>test table</h1><p>使用一个测试表：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from news ;</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">| id | title  | body  |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">|  1 | title1 | NULL  |</span><br><span class=\"line\">|  2 | title2 | body2 |</span><br><span class=\"line\">| 12 | title1 | body3 |</span><br><span class=\"line\">| 13 | title1 | body4 |</span><br><span class=\"line\">| 14 | NULL   | body5 |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h1><p>使用方法：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">CONCAT</span>(<span class=\"params\">str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure>\n<p>返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select concat(id, <span class=\"emphasis\">'-'</span>, title, <span class=\"emphasis\">'-'</span>, body) from news ;</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br><span class=\"line\">| concat(id, <span class=\"emphasis\">'-'</span>, title, <span class=\"emphasis\">'-'</span>, body) |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br><span class=\"line\">| NULL                              |</span><br><span class=\"line\">| 2-title2-body2                    |</span><br><span class=\"line\">| 12-title1-body3                   |</span><br><span class=\"line\">| 13-title1-body4                   |</span><br><span class=\"line\">| NULL                              |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"concat_ws\"><a href=\"#concat_ws\" class=\"headerlink\" title=\"concat_ws\"></a>concat_ws</h1><p>使用方法：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">CONCAT_WS</span>(<span class=\"params\">separator,str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure>\n<p>concat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select concat<span class=\"emphasis\">_ws('-', title, body) from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-----------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| concat_</span>ws(<span class=\"emphasis\">'-'</span>, title, body) |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br><span class=\"line\">| title1                      |</span><br><span class=\"line\">| title2-body2                |</span><br><span class=\"line\">| title1-body3                |</span><br><span class=\"line\">| title1-body4                |</span><br><span class=\"line\">| body5                       |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"group_concat\"><a href=\"#group_concat\" class=\"headerlink\" title=\"group_concat\"></a>group_concat</h1><p>使用方法</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\">GROUP_CONCAT([<span class=\"keyword\">DISTINCT</span>] Field [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ASC</span>/<span class=\"keyword\">DESC</span> SortField] [separator Separator])</span><br></pre></td></tr></table></figure>\n<p>group_concat是把结果数据按字段Field连接起来，默认分隔符是<code>,</code>,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select group<span class=\"emphasis\">_concat(title) from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-----------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| group_</span>concat(title)         |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br><span class=\"line\">| title1,title2,title1,title1 |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select group<span class=\"emphasis\">_concat(distinct title order by id desc separator ';') from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| group_</span>concat(distinct title order by id desc separator <span class=\"emphasis\">';'</span>) |</span><br><span class=\"line\"><span class=\"code\">+-------------------------------------------------------------+</span></span><br><span class=\"line\">| title2;title1                                               |</span><br><span class=\"line\"><span class=\"code\">+-------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select title,group<span class=\"emphasis\">_concat(distinct body order by id desc separator ';') from news group by title;</span></span><br><span class=\"line\"><span class=\"emphasis\">+--------+------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| title  | group_</span>concat(distinct body order by id desc separator <span class=\"emphasis\">';'</span>) |</span><br><span class=\"line\"><span class=\"code\">+--------+</span>------------------------------------------------------------+</span><br><span class=\"line\">| NULL   | body5                                                      |</span><br><span class=\"line\">| title1 | body4;body3                                                |</span><br><span class=\"line\">| title2 | body2                                                      |</span><br><span class=\"line\"><span class=\"code\">+--------+</span>------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h1><p>使用方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">repeat</span><span class=\"params\">(str, repeatTime)</span></span></span><br></pre></td></tr></table></figure>\n<p>将str循环repeatTime次</p>\n<p>EXAMPLE</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select repeat(<span class=\"emphasis\">'test'</span>, 4);</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br><span class=\"line\">| repeat(<span class=\"emphasis\">'test'</span>, 4) |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br><span class=\"line\">| testtesttesttest  |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select repeat(body, 4) from news;</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br><span class=\"line\">| repeat(body, 4)      |</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br><span class=\"line\">| NULL                 |</span><br><span class=\"line\">| body2body2body2body2 |</span><br><span class=\"line\">| body3body3body3body3 |</span><br><span class=\"line\">| body4body4body4body4 |</span><br><span class=\"line\">| body5body5body5body5 |</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"test_table\"><a href=\"#test_table\" class=\"headerlink\" title=\"test table\"></a>test table</h1><p>使用一个测试表：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from news ;</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">| id | title  | body  |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br><span class=\"line\">|  1 | title1 | NULL  |</span><br><span class=\"line\">|  2 | title2 | body2 |</span><br><span class=\"line\">| 12 | title1 | body3 |</span><br><span class=\"line\">| 13 | title1 | body4 |</span><br><span class=\"line\">| 14 | NULL   | body5 |</span><br><span class=\"line\"><span class=\"code\">+----+</span>--------<span class=\"code\">+-------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h1><p>使用方法：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">CONCAT</span>(<span class=\"params\">str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure>\n<p>返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select concat(id, <span class=\"emphasis\">'-'</span>, title, <span class=\"emphasis\">'-'</span>, body) from news ;</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br><span class=\"line\">| concat(id, <span class=\"emphasis\">'-'</span>, title, <span class=\"emphasis\">'-'</span>, body) |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br><span class=\"line\">| NULL                              |</span><br><span class=\"line\">| 2-title2-body2                    |</span><br><span class=\"line\">| 12-title1-body3                   |</span><br><span class=\"line\">| 13-title1-body4                   |</span><br><span class=\"line\">| NULL                              |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"concat_ws\"><a href=\"#concat_ws\" class=\"headerlink\" title=\"concat_ws\"></a>concat_ws</h1><p>使用方法：</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">CONCAT_WS</span>(<span class=\"params\">separator,str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure>\n<p>concat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select concat<span class=\"emphasis\">_ws('-', title, body) from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-----------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| concat_</span>ws(<span class=\"emphasis\">'-'</span>, title, body) |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br><span class=\"line\">| title1                      |</span><br><span class=\"line\">| title2-body2                |</span><br><span class=\"line\">| title1-body3                |</span><br><span class=\"line\">| title1-body4                |</span><br><span class=\"line\">| body5                       |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"group_concat\"><a href=\"#group_concat\" class=\"headerlink\" title=\"group_concat\"></a>group_concat</h1><p>使用方法</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\">GROUP_CONCAT([<span class=\"keyword\">DISTINCT</span>] Field [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ASC</span>/<span class=\"keyword\">DESC</span> SortField] [separator Separator])</span><br></pre></td></tr></table></figure>\n<p>group_concat是把结果数据按字段Field连接起来，默认分隔符是<code>,</code>,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。</p>\n<p>EXAMPLE:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select group<span class=\"emphasis\">_concat(title) from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-----------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| group_</span>concat(title)         |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br><span class=\"line\">| title1,title2,title1,title1 |</span><br><span class=\"line\"><span class=\"code\">+-----------------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select group<span class=\"emphasis\">_concat(distinct title order by id desc separator ';') from news ;</span></span><br><span class=\"line\"><span class=\"emphasis\">+-------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| group_</span>concat(distinct title order by id desc separator <span class=\"emphasis\">';'</span>) |</span><br><span class=\"line\"><span class=\"code\">+-------------------------------------------------------------+</span></span><br><span class=\"line\">| title2;title1                                               |</span><br><span class=\"line\"><span class=\"code\">+-------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select title,group<span class=\"emphasis\">_concat(distinct body order by id desc separator ';') from news group by title;</span></span><br><span class=\"line\"><span class=\"emphasis\">+--------+------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| title  | group_</span>concat(distinct body order by id desc separator <span class=\"emphasis\">';'</span>) |</span><br><span class=\"line\"><span class=\"code\">+--------+</span>------------------------------------------------------------+</span><br><span class=\"line\">| NULL   | body5                                                      |</span><br><span class=\"line\">| title1 | body4;body3                                                |</span><br><span class=\"line\">| title2 | body2                                                      |</span><br><span class=\"line\"><span class=\"code\">+--------+</span>------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n<h1 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h1><p>使用方法</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">repeat</span><span class=\"params\">(str, repeatTime)</span></span></span><br></pre></td></tr></table></figure>\n<p>将str循环repeatTime次</p>\n<p>EXAMPLE</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select repeat(<span class=\"emphasis\">'test'</span>, 4);</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br><span class=\"line\">| repeat(<span class=\"emphasis\">'test'</span>, 4) |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br><span class=\"line\">| testtesttesttest  |</span><br><span class=\"line\"><span class=\"code\">+-------------------+</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select repeat(body, 4) from news;</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br><span class=\"line\">| repeat(body, 4)      |</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br><span class=\"line\">| NULL                 |</span><br><span class=\"line\">| body2body2body2body2 |</span><br><span class=\"line\">| body3body3body3body3 |</span><br><span class=\"line\">| body4body4body4body4 |</span><br><span class=\"line\">| body5body5body5body5 |</span><br><span class=\"line\"><span class=\"code\">+----------------------+</span></span><br></pre></td></tr></table></figure>","sticky":0},{"title":"设置HOMEBREW_GITHUB_API_TOKEN","date":"2015-10-01T12:50:00.000Z","_content":"\n在使用brew工具时，报了以下错误,github API 访问的权限限制:\n\n```\nError:GitHub API rate limit exceeded for [xxxx]. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\nTry again in 5 minutes 54 seconds, or create an personal access token:\n  https://github.com/settings/tokens\nand then set the token as: HOMEBREW_GITHUB_API_TOKEN\n```\n\n解决：\n\n按照报错说明\n\n首先打开  [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)\n\n登陆后，输入Homebrew，生成token\n\n设置环境变量HOMEBREW_GITHUB_API_TOKEN：\n\n将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:\n\n```\n\t$ export HOMEBREW_GITHUB_API_TOKEN=XXXXXXXXXX\n```","source":"_posts/macos/brew-token.md","raw":"title: 设置HOMEBREW_GITHUB_API_TOKEN\ndate: 2015-10-01 20:50\ncategories: Mac\ntags: homebrew\n---\n\n在使用brew工具时，报了以下错误,github API 访问的权限限制:\n\n```\nError:GitHub API rate limit exceeded for [xxxx]. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\nTry again in 5 minutes 54 seconds, or create an personal access token:\n  https://github.com/settings/tokens\nand then set the token as: HOMEBREW_GITHUB_API_TOKEN\n```\n\n解决：\n\n按照报错说明\n\n首先打开  [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)\n\n登陆后，输入Homebrew，生成token\n\n设置环境变量HOMEBREW_GITHUB_API_TOKEN：\n\n将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:\n\n```\n\t$ export HOMEBREW_GITHUB_API_TOKEN=XXXXXXXXXX\n```","slug":"macos/brew-token","published":1,"updated":"2022-03-18T08:28:51.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pi003li9sk9virk9oi","content":"<p>在使用brew工具时，报了以下错误,github API 访问的权限限制:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Error</span>:GitHub API rate limit exceeded <span class=\"keyword\">for</span> [xxxx]. (But here's the good <span class=\"keyword\">news</span>: Authenticated requests get a higher rate limit. Check <span class=\"keyword\">out</span> the documentation <span class=\"keyword\">for</span> <span class=\"keyword\">more</span> details.)</span><br><span class=\"line\">Try again <span class=\"keyword\">in</span> 5 minutes 54 seconds, or create <span class=\"keyword\">an</span> <span class=\"keyword\">personal</span> access <span class=\"keyword\">token</span>:</span><br><span class=\"line\">  https:<span class=\"comment\">//github.com/settings/tokens</span></span><br><span class=\"line\">and then <span class=\"keyword\">set</span> the <span class=\"keyword\">token</span> <span class=\"keyword\">as</span>: HOMEBREW_GITHUB_API_TOKEN</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<p>按照报错说明</p>\n<p>首先打开  <a href=\"https://github.com/settings/tokens/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/tokens/new</a></p>\n<p>登陆后，输入Homebrew，生成token</p>\n<p>设置环境变量HOMEBREW_GITHUB_API_TOKEN：</p>\n<p>将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">export</span> <span class=\"attribute\">HOMEBREW_GITHUB_API_TOKEN</span>=XXXXXXXXXX</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在使用brew工具时，报了以下错误,github API 访问的权限限制:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Error</span>:GitHub API rate limit exceeded <span class=\"keyword\">for</span> [xxxx]. (But here's the good <span class=\"keyword\">news</span>: Authenticated requests get a higher rate limit. Check <span class=\"keyword\">out</span> the documentation <span class=\"keyword\">for</span> <span class=\"keyword\">more</span> details.)</span><br><span class=\"line\">Try again <span class=\"keyword\">in</span> 5 minutes 54 seconds, or create <span class=\"keyword\">an</span> <span class=\"keyword\">personal</span> access <span class=\"keyword\">token</span>:</span><br><span class=\"line\">  https:<span class=\"comment\">//github.com/settings/tokens</span></span><br><span class=\"line\">and then <span class=\"keyword\">set</span> the <span class=\"keyword\">token</span> <span class=\"keyword\">as</span>: HOMEBREW_GITHUB_API_TOKEN</span><br></pre></td></tr></table></figure>\n<p>解决：</p>\n<p>按照报错说明</p>\n<p>首先打开  <a href=\"https://github.com/settings/tokens/new\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/tokens/new</a></p>\n<p>登陆后，输入Homebrew，生成token</p>\n<p>设置环境变量HOMEBREW_GITHUB_API_TOKEN：</p>\n<p>将HOMEBREW_GITHUB_API_TOKEN变量设置为获取到的token就可正常使用brew的api了:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"builtin-name\">export</span> <span class=\"attribute\">HOMEBREW_GITHUB_API_TOKEN</span>=XXXXXXXXXX</span><br></pre></td></tr></table></figure>","sticky":0},{"title":"使用mysqlslap回放Mysql流量","date":"2022-04-09T09:40:00.000Z","_content":"\n\n# 背景\n\n## mysqlslap简介\n\n`mysqlslap` 是 MySQL 从 5.1.4 版开始官方自带的一个压力测试工具。\n\n功能：它通过模拟多个并发客户端访问 MySQL 来执行压力测试，我们通过结果信息可以了解数据库的性能状况。\n\n## 适用场景\n\n* 优化了操作系统的内核参数后，是否提升了性能\n* 优化了Mysql参数，性能变化\n* 服务器的硬件资源能够支持多大的访问压力\n\n# 压测流程\n\n## 流量录制\n\n打开原Mysql服务的`general log`，录制一定时间的流量\n\n注意：\n* `general log`的开启会增加Mysql的io压力，造成一定的性能下降，请选择适当的时间，且注意观察服务器压力\n\n## 回放文件梳理\n\n### 筛选出SQL部分的内容\n\n回放需要的文件是一行一个sql，而`general log`里我们只需要Query部分的内容，如：\n\n```\n220408 14:35:13 1150499963 Query        UPDATE `m_user` SET `status` = '1' WHERE uid = 3\n                1781571137 Quit\n                1781571146 Connect      root@127.0.0.1 on db_test\n                1781571120 Init DB      db_test\n                \n```\n\n### 去掉换行、注释等字符\n\n筛选完Query，还可能有换行的SQL，或带注释的SQL，这种需要拼接回一行，并去掉注释\n\n```\n1792900537 Query        SELECT uid,user_name  --field注释部分\n                        FROM m_user\n                        WHERE uid = 2 \n                        LIMIT 1\n```\n\n### 补充库名\n\n如果测试的实例有多个库，会更加麻烦一些，需要在梳理的时候可以根据表名补充回sql\n\n## 流量回放\n\n### 命令与参数\n\n我们最终得到一个sql文件，接着我们就可以开始压测了\n\n具体命令如下：\n```\nsudo /usr/local/mysql/bin/mysqlslap --no-defaults -h127.0.0.1 -P3306 -utest_mysqlslap -p'123456'  --concurrency=600 --iterations=2 --create-schema=test_db --query=/data/general_out.log --number-of-queries=80000000 -T\n```\n\n参数含义\n\n* --no-defaults   必须加在参数第一位，不然会报`unknown variable 'default-character-set=utf8`\n* -h 待测试实例host\n* -P 待测试实例端口\n* -u 待测试实例账号\n* -p 待测试实例密码\n* --concurrency 并发线程数\n* --iterations 重复次数，按多次计算平均数\n* --create-schema  指定测试的库\n* --query 可以是sql语句，也可以是个sql文件，我们这里用的是文件模式\n* --number-of-queries 请求次数，所有sql请求的次数，比如sql文件里有200个sql，`number-of-queries`指定100时，会只执行到一半就停止，指定300时，会执行完200个再重新跑100\n\n### 结果\n\n```\nBenchmark\n        Average number of seconds to run all queries: 672.956 seconds\n        Minimum number of seconds to run all queries: 672.341 seconds\n        Maximum number of seconds to run all queries: 673.571 seconds\n        Number of clients running queries: 600\n        Average number of queries per client: 133333\n\n\nUser time 1503.60, System time 3036.06\nMaximum resident set size 9077056, Integral resident set size 0\nNon-physical pagefaults 4343854, Physical pagefaults 19, Swaps 0\nBlocks in 4262400 out 8, Messages in 0 out 0, Signals 0\nVoluntary context switches 161188899, Involuntary context switches 5020\n```\n\n从结果看，执行80000000 个sql的平均时间是672.956秒，得出qps差不多119047.6，具体的硬件cpu、io、负载，可以看对应实例的监控\n\n### 并发写锁\n\n因为我们设置了600个`concurrency`并发数，所以一些原本串行更新可能变为并发更新，导致产生并发锁：\n\n```\n/usr/local/mysql/bin/mysqlslap: Cannot run query UPDATE `m_user` SET `status`=1 WHERE `uid`=235 ERROR : Lock wait timeout exceeded; try restarting transaction\n```\n\n这时可以按sql类型拆分sql文件，把`select`和`update`、`insert`、`delete`分出不同文件。通过开多个mysqlslap进程来压测\n","source":"_posts/mysql/mysqlslap.md","raw":"title: 使用mysqlslap回放Mysql流量\ndate: 2022-04-09 17:40\ncategories: mysql\ntags: mysql\n\n---\n\n\n# 背景\n\n## mysqlslap简介\n\n`mysqlslap` 是 MySQL 从 5.1.4 版开始官方自带的一个压力测试工具。\n\n功能：它通过模拟多个并发客户端访问 MySQL 来执行压力测试，我们通过结果信息可以了解数据库的性能状况。\n\n## 适用场景\n\n* 优化了操作系统的内核参数后，是否提升了性能\n* 优化了Mysql参数，性能变化\n* 服务器的硬件资源能够支持多大的访问压力\n\n# 压测流程\n\n## 流量录制\n\n打开原Mysql服务的`general log`，录制一定时间的流量\n\n注意：\n* `general log`的开启会增加Mysql的io压力，造成一定的性能下降，请选择适当的时间，且注意观察服务器压力\n\n## 回放文件梳理\n\n### 筛选出SQL部分的内容\n\n回放需要的文件是一行一个sql，而`general log`里我们只需要Query部分的内容，如：\n\n```\n220408 14:35:13 1150499963 Query        UPDATE `m_user` SET `status` = '1' WHERE uid = 3\n                1781571137 Quit\n                1781571146 Connect      root@127.0.0.1 on db_test\n                1781571120 Init DB      db_test\n                \n```\n\n### 去掉换行、注释等字符\n\n筛选完Query，还可能有换行的SQL，或带注释的SQL，这种需要拼接回一行，并去掉注释\n\n```\n1792900537 Query        SELECT uid,user_name  --field注释部分\n                        FROM m_user\n                        WHERE uid = 2 \n                        LIMIT 1\n```\n\n### 补充库名\n\n如果测试的实例有多个库，会更加麻烦一些，需要在梳理的时候可以根据表名补充回sql\n\n## 流量回放\n\n### 命令与参数\n\n我们最终得到一个sql文件，接着我们就可以开始压测了\n\n具体命令如下：\n```\nsudo /usr/local/mysql/bin/mysqlslap --no-defaults -h127.0.0.1 -P3306 -utest_mysqlslap -p'123456'  --concurrency=600 --iterations=2 --create-schema=test_db --query=/data/general_out.log --number-of-queries=80000000 -T\n```\n\n参数含义\n\n* --no-defaults   必须加在参数第一位，不然会报`unknown variable 'default-character-set=utf8`\n* -h 待测试实例host\n* -P 待测试实例端口\n* -u 待测试实例账号\n* -p 待测试实例密码\n* --concurrency 并发线程数\n* --iterations 重复次数，按多次计算平均数\n* --create-schema  指定测试的库\n* --query 可以是sql语句，也可以是个sql文件，我们这里用的是文件模式\n* --number-of-queries 请求次数，所有sql请求的次数，比如sql文件里有200个sql，`number-of-queries`指定100时，会只执行到一半就停止，指定300时，会执行完200个再重新跑100\n\n### 结果\n\n```\nBenchmark\n        Average number of seconds to run all queries: 672.956 seconds\n        Minimum number of seconds to run all queries: 672.341 seconds\n        Maximum number of seconds to run all queries: 673.571 seconds\n        Number of clients running queries: 600\n        Average number of queries per client: 133333\n\n\nUser time 1503.60, System time 3036.06\nMaximum resident set size 9077056, Integral resident set size 0\nNon-physical pagefaults 4343854, Physical pagefaults 19, Swaps 0\nBlocks in 4262400 out 8, Messages in 0 out 0, Signals 0\nVoluntary context switches 161188899, Involuntary context switches 5020\n```\n\n从结果看，执行80000000 个sql的平均时间是672.956秒，得出qps差不多119047.6，具体的硬件cpu、io、负载，可以看对应实例的监控\n\n### 并发写锁\n\n因为我们设置了600个`concurrency`并发数，所以一些原本串行更新可能变为并发更新，导致产生并发锁：\n\n```\n/usr/local/mysql/bin/mysqlslap: Cannot run query UPDATE `m_user` SET `status`=1 WHERE `uid`=235 ERROR : Lock wait timeout exceeded; try restarting transaction\n```\n\n这时可以按sql类型拆分sql文件，把`select`和`update`、`insert`、`delete`分出不同文件。通过开多个mysqlslap进程来压测\n","slug":"mysql/mysqlslap","published":1,"updated":"2022-04-10T10:40:48.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pi003oi9sk97ohchr1","content":"<h1 id=\"u80CC_u666F\"><a href=\"#u80CC_u666F\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h2 id=\"mysqlslap_u7B80_u4ECB\"><a href=\"#mysqlslap_u7B80_u4ECB\" class=\"headerlink\" title=\"mysqlslap简介\"></a>mysqlslap简介</h2><p><code>mysqlslap</code> 是 MySQL 从 5.1.4 版开始官方自带的一个压力测试工具。</p>\n<p>功能：它通过模拟多个并发客户端访问 MySQL 来执行压力测试，我们通过结果信息可以了解数据库的性能状况。</p>\n<h2 id=\"u9002_u7528_u573A_u666F\"><a href=\"#u9002_u7528_u573A_u666F\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>优化了操作系统的内核参数后，是否提升了性能</li>\n<li>优化了Mysql参数，性能变化</li>\n<li>服务器的硬件资源能够支持多大的访问压力</li>\n</ul>\n<h1 id=\"u538B_u6D4B_u6D41_u7A0B\"><a href=\"#u538B_u6D4B_u6D41_u7A0B\" class=\"headerlink\" title=\"压测流程\"></a>压测流程</h1><h2 id=\"u6D41_u91CF_u5F55_u5236\"><a href=\"#u6D41_u91CF_u5F55_u5236\" class=\"headerlink\" title=\"流量录制\"></a>流量录制</h2><p>打开原Mysql服务的<code>general log</code>，录制一定时间的流量</p>\n<p>注意：</p>\n<ul>\n<li><code>general log</code>的开启会增加Mysql的io压力，造成一定的性能下降，请选择适当的时间，且注意观察服务器压力</li>\n</ul>\n<h2 id=\"u56DE_u653E_u6587_u4EF6_u68B3_u7406\"><a href=\"#u56DE_u653E_u6587_u4EF6_u68B3_u7406\" class=\"headerlink\" title=\"回放文件梳理\"></a>回放文件梳理</h2><h3 id=\"u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9\"><a href=\"#u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9\" class=\"headerlink\" title=\"筛选出SQL部分的内容\"></a>筛选出SQL部分的内容</h3><p>回放需要的文件是一行一个sql，而<code>general log</code>里我们只需要Query部分的内容，如：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">220408 14:35:13 1150499963 Query        <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`m_user`</span> <span class=\"keyword\">SET</span> <span class=\"symbol\">`status`</span> = <span class=\"string\">'1'</span> <span class=\"keyword\">WHERE</span> uid = <span class=\"number\">3</span></span><br><span class=\"line\">                <span class=\"number\">1781571137</span> Quit</span><br><span class=\"line\">                <span class=\"number\">1781571146</span> <span class=\"keyword\">Connect</span>      root@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"keyword\">on</span> db_test</span><br><span class=\"line\">                <span class=\"number\">1781571120</span> Init DB      db_test</span><br></pre></td></tr></table></figure>\n<h3 id=\"u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26\"><a href=\"#u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26\" class=\"headerlink\" title=\"去掉换行、注释等字符\"></a>去掉换行、注释等字符</h3><p>筛选完Query，还可能有换行的SQL，或带注释的SQL，这种需要拼接回一行，并去掉注释</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">1792900537 Query        <span class=\"keyword\">SELECT</span> uid,user_name  <span class=\"comment\">--field注释部分</span></span><br><span class=\"line\">                        <span class=\"keyword\">FROM</span> m_user</span><br><span class=\"line\">                        <span class=\"keyword\">WHERE</span> uid = <span class=\"number\">2</span> </span><br><span class=\"line\">                        <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u8865_u5145_u5E93_u540D\"><a href=\"#u8865_u5145_u5E93_u540D\" class=\"headerlink\" title=\"补充库名\"></a>补充库名</h3><p>如果测试的实例有多个库，会更加麻烦一些，需要在梳理的时候可以根据表名补充回sql</p>\n<h2 id=\"u6D41_u91CF_u56DE_u653E\"><a href=\"#u6D41_u91CF_u56DE_u653E\" class=\"headerlink\" title=\"流量回放\"></a>流量回放</h2><h3 id=\"u547D_u4EE4_u4E0E_u53C2_u6570\"><a href=\"#u547D_u4EE4_u4E0E_u53C2_u6570\" class=\"headerlink\" title=\"命令与参数\"></a>命令与参数</h3><p>我们最终得到一个sql文件，接着我们就可以开始压测了</p>\n<p>具体命令如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/bin/mysqlslap --no-defaults -h127.0.0.1 -P3306 -utest_mysqlslap -p<span class=\"string\">'123456'</span>  <span class=\"attribute\">--concurrency</span>=600 <span class=\"attribute\">--iterations</span>=2 <span class=\"attribute\">--create-schema</span>=test_db <span class=\"attribute\">--query</span>=/data/general_out.log <span class=\"attribute\">--number-of-queries</span>=80000000 -T</span><br></pre></td></tr></table></figure></p>\n<p>参数含义</p>\n<ul>\n<li>–no-defaults   必须加在参数第一位，不然会报<code>unknown variable &#39;default-character-set=utf8</code></li>\n<li>-h 待测试实例host</li>\n<li>-P 待测试实例端口</li>\n<li>-u 待测试实例账号</li>\n<li>-p 待测试实例密码</li>\n<li>–concurrency 并发线程数</li>\n<li>–iterations 重复次数，按多次计算平均数</li>\n<li>–create-schema  指定测试的库</li>\n<li>–query 可以是sql语句，也可以是个sql文件，我们这里用的是文件模式</li>\n<li>–number-of-queries 请求次数，所有sql请求的次数，比如sql文件里有200个sql，<code>number-of-queries</code>指定100时，会只执行到一半就停止，指定300时，会执行完200个再重新跑100</li>\n</ul>\n<h3 id=\"u7ED3_u679C\"><a href=\"#u7ED3_u679C\" class=\"headerlink\" title=\"结果\"></a>结果</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">Benchmark</span><br><span class=\"line\">        Average number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 672.956 seconds</span><br><span class=\"line\">        Minimum number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 672.341 seconds</span><br><span class=\"line\">        Maximum number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 673.571 seconds</span><br><span class=\"line\">        Number of clients running queries: 600</span><br><span class=\"line\">        Average number of queries per client: 133333</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">User time 1503.60,<span class=\"built_in\"> System </span>time 3036.06</span><br><span class=\"line\">Maximum resident <span class=\"builtin-name\">set</span> size 9077056, Integral resident <span class=\"builtin-name\">set</span> size 0</span><br><span class=\"line\">Non-physical pagefaults 4343854, Physical pagefaults 19, Swaps 0</span><br><span class=\"line\">Blocks <span class=\"keyword\">in</span> 4262400 out 8, Messages <span class=\"keyword\">in</span> 0 out 0, Signals 0</span><br><span class=\"line\">Voluntary context switches 161188899, Involuntary context switches 5020</span><br></pre></td></tr></table></figure>\n<p>从结果看，执行80000000 个sql的平均时间是672.956秒，得出qps差不多119047.6，具体的硬件cpu、io、负载，可以看对应实例的监控</p>\n<h3 id=\"u5E76_u53D1_u5199_u9501\"><a href=\"#u5E76_u53D1_u5199_u9501\" class=\"headerlink\" title=\"并发写锁\"></a>并发写锁</h3><p>因为我们设置了600个<code>concurrency</code>并发数，所以一些原本串行更新可能变为并发更新，导致产生并发锁：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/mysql/bin/mysqlslap: Cannot run query <span class=\"keyword\">UPDATE</span> <span class=\"string\">`m_user`</span> <span class=\"keyword\">SET</span> <span class=\"string\">`status`</span>=<span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> <span class=\"string\">`uid`</span>=<span class=\"number\">235</span> <span class=\"keyword\">ERROR</span> : <span class=\"keyword\">Lock</span> <span class=\"keyword\">wait</span> <span class=\"keyword\">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure>\n<p>这时可以按sql类型拆分sql文件，把<code>select</code>和<code>update</code>、<code>insert</code>、<code>delete</code>分出不同文件。通过开多个mysqlslap进程来压测</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"u80CC_u666F\"><a href=\"#u80CC_u666F\" class=\"headerlink\" title=\"背景\"></a>背景</h1><h2 id=\"mysqlslap_u7B80_u4ECB\"><a href=\"#mysqlslap_u7B80_u4ECB\" class=\"headerlink\" title=\"mysqlslap简介\"></a>mysqlslap简介</h2><p><code>mysqlslap</code> 是 MySQL 从 5.1.4 版开始官方自带的一个压力测试工具。</p>\n<p>功能：它通过模拟多个并发客户端访问 MySQL 来执行压力测试，我们通过结果信息可以了解数据库的性能状况。</p>\n<h2 id=\"u9002_u7528_u573A_u666F\"><a href=\"#u9002_u7528_u573A_u666F\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>优化了操作系统的内核参数后，是否提升了性能</li>\n<li>优化了Mysql参数，性能变化</li>\n<li>服务器的硬件资源能够支持多大的访问压力</li>\n</ul>\n<h1 id=\"u538B_u6D4B_u6D41_u7A0B\"><a href=\"#u538B_u6D4B_u6D41_u7A0B\" class=\"headerlink\" title=\"压测流程\"></a>压测流程</h1><h2 id=\"u6D41_u91CF_u5F55_u5236\"><a href=\"#u6D41_u91CF_u5F55_u5236\" class=\"headerlink\" title=\"流量录制\"></a>流量录制</h2><p>打开原Mysql服务的<code>general log</code>，录制一定时间的流量</p>\n<p>注意：</p>\n<ul>\n<li><code>general log</code>的开启会增加Mysql的io压力，造成一定的性能下降，请选择适当的时间，且注意观察服务器压力</li>\n</ul>\n<h2 id=\"u56DE_u653E_u6587_u4EF6_u68B3_u7406\"><a href=\"#u56DE_u653E_u6587_u4EF6_u68B3_u7406\" class=\"headerlink\" title=\"回放文件梳理\"></a>回放文件梳理</h2><h3 id=\"u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9\"><a href=\"#u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9\" class=\"headerlink\" title=\"筛选出SQL部分的内容\"></a>筛选出SQL部分的内容</h3><p>回放需要的文件是一行一个sql，而<code>general log</code>里我们只需要Query部分的内容，如：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\">220408 14:35:13 1150499963 Query        <span class=\"keyword\">UPDATE</span> <span class=\"symbol\">`m_user`</span> <span class=\"keyword\">SET</span> <span class=\"symbol\">`status`</span> = <span class=\"string\">'1'</span> <span class=\"keyword\">WHERE</span> uid = <span class=\"number\">3</span></span><br><span class=\"line\">                <span class=\"number\">1781571137</span> Quit</span><br><span class=\"line\">                <span class=\"number\">1781571146</span> <span class=\"keyword\">Connect</span>      root@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> <span class=\"keyword\">on</span> db_test</span><br><span class=\"line\">                <span class=\"number\">1781571120</span> Init DB      db_test</span><br></pre></td></tr></table></figure>\n<h3 id=\"u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26\"><a href=\"#u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26\" class=\"headerlink\" title=\"去掉换行、注释等字符\"></a>去掉换行、注释等字符</h3><p>筛选完Query，还可能有换行的SQL，或带注释的SQL，这种需要拼接回一行，并去掉注释</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">1792900537 Query        <span class=\"keyword\">SELECT</span> uid,user_name  <span class=\"comment\">--field注释部分</span></span><br><span class=\"line\">                        <span class=\"keyword\">FROM</span> m_user</span><br><span class=\"line\">                        <span class=\"keyword\">WHERE</span> uid = <span class=\"number\">2</span> </span><br><span class=\"line\">                        <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u8865_u5145_u5E93_u540D\"><a href=\"#u8865_u5145_u5E93_u540D\" class=\"headerlink\" title=\"补充库名\"></a>补充库名</h3><p>如果测试的实例有多个库，会更加麻烦一些，需要在梳理的时候可以根据表名补充回sql</p>\n<h2 id=\"u6D41_u91CF_u56DE_u653E\"><a href=\"#u6D41_u91CF_u56DE_u653E\" class=\"headerlink\" title=\"流量回放\"></a>流量回放</h2><h3 id=\"u547D_u4EE4_u4E0E_u53C2_u6570\"><a href=\"#u547D_u4EE4_u4E0E_u53C2_u6570\" class=\"headerlink\" title=\"命令与参数\"></a>命令与参数</h3><p>我们最终得到一个sql文件，接着我们就可以开始压测了</p>\n<p>具体命令如下：<br><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo /usr/local/mysql/bin/mysqlslap --no-defaults -h127.0.0.1 -P3306 -utest_mysqlslap -p<span class=\"string\">'123456'</span>  <span class=\"attribute\">--concurrency</span>=600 <span class=\"attribute\">--iterations</span>=2 <span class=\"attribute\">--create-schema</span>=test_db <span class=\"attribute\">--query</span>=/data/general_out.log <span class=\"attribute\">--number-of-queries</span>=80000000 -T</span><br></pre></td></tr></table></figure></p>\n<p>参数含义</p>\n<ul>\n<li>–no-defaults   必须加在参数第一位，不然会报<code>unknown variable &#39;default-character-set=utf8</code></li>\n<li>-h 待测试实例host</li>\n<li>-P 待测试实例端口</li>\n<li>-u 待测试实例账号</li>\n<li>-p 待测试实例密码</li>\n<li>–concurrency 并发线程数</li>\n<li>–iterations 重复次数，按多次计算平均数</li>\n<li>–create-schema  指定测试的库</li>\n<li>–query 可以是sql语句，也可以是个sql文件，我们这里用的是文件模式</li>\n<li>–number-of-queries 请求次数，所有sql请求的次数，比如sql文件里有200个sql，<code>number-of-queries</code>指定100时，会只执行到一半就停止，指定300时，会执行完200个再重新跑100</li>\n</ul>\n<h3 id=\"u7ED3_u679C\"><a href=\"#u7ED3_u679C\" class=\"headerlink\" title=\"结果\"></a>结果</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">Benchmark</span><br><span class=\"line\">        Average number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 672.956 seconds</span><br><span class=\"line\">        Minimum number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 672.341 seconds</span><br><span class=\"line\">        Maximum number of seconds <span class=\"keyword\">to</span> <span class=\"builtin-name\">run</span> all queries: 673.571 seconds</span><br><span class=\"line\">        Number of clients running queries: 600</span><br><span class=\"line\">        Average number of queries per client: 133333</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">User time 1503.60,<span class=\"built_in\"> System </span>time 3036.06</span><br><span class=\"line\">Maximum resident <span class=\"builtin-name\">set</span> size 9077056, Integral resident <span class=\"builtin-name\">set</span> size 0</span><br><span class=\"line\">Non-physical pagefaults 4343854, Physical pagefaults 19, Swaps 0</span><br><span class=\"line\">Blocks <span class=\"keyword\">in</span> 4262400 out 8, Messages <span class=\"keyword\">in</span> 0 out 0, Signals 0</span><br><span class=\"line\">Voluntary context switches 161188899, Involuntary context switches 5020</span><br></pre></td></tr></table></figure>\n<p>从结果看，执行80000000 个sql的平均时间是672.956秒，得出qps差不多119047.6，具体的硬件cpu、io、负载，可以看对应实例的监控</p>\n<h3 id=\"u5E76_u53D1_u5199_u9501\"><a href=\"#u5E76_u53D1_u5199_u9501\" class=\"headerlink\" title=\"并发写锁\"></a>并发写锁</h3><p>因为我们设置了600个<code>concurrency</code>并发数，所以一些原本串行更新可能变为并发更新，导致产生并发锁：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/local/mysql/bin/mysqlslap: Cannot run query <span class=\"keyword\">UPDATE</span> <span class=\"string\">`m_user`</span> <span class=\"keyword\">SET</span> <span class=\"string\">`status`</span>=<span class=\"number\">1</span> <span class=\"keyword\">WHERE</span> <span class=\"string\">`uid`</span>=<span class=\"number\">235</span> <span class=\"keyword\">ERROR</span> : <span class=\"keyword\">Lock</span> <span class=\"keyword\">wait</span> <span class=\"keyword\">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure>\n<p>这时可以按sql类型拆分sql文件，把<code>select</code>和<code>update</code>、<code>insert</code>、<code>delete</code>分出不同文件。通过开多个mysqlslap进程来压测</p>\n","sticky":0},{"title":"使用mysql中间件：mysql proxy","date":"2021-12-20T14:15:47.000Z","_content":"\n>mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。\n\n\n\n## 安装\n\n前往[mysql官网](https://downloads.mysql.com/archives/proxy/)，选择对应的版本，如我选择的是Linux平台的文件，下载到服务器：\n\n```\n//解压\ntar -zxf mysql-proxy-0.8.5-linux-el6-x86-64bit.tar.gz\n//移动到mysql_proxy\nsudo mv -f mysql_proxy/mysql-proxy-0.8.5-linux-el6-x86-64bit/* ./mysql_proxy/\n//查看版本\n./mysql_proxy/bin/mysql-proxy -V\n```\n\n可以看到版本，依赖的glib，libevent，lua版本等：\n\n```\nmysql-proxy 0.8.5\n  chassis: 0.8.5\n  glib2: 2.16.6\n  libevent: 2.0.21-stable\n  LUA: Lua 5.1.4\n    package.path: /data1/mysqlproxy/lib/mysql-proxy/lua/?.lua\n    package.cpath: /data1/mysqlproxy/lib/mysql-proxy/lua/?.so\n-- modules\n  proxy: 0.8.5\n```\n\n## 简单启动\n\nmysql-proxy启动至少需要指定一个后端mysql的ip和端口号，此时带上--proxy-backend-addresses参数即可：\n\n```\n./mysql_proxy/bin/mysql-proxy --proxy-backend-addresses=127.0.0.1:3306\n```\n\n## 配置文件启动\n\n### 配置项\n\n我们可以配置`./mysql_proxy/rw-splitting.lua`, 来设置最小最大空闲连接\n\n\n```\nif not proxy.global.config.rwsplit then\n    proxy.global.config.rwsplit = {\n            min_idle_connections = 10,\n            max_idle_connections = 20,\n            is_debug = false\n    }\nend\n```\n\n接着配置我们使用的mysql server:\n`vi ./mysql_proxy/conf/proxy_4000.conf`\n\n```\n[mysql-proxy]\nproxy-address = 127.0.0.1:4000\nproxy-backend-addresses = 127.0.0.1:3306  \nproxy-read-only-backend-addresses = 127.0.0.1:3306\nlog-file = /data1/mysqlproxy/logs/mysql-proxy.log\nproxy-lua-script=/data1/mysqlproxy/rw-splitting.lua\nlog-level = info\ndaemon = 1\nkeepalive= 1\n```\n\n|配置项|说明|\n|---|---|\n|proxy-address|提供给外部调用的ip和端口|\n|proxy-backend-addresses|后端使用的mysql节点，必填|\n|proxy-read-only-backend-addresses|后端使用的mysql只读节点，需要读写分离时填|\n|log-file|日志存储地址|\n|proxy-lua-script|lua配置脚本|\n|log-level|日志级别|\n|daemon|后台运行|\n|keepalive|常驻|\n\n### 启动\n\n```\nsudo ./mysql_proxy/bin/mysql-proxy  --defaults-file=./mysql_proxy/conf/proxy_4000.conf\n```\n\n如果遇到报错：\n\n```\n loading config from './mysql_proxy/conf/proxy_4000.conf' failed:permissions of ./mysql_proxy/conf/proxy_4000.conf aren't secure (0660 or stricter required)\n```\n\n这个是安全要求，将配置文件权限设为660才能启动，改一下权限就可以。\n\n\n\n","source":"_posts/mysql/mysql-proxy.md","raw":"title: 使用mysql中间件：mysql proxy  \ndate: 2021-12-20 22:15:47  \ncategories: mysql  \ntags: mysql  \n\n---\n\n>mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。\n\n\n\n## 安装\n\n前往[mysql官网](https://downloads.mysql.com/archives/proxy/)，选择对应的版本，如我选择的是Linux平台的文件，下载到服务器：\n\n```\n//解压\ntar -zxf mysql-proxy-0.8.5-linux-el6-x86-64bit.tar.gz\n//移动到mysql_proxy\nsudo mv -f mysql_proxy/mysql-proxy-0.8.5-linux-el6-x86-64bit/* ./mysql_proxy/\n//查看版本\n./mysql_proxy/bin/mysql-proxy -V\n```\n\n可以看到版本，依赖的glib，libevent，lua版本等：\n\n```\nmysql-proxy 0.8.5\n  chassis: 0.8.5\n  glib2: 2.16.6\n  libevent: 2.0.21-stable\n  LUA: Lua 5.1.4\n    package.path: /data1/mysqlproxy/lib/mysql-proxy/lua/?.lua\n    package.cpath: /data1/mysqlproxy/lib/mysql-proxy/lua/?.so\n-- modules\n  proxy: 0.8.5\n```\n\n## 简单启动\n\nmysql-proxy启动至少需要指定一个后端mysql的ip和端口号，此时带上--proxy-backend-addresses参数即可：\n\n```\n./mysql_proxy/bin/mysql-proxy --proxy-backend-addresses=127.0.0.1:3306\n```\n\n## 配置文件启动\n\n### 配置项\n\n我们可以配置`./mysql_proxy/rw-splitting.lua`, 来设置最小最大空闲连接\n\n\n```\nif not proxy.global.config.rwsplit then\n    proxy.global.config.rwsplit = {\n            min_idle_connections = 10,\n            max_idle_connections = 20,\n            is_debug = false\n    }\nend\n```\n\n接着配置我们使用的mysql server:\n`vi ./mysql_proxy/conf/proxy_4000.conf`\n\n```\n[mysql-proxy]\nproxy-address = 127.0.0.1:4000\nproxy-backend-addresses = 127.0.0.1:3306  \nproxy-read-only-backend-addresses = 127.0.0.1:3306\nlog-file = /data1/mysqlproxy/logs/mysql-proxy.log\nproxy-lua-script=/data1/mysqlproxy/rw-splitting.lua\nlog-level = info\ndaemon = 1\nkeepalive= 1\n```\n\n|配置项|说明|\n|---|---|\n|proxy-address|提供给外部调用的ip和端口|\n|proxy-backend-addresses|后端使用的mysql节点，必填|\n|proxy-read-only-backend-addresses|后端使用的mysql只读节点，需要读写分离时填|\n|log-file|日志存储地址|\n|proxy-lua-script|lua配置脚本|\n|log-level|日志级别|\n|daemon|后台运行|\n|keepalive|常驻|\n\n### 启动\n\n```\nsudo ./mysql_proxy/bin/mysql-proxy  --defaults-file=./mysql_proxy/conf/proxy_4000.conf\n```\n\n如果遇到报错：\n\n```\n loading config from './mysql_proxy/conf/proxy_4000.conf' failed:permissions of ./mysql_proxy/conf/proxy_4000.conf aren't secure (0660 or stricter required)\n```\n\n这个是安全要求，将配置文件权限设为660才能启动，改一下权限就可以。\n\n\n\n","slug":"mysql/mysql-proxy","published":1,"updated":"2021-12-29T12:56:53.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7pj003ri9sk7w7me7ja","content":"<blockquote>\n<p>mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。</p>\n</blockquote>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前往<a href=\"https://downloads.mysql.com/archives/proxy/\" target=\"_blank\" rel=\"noopener\">mysql官网</a>，选择对应的版本，如我选择的是Linux平台的文件，下载到服务器：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>解压</span><br><span class=\"line\">tar -zxf mysql-proxy-<span class=\"number\">0.8</span>.<span class=\"number\">5</span>-linux-el6-x86-<span class=\"number\">64</span>bit.tar.gz</span><br><span class=\"line\"><span class=\"regexp\">//</span>移动到mysql_proxy</span><br><span class=\"line\">sudo mv -f mysql_proxy<span class=\"regexp\">/mysql-proxy-0.8.5-linux-el6-x86-64bit/</span>* .<span class=\"regexp\">/mysql_proxy/</span></span><br><span class=\"line\"><span class=\"regexp\">//</span>查看版本</span><br><span class=\"line\">.<span class=\"regexp\">/mysql_proxy/</span>bin<span class=\"regexp\">/mysql-proxy -V</span></span><br></pre></td></tr></table></figure>\n<p>可以看到版本，依赖的glib，libevent，lua版本等：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql-proxy <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"symbol\">chassis:</span> <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"symbol\">glib2:</span> <span class=\"number\">2.16</span>.<span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"symbol\">libevent:</span> <span class=\"number\">2.0</span>.<span class=\"number\">21</span>-stable</span><br><span class=\"line\">  <span class=\"symbol\">LUA:</span> Lua <span class=\"number\">5.1</span>.<span class=\"number\">4</span></span><br><span class=\"line\">    package.<span class=\"symbol\">path:</span> /data1/mysqlproxy/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span>-<span class=\"title\">proxy</span>/<span class=\"title\">lua</span>/?.<span class=\"title\">lua</span></span></span><br><span class=\"line\">    package.<span class=\"symbol\">cpath:</span> /data1/mysqlproxy/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span>-<span class=\"title\">proxy</span>/<span class=\"title\">lua</span>/?.<span class=\"title\">so</span></span></span><br><span class=\"line\">-- modules</span><br><span class=\"line\">  <span class=\"symbol\">proxy:</span> <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B80_u5355_u542F_u52A8\"><a href=\"#u7B80_u5355_u542F_u52A8\" class=\"headerlink\" title=\"简单启动\"></a>简单启动</h2><p>mysql-proxy启动至少需要指定一个后端mysql的ip和端口号，此时带上–proxy-backend-addresses参数即可：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./mysql_proxy/bin/mysql-proxy</span> <span class=\"params\">--proxy-backend-addresses=127</span>.0.0.1<span class=\"function\">:3306</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u914D_u7F6E_u6587_u4EF6_u542F_u52A8\"><a href=\"#u914D_u7F6E_u6587_u4EF6_u542F_u52A8\" class=\"headerlink\" title=\"配置文件启动\"></a>配置文件启动</h2><h3 id=\"u914D_u7F6E_u9879\"><a href=\"#u914D_u7F6E_u9879\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p>我们可以配置<code>./mysql_proxy/rw-splitting.lua</code>, 来设置最小最大空闲连接</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> not proxy.global.config.rwsplit <span class=\"keyword\">then</span></span><br><span class=\"line\">    proxy.global.config.<span class=\"attr\">rwsplit</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">min_idle_connections</span> = <span class=\"number\">10</span>,</span><br><span class=\"line\">            <span class=\"attr\">max_idle_connections</span> = <span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">is_debug</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>接着配置我们使用的mysql server:<br><code>vi ./mysql_proxy/conf/proxy_4000.conf</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql-proxy]</span></span><br><span class=\"line\"><span class=\"attr\">proxy-address</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"attr\">proxy-backend-addresses</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">proxy-read-only-backend-addresses</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">log-file</span> = /data1/mysqlproxy/logs/mysql-proxy.log</span><br><span class=\"line\"><span class=\"attr\">proxy-lua-script</span>=/data1/mysqlproxy/rw-splitting.lua</span><br><span class=\"line\"><span class=\"attr\">log-level</span> = info</span><br><span class=\"line\"><span class=\"attr\">daemon</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">keepalive</span>= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proxy-address</td>\n<td>提供给外部调用的ip和端口</td>\n</tr>\n<tr>\n<td>proxy-backend-addresses</td>\n<td>后端使用的mysql节点，必填</td>\n</tr>\n<tr>\n<td>proxy-read-only-backend-addresses</td>\n<td>后端使用的mysql只读节点，需要读写分离时填</td>\n</tr>\n<tr>\n<td>log-file</td>\n<td>日志存储地址</td>\n</tr>\n<tr>\n<td>proxy-lua-script</td>\n<td>lua配置脚本</td>\n</tr>\n<tr>\n<td>log-level</td>\n<td>日志级别</td>\n</tr>\n<tr>\n<td>daemon</td>\n<td>后台运行</td>\n</tr>\n<tr>\n<td>keepalive</td>\n<td>常驻</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"u542F_u52A8\"><a href=\"#u542F_u52A8\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo .<span class=\"regexp\">/mysql_proxy/</span>bin<span class=\"regexp\">/mysql-proxy  --defaults-file=./my</span>sql_proxy<span class=\"regexp\">/conf/</span>proxy_4000.conf</span><br></pre></td></tr></table></figure>\n<p>如果遇到报错：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">loading<span class=\"built_in\"> config </span><span class=\"keyword\">from</span> <span class=\"string\">'./mysql_proxy/conf/proxy_4000.conf'</span> failed:permissions of ./mysql_proxy/conf/proxy_4000.conf aren<span class=\"string\">'t secure (0660 or stricter required)</span></span><br></pre></td></tr></table></figure>\n<p>这个是安全要求，将配置文件权限设为660才能启动，改一下权限就可以。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。</p>\n</blockquote>\n<h2 id=\"u5B89_u88C5\"><a href=\"#u5B89_u88C5\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>前往<a href=\"https://downloads.mysql.com/archives/proxy/\" target=\"_blank\" rel=\"noopener\">mysql官网</a>，选择对应的版本，如我选择的是Linux平台的文件，下载到服务器：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>解压</span><br><span class=\"line\">tar -zxf mysql-proxy-<span class=\"number\">0.8</span>.<span class=\"number\">5</span>-linux-el6-x86-<span class=\"number\">64</span>bit.tar.gz</span><br><span class=\"line\"><span class=\"regexp\">//</span>移动到mysql_proxy</span><br><span class=\"line\">sudo mv -f mysql_proxy<span class=\"regexp\">/mysql-proxy-0.8.5-linux-el6-x86-64bit/</span>* .<span class=\"regexp\">/mysql_proxy/</span></span><br><span class=\"line\"><span class=\"regexp\">//</span>查看版本</span><br><span class=\"line\">.<span class=\"regexp\">/mysql_proxy/</span>bin<span class=\"regexp\">/mysql-proxy -V</span></span><br></pre></td></tr></table></figure>\n<p>可以看到版本，依赖的glib，libevent，lua版本等：</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql-proxy <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"symbol\">chassis:</span> <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"symbol\">glib2:</span> <span class=\"number\">2.16</span>.<span class=\"number\">6</span></span><br><span class=\"line\">  <span class=\"symbol\">libevent:</span> <span class=\"number\">2.0</span>.<span class=\"number\">21</span>-stable</span><br><span class=\"line\">  <span class=\"symbol\">LUA:</span> Lua <span class=\"number\">5.1</span>.<span class=\"number\">4</span></span><br><span class=\"line\">    package.<span class=\"symbol\">path:</span> /data1/mysqlproxy/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span>-<span class=\"title\">proxy</span>/<span class=\"title\">lua</span>/?.<span class=\"title\">lua</span></span></span><br><span class=\"line\">    package.<span class=\"symbol\">cpath:</span> /data1/mysqlproxy/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">mysql</span>-<span class=\"title\">proxy</span>/<span class=\"title\">lua</span>/?.<span class=\"title\">so</span></span></span><br><span class=\"line\">-- modules</span><br><span class=\"line\">  <span class=\"symbol\">proxy:</span> <span class=\"number\">0.8</span>.<span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B80_u5355_u542F_u52A8\"><a href=\"#u7B80_u5355_u542F_u52A8\" class=\"headerlink\" title=\"简单启动\"></a>简单启动</h2><p>mysql-proxy启动至少需要指定一个后端mysql的ip和端口号，此时带上–proxy-backend-addresses参数即可：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./mysql_proxy/bin/mysql-proxy</span> <span class=\"params\">--proxy-backend-addresses=127</span>.0.0.1<span class=\"function\">:3306</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u914D_u7F6E_u6587_u4EF6_u542F_u52A8\"><a href=\"#u914D_u7F6E_u6587_u4EF6_u542F_u52A8\" class=\"headerlink\" title=\"配置文件启动\"></a>配置文件启动</h2><h3 id=\"u914D_u7F6E_u9879\"><a href=\"#u914D_u7F6E_u9879\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><p>我们可以配置<code>./mysql_proxy/rw-splitting.lua</code>, 来设置最小最大空闲连接</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> not proxy.global.config.rwsplit <span class=\"keyword\">then</span></span><br><span class=\"line\">    proxy.global.config.<span class=\"attr\">rwsplit</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">min_idle_connections</span> = <span class=\"number\">10</span>,</span><br><span class=\"line\">            <span class=\"attr\">max_idle_connections</span> = <span class=\"number\">20</span>,</span><br><span class=\"line\">            <span class=\"attr\">is_debug</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>接着配置我们使用的mysql server:<br><code>vi ./mysql_proxy/conf/proxy_4000.conf</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[mysql-proxy]</span></span><br><span class=\"line\"><span class=\"attr\">proxy-address</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">4000</span></span><br><span class=\"line\"><span class=\"attr\">proxy-backend-addresses</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">3306</span>  </span><br><span class=\"line\"><span class=\"attr\">proxy-read-only-backend-addresses</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">3306</span></span><br><span class=\"line\"><span class=\"attr\">log-file</span> = /data1/mysqlproxy/logs/mysql-proxy.log</span><br><span class=\"line\"><span class=\"attr\">proxy-lua-script</span>=/data1/mysqlproxy/rw-splitting.lua</span><br><span class=\"line\"><span class=\"attr\">log-level</span> = info</span><br><span class=\"line\"><span class=\"attr\">daemon</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">keepalive</span>= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>proxy-address</td>\n<td>提供给外部调用的ip和端口</td>\n</tr>\n<tr>\n<td>proxy-backend-addresses</td>\n<td>后端使用的mysql节点，必填</td>\n</tr>\n<tr>\n<td>proxy-read-only-backend-addresses</td>\n<td>后端使用的mysql只读节点，需要读写分离时填</td>\n</tr>\n<tr>\n<td>log-file</td>\n<td>日志存储地址</td>\n</tr>\n<tr>\n<td>proxy-lua-script</td>\n<td>lua配置脚本</td>\n</tr>\n<tr>\n<td>log-level</td>\n<td>日志级别</td>\n</tr>\n<tr>\n<td>daemon</td>\n<td>后台运行</td>\n</tr>\n<tr>\n<td>keepalive</td>\n<td>常驻</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"u542F_u52A8\"><a href=\"#u542F_u52A8\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo .<span class=\"regexp\">/mysql_proxy/</span>bin<span class=\"regexp\">/mysql-proxy  --defaults-file=./my</span>sql_proxy<span class=\"regexp\">/conf/</span>proxy_4000.conf</span><br></pre></td></tr></table></figure>\n<p>如果遇到报错：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">loading<span class=\"built_in\"> config </span><span class=\"keyword\">from</span> <span class=\"string\">'./mysql_proxy/conf/proxy_4000.conf'</span> failed:permissions of ./mysql_proxy/conf/proxy_4000.conf aren<span class=\"string\">'t secure (0660 or stricter required)</span></span><br></pre></td></tr></table></figure>\n<p>这个是安全要求，将配置文件权限设为660才能启动，改一下权限就可以。</p>\n","sticky":0},{"title":"sublime text中文乱码解决","date":"2015-10-14T15:08:00.000Z","_content":"\n编辑器打开代码时乱码基本都是字符编码不一致所造成的。\n\nsublime Text编辑器可以通过安装2个扩展来解决乱码问题：\n\n【ConvertToUTF8】 和 【GBK Encoding Support】\n\n## 安装扩展包管理工具【Package Control】\n\n使用快捷键【control + ~】 打开控制台，参考[package control](https://packagecontrol.io/installation)，根据版本不同选择输入以下代码：\n\nsublime Text2:\n\n```\n\timport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\nsublime Text3:\n\n```\n\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n## 安装扩展包\n\n 扩展包控制安装好了之后就可以开始安装扩展了：\n\n 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。\n","source":"_posts/IDE/sublime/sublime-Encode.md","raw":"title: sublime text中文乱码解决\ndate: 2015-10-14 23:08\ncategories: 工作记录\ntags: sublime\n\n---\n\n编辑器打开代码时乱码基本都是字符编码不一致所造成的。\n\nsublime Text编辑器可以通过安装2个扩展来解决乱码问题：\n\n【ConvertToUTF8】 和 【GBK Encoding Support】\n\n## 安装扩展包管理工具【Package Control】\n\n使用快捷键【control + ~】 打开控制台，参考[package control](https://packagecontrol.io/installation)，根据版本不同选择输入以下代码：\n\nsublime Text2:\n\n```\n\timport urllib2,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), 'wb' ).write(by) if dh == h else None; print('Error validating download (got %s instead of %s), please try manual install' % (dh, h) if dh != h else 'Please restart Sublime Text to finish installation')\n```\n\nsublime Text3:\n\n```\n\timport urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n## 安装扩展包\n\n 扩展包控制安装好了之后就可以开始安装扩展了：\n\n 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。\n","slug":"IDE/sublime/sublime-Encode","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qd006xi9skb9ypp0sp","content":"<p>编辑器打开代码时乱码基本都是字符编码不一致所造成的。</p>\n<p>sublime Text编辑器可以通过安装2个扩展来解决乱码问题：</p>\n<p>【ConvertToUTF8】 和 【GBK Encoding Support】</p>\n<h2 id=\"u5B89_u88C5_u6269_u5C55_u5305_u7BA1_u7406_u5DE5_u5177_u3010Package_Control_u3011\"><a href=\"#u5B89_u88C5_u6269_u5C55_u5305_u7BA1_u7406_u5DE5_u5177_u3010Package_Control_u3011\" class=\"headerlink\" title=\"安装扩展包管理工具【Package Control】\"></a>安装扩展包管理工具【Package Control】</h2><p>使用快捷键【control + ~】 打开控制台，参考<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"noopener\">package control</a>，根据版本不同选择输入以下代码：</p>\n<p>sublime Text2:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib2,<span class=\"built_in\">os</span>,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); <span class=\"built_in\">os</span>.makedirs( ipp ) <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">os</span>.<span class=\"built_in\">path</span>.exists(ipp) <span class=\"keyword\">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">open</span>( <span class=\"built_in\">os</span>.<span class=\"built_in\">path</span>.join( ipp, pf), <span class=\"string\">'wb'</span> ).<span class=\"built_in\">write</span>(by) <span class=\"keyword\">if</span> dh == h <span class=\"keyword\">else</span> None; <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"string\">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>\n<p>sublime Text3:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class=\"keyword\">by</span> = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.<span class=\"built_in\">replace</span>(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(<span class=\"keyword\">by</span>).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"built_in\">open</span>(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).<span class=\"built_in\">write</span>(<span class=\"keyword\">by</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B89_u88C5_u6269_u5C55_u5305\"><a href=\"#u5B89_u88C5_u6269_u5C55_u5305\" class=\"headerlink\" title=\"安装扩展包\"></a>安装扩展包</h2><p> 扩展包控制安装好了之后就可以开始安装扩展了：</p>\n<p> 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编辑器打开代码时乱码基本都是字符编码不一致所造成的。</p>\n<p>sublime Text编辑器可以通过安装2个扩展来解决乱码问题：</p>\n<p>【ConvertToUTF8】 和 【GBK Encoding Support】</p>\n<h2 id=\"u5B89_u88C5_u6269_u5C55_u5305_u7BA1_u7406_u5DE5_u5177_u3010Package_Control_u3011\"><a href=\"#u5B89_u88C5_u6269_u5C55_u5305_u7BA1_u7406_u5DE5_u5177_u3010Package_Control_u3011\" class=\"headerlink\" title=\"安装扩展包管理工具【Package Control】\"></a>安装扩展包管理工具【Package Control】</h2><p>使用快捷键【control + ~】 打开控制台，参考<a href=\"https://packagecontrol.io/installation\" target=\"_blank\" rel=\"noopener\">package control</a>，根据版本不同选择输入以下代码：</p>\n<p>sublime Text2:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib2,<span class=\"built_in\">os</span>,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); <span class=\"built_in\">os</span>.makedirs( ipp ) <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">os</span>.<span class=\"built_in\">path</span>.exists(ipp) <span class=\"keyword\">else</span> None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(by).hexdigest(); <span class=\"built_in\">open</span>( <span class=\"built_in\">os</span>.<span class=\"built_in\">path</span>.join( ipp, pf), <span class=\"string\">'wb'</span> ).<span class=\"built_in\">write</span>(by) <span class=\"keyword\">if</span> dh == h <span class=\"keyword\">else</span> None; <span class=\"built_in\">print</span>(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"string\">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure>\n<p>sublime Text3:</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">import urllib.request,os,hashlib; h = <span class=\"string\">'2915d1851351e5ee549c20394736b442'</span> + <span class=\"string\">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class=\"keyword\">by</span> = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.<span class=\"built_in\">replace</span>(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).<span class=\"built_in\">read</span>(); dh = hashlib.sha256(<span class=\"keyword\">by</span>).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> <span class=\"built_in\">open</span>(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).<span class=\"built_in\">write</span>(<span class=\"keyword\">by</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u5B89_u88C5_u6269_u5C55_u5305\"><a href=\"#u5B89_u88C5_u6269_u5C55_u5305\" class=\"headerlink\" title=\"安装扩展包\"></a>安装扩展包</h2><p> 扩展包控制安装好了之后就可以开始安装扩展了：</p>\n<p> 使用【control + shift + p】 打开扩展控制窗口，输入Install Package后回车，等待扩展窗口重新打开，分别输入包名【ConvertToUTF8】 和 【GBK Encoding Support】，然后选择对应的扩展，回车就可以开始安装了,包名一次输入一个。</p>\n","sticky":0},{"title":"GO语言IDE篇--Vscode (Mac)","date":"2018-11-20T15:26:46.000Z","_content":"\n>工欲善其事，必先利其器\n>----《论语·卫灵公》\n\n## 前言\n\n当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： \n \n* 语法高亮(基本都有)\n* 支持DEBUG\n* 插件丰富\n* 集成终端\n* 颜值（这个也很重要啊喂！）\n\n对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高...最后我选择了满足了我的所有要求的Vscode，下面开始撸之～\n\n## 安装GO环境\n\n这里假设我们已经安装完基础环境并配置好了环境变量，略过...\n\n## 安装vscode\n\n[vscode官网](https://code.visualstudio.com/)下之\n\n## 安装go插件\n\n### 基础插件\n\n打开vscode，打开插件搜索，输入go，安装之:\n![插件安装](/images/go-vscode/go-extend.png)\n\n### 安装依赖包支持\n\n```\n$ mkdir -p $GOPAH/src/golang.org/x\n$ cd $GOPAH/src/golang.org/x\n$ git clone https://github.com/golang/tools.git tools\n\n$ go get -u  github.com/ramya-rao-a/go-outline\n$ go get -u  github.com/acroca/go-symbols\n$ go install golang.org/x/tools/cmd/guru\n$ go install golang.org/x/tools/cmd/gorename\n$ go get -u github.com/rogpeppe/godef\n$ go get -u github.com/sqs/goreturns\n$ go get -u github.com/ramya-rao-a/go-outline\n$ go get -u github.com/josharian/impl\n$ go get -u golang.org/x/lint/golint\n$ go get -u github.com/cweill/gotests/gotests\n```\n\n### 安装dlv\n\ngo的debug依赖于dlv\n\n安装dlv有2种途径:\n\n#### brew安装dlv\n\n这个帮你解决了证书等问题\n\n```\n$ brew install go-delve/delve/delve\n\n```\n\n#### go get安装dlv\n\n安装dlv\n\n```\n$ go get github.com/derekparker/delve/cmd/dlv\n\n-- 查看是否安装成功\n$ $GOPATH/bin/dlv version\n```\n\n把dlv从`GOPATH`移动到`GOROOT`\n\n```\n$ sudo mv $GOPATH/bin/dlv $GOROOT/bin/dlv\n```\n\n创建系统证书\n\n```\n1 打开\"钥匙串访问\"\n2 打开菜单 钥匙串访问/证书助理/创建证书...\n3 名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择\"让我覆盖这些默认值\"\n4 单击\"继续\", 有效期(天数): 365 这里你可以自己修改, 我改为3650\n5 一路继续下去, 直到看到\"指定用于该证书的位置\" 钥匙串 选择 \"系统\" 并单击\"创建\"按钮\n6 重启系统之后, 再打开\"钥匙串访问\", 选择\"系统\", 就会看到创建好的\"dlv-cert\"证书.\n7 右键\"dlv-cert\"证书, 选择\"显示简介\"->\"信任\"->\"代码签名\" 修改为: 始终信任\n```\n\n分配证书\n\n```\n$ sudo codesign -s \"dlv-cert\" $GOROOT/bin/dlv\n```\n\n如果调试时遇到下面问题：\n\n```\ncould not launch process: debugserver or lldb-server not found: install XCode's command line tools or lldb-server\n```\n\n可以安装一下xcode-select:\n\n```\nxcode-select --install\n```\n\n## 开始调试\n\n创建个必写的hello world文件：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar h string = \"こんにちは\"\n\tvar w string = \"世界\"\n\tfmt.Println(h, w)\n}\n\n```\n\n然后开始debug\n![开始debug](/images/go-vscode/start-debug.png)\n\n如果是第一次调试，会让你编辑launch.json文件\n\n我们加一个配置：\n```\n{\n    \"name\": \"helloword\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"env\": {},\n    \"program\": \"${workspaceRoot}/hello/helloworld.go\"\n}\n```\nprogram是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改\n\n保存，再跑一下debug：\n![开始debug](/images/go-vscode/debug.png)\n\n这样就完成了～\n\n\n","source":"_posts/IDE/vscode/go-ide-vscode.md","raw":"title: GO语言IDE篇--Vscode (Mac)  \ndate: 2018-11-20 23:26:46\ntags: [golang,ide]\n---\n\n>工欲善其事，必先利其器\n>----《论语·卫灵公》\n\n## 前言\n\n当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： \n \n* 语法高亮(基本都有)\n* 支持DEBUG\n* 插件丰富\n* 集成终端\n* 颜值（这个也很重要啊喂！）\n\n对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高...最后我选择了满足了我的所有要求的Vscode，下面开始撸之～\n\n## 安装GO环境\n\n这里假设我们已经安装完基础环境并配置好了环境变量，略过...\n\n## 安装vscode\n\n[vscode官网](https://code.visualstudio.com/)下之\n\n## 安装go插件\n\n### 基础插件\n\n打开vscode，打开插件搜索，输入go，安装之:\n![插件安装](/images/go-vscode/go-extend.png)\n\n### 安装依赖包支持\n\n```\n$ mkdir -p $GOPAH/src/golang.org/x\n$ cd $GOPAH/src/golang.org/x\n$ git clone https://github.com/golang/tools.git tools\n\n$ go get -u  github.com/ramya-rao-a/go-outline\n$ go get -u  github.com/acroca/go-symbols\n$ go install golang.org/x/tools/cmd/guru\n$ go install golang.org/x/tools/cmd/gorename\n$ go get -u github.com/rogpeppe/godef\n$ go get -u github.com/sqs/goreturns\n$ go get -u github.com/ramya-rao-a/go-outline\n$ go get -u github.com/josharian/impl\n$ go get -u golang.org/x/lint/golint\n$ go get -u github.com/cweill/gotests/gotests\n```\n\n### 安装dlv\n\ngo的debug依赖于dlv\n\n安装dlv有2种途径:\n\n#### brew安装dlv\n\n这个帮你解决了证书等问题\n\n```\n$ brew install go-delve/delve/delve\n\n```\n\n#### go get安装dlv\n\n安装dlv\n\n```\n$ go get github.com/derekparker/delve/cmd/dlv\n\n-- 查看是否安装成功\n$ $GOPATH/bin/dlv version\n```\n\n把dlv从`GOPATH`移动到`GOROOT`\n\n```\n$ sudo mv $GOPATH/bin/dlv $GOROOT/bin/dlv\n```\n\n创建系统证书\n\n```\n1 打开\"钥匙串访问\"\n2 打开菜单 钥匙串访问/证书助理/创建证书...\n3 名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择\"让我覆盖这些默认值\"\n4 单击\"继续\", 有效期(天数): 365 这里你可以自己修改, 我改为3650\n5 一路继续下去, 直到看到\"指定用于该证书的位置\" 钥匙串 选择 \"系统\" 并单击\"创建\"按钮\n6 重启系统之后, 再打开\"钥匙串访问\", 选择\"系统\", 就会看到创建好的\"dlv-cert\"证书.\n7 右键\"dlv-cert\"证书, 选择\"显示简介\"->\"信任\"->\"代码签名\" 修改为: 始终信任\n```\n\n分配证书\n\n```\n$ sudo codesign -s \"dlv-cert\" $GOROOT/bin/dlv\n```\n\n如果调试时遇到下面问题：\n\n```\ncould not launch process: debugserver or lldb-server not found: install XCode's command line tools or lldb-server\n```\n\n可以安装一下xcode-select:\n\n```\nxcode-select --install\n```\n\n## 开始调试\n\n创建个必写的hello world文件：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar h string = \"こんにちは\"\n\tvar w string = \"世界\"\n\tfmt.Println(h, w)\n}\n\n```\n\n然后开始debug\n![开始debug](/images/go-vscode/start-debug.png)\n\n如果是第一次调试，会让你编辑launch.json文件\n\n我们加一个配置：\n```\n{\n    \"name\": \"helloword\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"env\": {},\n    \"program\": \"${workspaceRoot}/hello/helloworld.go\"\n}\n```\nprogram是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改\n\n保存，再跑一下debug：\n![开始debug](/images/go-vscode/debug.png)\n\n这样就完成了～\n\n\n","slug":"IDE/vscode/go-ide-vscode","published":1,"updated":"2021-11-27T09:57:58.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qe006yi9skgdgflmtt","content":"<blockquote>\n<p>工欲善其事，必先利其器<br>—-《论语·卫灵公》</p>\n</blockquote>\n<h2 id=\"u524D_u8A00\"><a href=\"#u524D_u8A00\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： </p>\n<ul>\n<li>语法高亮(基本都有)</li>\n<li>支持DEBUG</li>\n<li>插件丰富</li>\n<li>集成终端</li>\n<li>颜值（这个也很重要啊喂！）</li>\n</ul>\n<p>对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高…最后我选择了满足了我的所有要求的Vscode，下面开始撸之～</p>\n<h2 id=\"u5B89_u88C5GO_u73AF_u5883\"><a href=\"#u5B89_u88C5GO_u73AF_u5883\" class=\"headerlink\" title=\"安装GO环境\"></a>安装GO环境</h2><p>这里假设我们已经安装完基础环境并配置好了环境变量，略过…</p>\n<h2 id=\"u5B89_u88C5vscode\"><a href=\"#u5B89_u88C5vscode\" class=\"headerlink\" title=\"安装vscode\"></a>安装vscode</h2><p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode官网</a>下之</p>\n<h2 id=\"u5B89_u88C5go_u63D2_u4EF6\"><a href=\"#u5B89_u88C5go_u63D2_u4EF6\" class=\"headerlink\" title=\"安装go插件\"></a>安装go插件</h2><h3 id=\"u57FA_u7840_u63D2_u4EF6\"><a href=\"#u57FA_u7840_u63D2_u4EF6\" class=\"headerlink\" title=\"基础插件\"></a>基础插件</h3><p>打开vscode，打开插件搜索，输入go，安装之:<br><img src=\"/images/go-vscode/go-extend.png\" alt=\"插件安装\"></p>\n<h3 id=\"u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301\"><a href=\"#u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301\" class=\"headerlink\" title=\"安装依赖包支持\"></a>安装依赖包支持</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> $GOPAH/src/golang.org/<span class=\"keyword\">x</span></span><br><span class=\"line\">$ <span class=\"keyword\">cd</span> $GOPAH/src/golang.org/<span class=\"keyword\">x</span></span><br><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/golang/tools.git tools</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span>  github.<span class=\"keyword\">com</span>/ramya-rao-<span class=\"keyword\">a</span>/<span class=\"keyword\">go</span>-outline</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span>  github.<span class=\"keyword\">com</span>/acroca/<span class=\"keyword\">go</span>-symbols</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> install golang.org/<span class=\"keyword\">x</span>/tools/cmd/guru</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> install golang.org/<span class=\"keyword\">x</span>/tools/cmd/gorename</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/rogpeppe/godef</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/sqs/goreturns</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/ramya-rao-<span class=\"keyword\">a</span>/<span class=\"keyword\">go</span>-outline</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/josharian/impl</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> golang.org/<span class=\"keyword\">x</span>/lint/golint</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/cweill/gotests/gotests</span><br></pre></td></tr></table></figure>\n<h3 id=\"u5B89_u88C5dlv\"><a href=\"#u5B89_u88C5dlv\" class=\"headerlink\" title=\"安装dlv\"></a>安装dlv</h3><p>go的debug依赖于dlv</p>\n<p>安装dlv有2种途径:</p>\n<h4 id=\"brew_u5B89_u88C5dlv\"><a href=\"#brew_u5B89_u88C5dlv\" class=\"headerlink\" title=\"brew安装dlv\"></a>brew安装dlv</h4><p>这个帮你解决了证书等问题</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"keyword\">install</span> <span class=\"keyword\">go</span>-delve/delve/delve</span><br></pre></td></tr></table></figure>\n<h4 id=\"go_get_u5B89_u88C5dlv\"><a href=\"#go_get_u5B89_u88C5dlv\" class=\"headerlink\" title=\"go get安装dlv\"></a>go get安装dlv</h4><p>安装dlv</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go get github.com<span class=\"regexp\">/derekparker/</span>delve<span class=\"regexp\">/cmd/</span>dlv</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看是否安装成功</span><br><span class=\"line\">$ <span class=\"variable\">$GOPATH</span><span class=\"regexp\">/bin/</span>dlv version</span><br></pre></td></tr></table></figure>\n<p>把dlv从<code>GOPATH</code>移动到<code>GOROOT</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mv <span class=\"variable\">$GOPATH</span><span class=\"regexp\">/bin/</span>dlv <span class=\"variable\">$GOROOT</span><span class=\"regexp\">/bin/</span>dlv</span><br></pre></td></tr></table></figure>\n<p>创建系统证书</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span>打开<span class=\"string\">\"钥匙串访问\"</span></span><br><span class=\"line\"><span class=\"symbol\">2 </span>打开菜单 钥匙串访问/证书助理/创建证书...</span><br><span class=\"line\"><span class=\"symbol\">3 </span>名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择<span class=\"string\">\"让我覆盖这些默认值\"</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span>单击<span class=\"string\">\"继续\"</span>, 有效期(天数): <span class=\"number\">365</span> 这里你可以自己修改, 我改为<span class=\"number\">3650</span></span><br><span class=\"line\"><span class=\"symbol\">5 </span>一路继续下去, 直到看到<span class=\"string\">\"指定用于该证书的位置\"</span> 钥匙串 选择 <span class=\"string\">\"系统\"</span> 并单击<span class=\"string\">\"创建\"</span>按钮</span><br><span class=\"line\"><span class=\"symbol\">6 </span>重启系统之后, 再打开<span class=\"string\">\"钥匙串访问\"</span>, 选择<span class=\"string\">\"系统\"</span>, 就会看到创建好的<span class=\"string\">\"dlv-cert\"</span>证书.</span><br><span class=\"line\"><span class=\"symbol\">7 </span>右键<span class=\"string\">\"dlv-cert\"</span>证书, 选择<span class=\"string\">\"显示简介\"</span>-&gt;<span class=\"string\">\"信任\"</span>-&gt;<span class=\"string\">\"代码签名\"</span> 修改为: 始终信任</span><br></pre></td></tr></table></figure>\n<p>分配证书</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo codesign -s <span class=\"string\">\"dlv-cert\"</span> <span class=\"variable\">$GOROOT</span><span class=\"regexp\">/bin/</span>dlv</span><br></pre></td></tr></table></figure>\n<p>如果调试时遇到下面问题：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">could<span class=\"built_in\"> not </span>launch process: debugserver<span class=\"built_in\"> or </span>lldb-server<span class=\"built_in\"> not </span>found: install XCode's command line tools<span class=\"built_in\"> or </span>lldb-server</span><br></pre></td></tr></table></figure>\n<p>可以安装一下xcode-select:</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">xcode-<span class=\"keyword\">select</span> <span class=\"comment\">--install</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5F00_u59CB_u8C03_u8BD5\"><a href=\"#u5F00_u59CB_u8C03_u8BD5\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>创建个必写的hello world文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h <span class=\"keyword\">string</span> = <span class=\"string\">\"こんにちは\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> w <span class=\"keyword\">string</span> = <span class=\"string\">\"世界\"</span></span><br><span class=\"line\">\tfmt.Println(h, w)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后开始debug<br><img src=\"/images/go-vscode/start-debug.png\" alt=\"开始debug\"></p>\n<p>如果是第一次调试，会让你编辑launch.json文件</p>\n<p>我们加一个配置：<br><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"helloword\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"go\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mode\"</span>: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/hello/helloworld.go\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>program是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改</p>\n<p>保存，再跑一下debug：<br><img src=\"/images/go-vscode/debug.png\" alt=\"开始debug\"></p>\n<p>这样就完成了～</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>工欲善其事，必先利其器<br>—-《论语·卫灵公》</p>\n</blockquote>\n<h2 id=\"u524D_u8A00\"><a href=\"#u524D_u8A00\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： </p>\n<ul>\n<li>语法高亮(基本都有)</li>\n<li>支持DEBUG</li>\n<li>插件丰富</li>\n<li>集成终端</li>\n<li>颜值（这个也很重要啊喂！）</li>\n</ul>\n<p>对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高…最后我选择了满足了我的所有要求的Vscode，下面开始撸之～</p>\n<h2 id=\"u5B89_u88C5GO_u73AF_u5883\"><a href=\"#u5B89_u88C5GO_u73AF_u5883\" class=\"headerlink\" title=\"安装GO环境\"></a>安装GO环境</h2><p>这里假设我们已经安装完基础环境并配置好了环境变量，略过…</p>\n<h2 id=\"u5B89_u88C5vscode\"><a href=\"#u5B89_u88C5vscode\" class=\"headerlink\" title=\"安装vscode\"></a>安装vscode</h2><p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode官网</a>下之</p>\n<h2 id=\"u5B89_u88C5go_u63D2_u4EF6\"><a href=\"#u5B89_u88C5go_u63D2_u4EF6\" class=\"headerlink\" title=\"安装go插件\"></a>安装go插件</h2><h3 id=\"u57FA_u7840_u63D2_u4EF6\"><a href=\"#u57FA_u7840_u63D2_u4EF6\" class=\"headerlink\" title=\"基础插件\"></a>基础插件</h3><p>打开vscode，打开插件搜索，输入go，安装之:<br><img src=\"/images/go-vscode/go-extend.png\" alt=\"插件安装\"></p>\n<h3 id=\"u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301\"><a href=\"#u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301\" class=\"headerlink\" title=\"安装依赖包支持\"></a>安装依赖包支持</h3><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> -<span class=\"keyword\">p</span> $GOPAH/src/golang.org/<span class=\"keyword\">x</span></span><br><span class=\"line\">$ <span class=\"keyword\">cd</span> $GOPAH/src/golang.org/<span class=\"keyword\">x</span></span><br><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/golang/tools.git tools</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span>  github.<span class=\"keyword\">com</span>/ramya-rao-<span class=\"keyword\">a</span>/<span class=\"keyword\">go</span>-outline</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span>  github.<span class=\"keyword\">com</span>/acroca/<span class=\"keyword\">go</span>-symbols</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> install golang.org/<span class=\"keyword\">x</span>/tools/cmd/guru</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> install golang.org/<span class=\"keyword\">x</span>/tools/cmd/gorename</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/rogpeppe/godef</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/sqs/goreturns</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/ramya-rao-<span class=\"keyword\">a</span>/<span class=\"keyword\">go</span>-outline</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/josharian/impl</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> golang.org/<span class=\"keyword\">x</span>/lint/golint</span><br><span class=\"line\">$ <span class=\"keyword\">go</span> <span class=\"built_in\">get</span> -<span class=\"keyword\">u</span> github.<span class=\"keyword\">com</span>/cweill/gotests/gotests</span><br></pre></td></tr></table></figure>\n<h3 id=\"u5B89_u88C5dlv\"><a href=\"#u5B89_u88C5dlv\" class=\"headerlink\" title=\"安装dlv\"></a>安装dlv</h3><p>go的debug依赖于dlv</p>\n<p>安装dlv有2种途径:</p>\n<h4 id=\"brew_u5B89_u88C5dlv\"><a href=\"#brew_u5B89_u88C5dlv\" class=\"headerlink\" title=\"brew安装dlv\"></a>brew安装dlv</h4><p>这个帮你解决了证书等问题</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew <span class=\"keyword\">install</span> <span class=\"keyword\">go</span>-delve/delve/delve</span><br></pre></td></tr></table></figure>\n<h4 id=\"go_get_u5B89_u88C5dlv\"><a href=\"#go_get_u5B89_u88C5dlv\" class=\"headerlink\" title=\"go get安装dlv\"></a>go get安装dlv</h4><p>安装dlv</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ go get github.com<span class=\"regexp\">/derekparker/</span>delve<span class=\"regexp\">/cmd/</span>dlv</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看是否安装成功</span><br><span class=\"line\">$ <span class=\"variable\">$GOPATH</span><span class=\"regexp\">/bin/</span>dlv version</span><br></pre></td></tr></table></figure>\n<p>把dlv从<code>GOPATH</code>移动到<code>GOROOT</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo mv <span class=\"variable\">$GOPATH</span><span class=\"regexp\">/bin/</span>dlv <span class=\"variable\">$GOROOT</span><span class=\"regexp\">/bin/</span>dlv</span><br></pre></td></tr></table></figure>\n<p>创建系统证书</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span>打开<span class=\"string\">\"钥匙串访问\"</span></span><br><span class=\"line\"><span class=\"symbol\">2 </span>打开菜单 钥匙串访问/证书助理/创建证书...</span><br><span class=\"line\"><span class=\"symbol\">3 </span>名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择<span class=\"string\">\"让我覆盖这些默认值\"</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span>单击<span class=\"string\">\"继续\"</span>, 有效期(天数): <span class=\"number\">365</span> 这里你可以自己修改, 我改为<span class=\"number\">3650</span></span><br><span class=\"line\"><span class=\"symbol\">5 </span>一路继续下去, 直到看到<span class=\"string\">\"指定用于该证书的位置\"</span> 钥匙串 选择 <span class=\"string\">\"系统\"</span> 并单击<span class=\"string\">\"创建\"</span>按钮</span><br><span class=\"line\"><span class=\"symbol\">6 </span>重启系统之后, 再打开<span class=\"string\">\"钥匙串访问\"</span>, 选择<span class=\"string\">\"系统\"</span>, 就会看到创建好的<span class=\"string\">\"dlv-cert\"</span>证书.</span><br><span class=\"line\"><span class=\"symbol\">7 </span>右键<span class=\"string\">\"dlv-cert\"</span>证书, 选择<span class=\"string\">\"显示简介\"</span>-&gt;<span class=\"string\">\"信任\"</span>-&gt;<span class=\"string\">\"代码签名\"</span> 修改为: 始终信任</span><br></pre></td></tr></table></figure>\n<p>分配证书</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo codesign -s <span class=\"string\">\"dlv-cert\"</span> <span class=\"variable\">$GOROOT</span><span class=\"regexp\">/bin/</span>dlv</span><br></pre></td></tr></table></figure>\n<p>如果调试时遇到下面问题：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">could<span class=\"built_in\"> not </span>launch process: debugserver<span class=\"built_in\"> or </span>lldb-server<span class=\"built_in\"> not </span>found: install XCode's command line tools<span class=\"built_in\"> or </span>lldb-server</span><br></pre></td></tr></table></figure>\n<p>可以安装一下xcode-select:</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">xcode-<span class=\"keyword\">select</span> <span class=\"comment\">--install</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u5F00_u59CB_u8C03_u8BD5\"><a href=\"#u5F00_u59CB_u8C03_u8BD5\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>创建个必写的hello world文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h <span class=\"keyword\">string</span> = <span class=\"string\">\"こんにちは\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> w <span class=\"keyword\">string</span> = <span class=\"string\">\"世界\"</span></span><br><span class=\"line\">\tfmt.Println(h, w)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后开始debug<br><img src=\"/images/go-vscode/start-debug.png\" alt=\"开始debug\"></p>\n<p>如果是第一次调试，会让你编辑launch.json文件</p>\n<p>我们加一个配置：<br><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"helloword\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"go\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"request\"</span>: <span class=\"string\">\"launch\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mode\"</span>: <span class=\"string\">\"debug\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"program\"</span>: <span class=\"string\">\"$&#123;workspaceRoot&#125;/hello/helloworld.go\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>program是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改</p>\n<p>保存，再跑一下debug：<br><img src=\"/images/go-vscode/debug.png\" alt=\"开始debug\"></p>\n<p>这样就完成了～</p>\n","sticky":0},{"title":"使用hexo搭建个人博客 part1","date":"2015-09-18T13:06:35.000Z","_content":"\n\n>代码段中的\"$ \"指在命令行下执行\n\n---\n\n### 安装hexo\n\n安装首先环境中要装好：\n\n* node.js\n* npm\n\n这2个的安装这里不详细介绍，在安装完的情况下：\n\n\n```\n    $ npm install -g hexo\n```\n\n### 初始化项目\n\n初始化blog项目\n\n\n```\n    $ hexo init blog\n```\n\n或者创建一个项目blog,在项目中初始化\n\n```\n    $ mkdir blog\n    $ cd blog\n    $ hexo init\n```\n\n### 安装依赖\n\n```\n    $ npm install\n```\n\n### 开启服务\n\nhexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：\n\n```\n    $ npm install hexo-server --sav\n```\n\n开启服务\n\n```\n    $ hexo server -p 4000\n```\n\n-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入[http://localhost:4000](http://localhost:4000)就可以看到效果了：\n\n```\n INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n### 新增文章\n\n文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：\n\n```\n   $ hexo new post example\n```\n这样，在source/_posts/下就多了个example.md的文件了:\n\n```\ntitle: example\ndate: 2015-09-18 21:04:03\ntags:\n---\n```\n\ntitle是文章的标题;  \ndate是文章的时间;  \ntags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,...];\ncategories是分类，如果你想添加到对应的分类，可以加上;  \n---之后的内容就是文章的主体了，以md的格式写之就可以了\n\n### 生成静态文件\n\n生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务\n\n```\n    $ hexo generate\n```\n\n### 部署项目文件\n\n部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)\n\n用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。\n\n部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置\n\n```yml\ndeploy:\n  type: git\n  repository: https://github.com/yourGithubRespository\n  branch: master\n  message: hexo deploy message\n```\n\ntype是部署类型，repository是仓库地址，branch我选了主线\n\n在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    \n\n之后就可以开始部署了：\nhexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\n之后就可以开始部署了：\n\n```\n    $ hexo deploy\n```\n\n每次部署前都需要重新生成文件，2步可以合成一起：\n\n```\n    $ hexo deploy -generate\n```\n\n### 命令缩写\n\nhexo的命令有缩写模式，有些命令中的单词可以简化成头字母：\n\n```\n    $ hexo server  =>  $ hexo s\n    $ hexo deploy  =>  $ hexo d\n    $ hexo generate  =>  $ hexo g\n    $ hexo deploy -generate  =>  $ hexo d -g\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/hexo/hexo-1-install.md","raw":"title: 使用hexo搭建个人博客 part1\ndate: 2015-09-18 21:06:35\ncategories: node\ntags: hexo\n\n---\n\n\n>代码段中的\"$ \"指在命令行下执行\n\n---\n\n### 安装hexo\n\n安装首先环境中要装好：\n\n* node.js\n* npm\n\n这2个的安装这里不详细介绍，在安装完的情况下：\n\n\n```\n    $ npm install -g hexo\n```\n\n### 初始化项目\n\n初始化blog项目\n\n\n```\n    $ hexo init blog\n```\n\n或者创建一个项目blog,在项目中初始化\n\n```\n    $ mkdir blog\n    $ cd blog\n    $ hexo init\n```\n\n### 安装依赖\n\n```\n    $ npm install\n```\n\n### 开启服务\n\nhexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：\n\n```\n    $ npm install hexo-server --sav\n```\n\n开启服务\n\n```\n    $ hexo server -p 4000\n```\n\n-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入[http://localhost:4000](http://localhost:4000)就可以看到效果了：\n\n```\n INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n\n### 新增文章\n\n文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：\n\n```\n   $ hexo new post example\n```\n这样，在source/_posts/下就多了个example.md的文件了:\n\n```\ntitle: example\ndate: 2015-09-18 21:04:03\ntags:\n---\n```\n\ntitle是文章的标题;  \ndate是文章的时间;  \ntags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,...];\ncategories是分类，如果你想添加到对应的分类，可以加上;  \n---之后的内容就是文章的主体了，以md的格式写之就可以了\n\n### 生成静态文件\n\n生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务\n\n```\n    $ hexo generate\n```\n\n### 部署项目文件\n\n部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)\n\n用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。\n\n部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置\n\n```yml\ndeploy:\n  type: git\n  repository: https://github.com/yourGithubRespository\n  branch: master\n  message: hexo deploy message\n```\n\ntype是部署类型，repository是仓库地址，branch我选了主线\n\n在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    \n\n之后就可以开始部署了：\nhexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：\n\n```\n    $ npm install hexo-deployer-git --save\n```\n\n之后就可以开始部署了：\n\n```\n    $ hexo deploy\n```\n\n每次部署前都需要重新生成文件，2步可以合成一起：\n\n```\n    $ hexo deploy -generate\n```\n\n### 命令缩写\n\nhexo的命令有缩写模式，有些命令中的单词可以简化成头字母：\n\n```\n    $ hexo server  =>  $ hexo s\n    $ hexo deploy  =>  $ hexo d\n    $ hexo generate  =>  $ hexo g\n    $ hexo deploy -generate  =>  $ hexo d -g\n```\n\n\n\n\n\n\n\n\n\n","slug":"js/hexo/hexo-1-install","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qe0071i9sklok174up","content":"<blockquote>\n<p>代码段中的”$ “指在命令行下执行</p>\n</blockquote>\n<hr>\n<h3 id=\"u5B89_u88C5hexo\"><a href=\"#u5B89_u88C5hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装首先环境中要装好：</p>\n<ul>\n<li>node.js</li>\n<li>npm</li>\n</ul>\n<p>这2个的安装这里不详细介绍，在安装完的情况下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"u521D_u59CB_u5316_u9879_u76EE\"><a href=\"#u521D_u59CB_u5316_u9879_u76EE\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化blog项目</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init blog</span><br></pre></td></tr></table></figure>\n<p>或者创建一个项目blog,在项目中初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5B89_u88C5_u4F9D_u8D56\"><a href=\"#u5B89_u88C5_u4F9D_u8D56\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5F00_u542F_u670D_u52A1\"><a href=\"#u5F00_u542F_u670D_u52A1\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h3><p>hexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span> <span class=\"comment\">--sav</span></span><br></pre></td></tr></table></figure>\n<p>开启服务</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo<span class=\"built_in\"> server </span>-p 4000</span><br></pre></td></tr></table></figure>\n<p>-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>就可以看到效果了：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">4000</span>/. Press Ctrl+C <span class=\"built_in\">to</span> <span class=\"built_in\">stop</span>.</span><br></pre></td></tr></table></figure>\n<h3 id=\"u65B0_u589E_u6587_u7AE0\"><a href=\"#u65B0_u589E_u6587_u7AE0\" class=\"headerlink\" title=\"新增文章\"></a>新增文章</h3><p>文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">post</span> example</span><br></pre></td></tr></table></figure>\n<p>这样，在source/_posts/下就多了个example.md的文件了:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">example</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-09</span><span class=\"number\">-18</span> <span class=\"number\">21</span><span class=\"string\">:04:03</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>title是文章的标题;<br>date是文章的时间;<br>tags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,…];<br>categories是分类，如果你想添加到对应的分类，可以加上;<br>—之后的内容就是文章的主体了，以md的格式写之就可以了</p>\n<h3 id=\"u751F_u6210_u9759_u6001_u6587_u4EF6\"><a href=\"#u751F_u6210_u9759_u6001_u6587_u4EF6\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><p>生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u90E8_u7F72_u9879_u76EE_u6587_u4EF6\"><a href=\"#u90E8_u7F72_u9879_u76EE_u6587_u4EF6\" class=\"headerlink\" title=\"部署项目文件\"></a>部署项目文件</h3><p>部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)</p>\n<p>用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。</p>\n<p>部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/yourGithubRespository</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span> <span class=\"string\">message</span></span><br></pre></td></tr></table></figure>\n<p>type是部署类型，repository是仓库地址，branch我选了主线</p>\n<p>在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    </p>\n<p>之后就可以开始部署了：<br>hexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>之后就可以开始部署了：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n<p>每次部署前都需要重新生成文件，2步可以合成一起：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy -<span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u547D_u4EE4_u7F29_u5199\"><a href=\"#u547D_u4EE4_u7F29_u5199\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h3><p>hexo的命令有缩写模式，有些命令中的单词可以简化成头字母：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo<span class=\"built_in\"> server </span> =&gt;  $ hexo s</span><br><span class=\"line\">$ hexo deploy  =&gt;  $ hexo d</span><br><span class=\"line\">$ hexo generate  =&gt;  $ hexo g</span><br><span class=\"line\">$ hexo deploy -generate  =&gt;  $ hexo d -g</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>代码段中的”$ “指在命令行下执行</p>\n</blockquote>\n<hr>\n<h3 id=\"u5B89_u88C5hexo\"><a href=\"#u5B89_u88C5hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装首先环境中要装好：</p>\n<ul>\n<li>node.js</li>\n<li>npm</li>\n</ul>\n<p>这2个的安装这里不详细介绍，在安装完的情况下：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"u521D_u59CB_u5316_u9879_u76EE\"><a href=\"#u521D_u59CB_u5316_u9879_u76EE\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>初始化blog项目</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init blog</span><br></pre></td></tr></table></figure>\n<p>或者创建一个项目blog,在项目中初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> blog</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo init</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5B89_u88C5_u4F9D_u8D56\"><a href=\"#u5B89_u88C5_u4F9D_u8D56\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5F00_u542F_u670D_u52A1\"><a href=\"#u5F00_u542F_u670D_u52A1\" class=\"headerlink\" title=\"开启服务\"></a>开启服务</h3><p>hexo中3.0版本，在第一次开启服务的时候需要先安装一下hexo的server工具：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-<span class=\"keyword\">server</span> <span class=\"comment\">--sav</span></span><br></pre></td></tr></table></figure>\n<p>开启服务</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo<span class=\"built_in\"> server </span>-p 4000</span><br></pre></td></tr></table></figure>\n<p>-p命令是设置服务监听端口，不传默认4000，直接在浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a>就可以看到效果了：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running <span class=\"keyword\">at</span> <span class=\"keyword\">http</span>://<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">4000</span>/. Press Ctrl+C <span class=\"built_in\">to</span> <span class=\"built_in\">stop</span>.</span><br></pre></td></tr></table></figure>\n<h3 id=\"u65B0_u589E_u6587_u7AE0\"><a href=\"#u65B0_u589E_u6587_u7AE0\" class=\"headerlink\" title=\"新增文章\"></a>新增文章</h3><p>文章的目录是在根目录下的source/_posts文件夹中，可以直接在文件夹下新建md文件，也可以直接用命令的方式：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">post</span> example</span><br></pre></td></tr></table></figure>\n<p>这样，在source/_posts/下就多了个example.md的文件了:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">example</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-09</span><span class=\"number\">-18</span> <span class=\"number\">21</span><span class=\"string\">:04:03</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>title是文章的标题;<br>date是文章的时间;<br>tags是文章的标题，多个可以以数组的形式填写：[tag1,tag2,tag3,…];<br>categories是分类，如果你想添加到对应的分类，可以加上;<br>—之后的内容就是文章的主体了，以md的格式写之就可以了</p>\n<h3 id=\"u751F_u6210_u9759_u6001_u6587_u4EF6\"><a href=\"#u751F_u6210_u9759_u6001_u6587_u4EF6\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><p>生成的文件放在根目录的public文件夹下,每次有文件重新部署，都需要重新生成一下静态化文件，再重开服务</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u90E8_u7F72_u9879_u76EE_u6587_u4EF6\"><a href=\"#u90E8_u7F72_u9879_u76EE_u6587_u4EF6\" class=\"headerlink\" title=\"部署项目文件\"></a>部署项目文件</h3><p>部署可以分2种，一种是直接访问静态化之后生成的public文件夹，一种是部署到其他服务器(如github)</p>\n<p>用第一种方法的可以直接在服务器上用静态化命令就可以了，这里具体讲下第二种。</p>\n<p>部署到git上的，需要在项目上根目录下的 _config.yml文件中加入部署配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/yourGithubRespository</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">hexo</span> <span class=\"string\">deploy</span> <span class=\"string\">message</span></span><br></pre></td></tr></table></figure>\n<p>type是部署类型，repository是仓库地址，branch我选了主线</p>\n<p>在部署时需要注意一点，deploy命令会直接删除仓库中的文件，把新生成的静态化文件更上去，这样的部署方式需要提交的目的仓库是单独为部署用的，我把当前hexo项目作为静态文件生成器独立成一个项目，把存放静态文件的项目独立成另一个仓库。    </p>\n<p>之后就可以开始部署了：<br>hexo中3.0版本，在第一次部署的时候需要先安装一下hexo的git部署工具：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>之后就可以开始部署了：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>\n<p>每次部署前都需要重新生成文件，2步可以合成一起：</p>\n<figure class=\"highlight verilog\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy -<span class=\"keyword\">generate</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u547D_u4EE4_u7F29_u5199\"><a href=\"#u547D_u4EE4_u7F29_u5199\" class=\"headerlink\" title=\"命令缩写\"></a>命令缩写</h3><p>hexo的命令有缩写模式，有些命令中的单词可以简化成头字母：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo<span class=\"built_in\"> server </span> =&gt;  $ hexo s</span><br><span class=\"line\">$ hexo deploy  =&gt;  $ hexo d</span><br><span class=\"line\">$ hexo generate  =&gt;  $ hexo g</span><br><span class=\"line\">$ hexo deploy -generate  =&gt;  $ hexo d -g</span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"使用hexo搭建个人博客 part2","date":"2015-10-11T13:06:35.000Z","_content":"\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/js/hexo/hexo-2-theme.md","raw":"title: 使用hexo搭建个人博客 part2\ndate: 2015-10-11 21:06:35\ncategories: node\ntags: hexo\n\n---\n\n## 下载主题\n\n我使用的模板主题是[Next](https://github.com/iissnan/hexo-theme-next)，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：\n\n```\n    $ git clone https://github.com/iissnan/hexo-theme-next themes/next \n```\n\n然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)\n\n```yml\n# Extensions\n## Plugins: http://hexo.io/plugins/\n## Themes: http://hexo.io/themes/\ntheme: next\n```\n\n## 修改主题设置\n\n指定了主题后，进入主题样式设置\n\n### 内置主题Mist\n\n有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格\n\n```yml\n# Schemes\nscheme: Mist\n```\n\n### 导航增加标题、分类和关于自己\n\n在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由\n\n```\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# When running hexo in a subdirectory (e.g. domain.tld/blog)\n# Remove leading slashes ( \"/archives\" -> \"archives\" )\nmenu:\n  home: /\n  categories: /categories\n  tags: /tags\n  archives: /archives\n  about: /about\n  #commonweal: /404\n```\n\n这样子增加后访问[http://yousite/tags](http://yousite/tags)时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页\n\n### 创建标签页，分类页及关于页\n\n创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：\n\n```\n\t$ hexo new page tags\n\t$ hexo new page about\n\t$ hexo new page categories\n```\n\n修改标签页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"tags\"\n---\n```\n\n修改分类页面内容：\n\n```\ntitle: tags\ndate: 2015-10-11 21:06:35\ntype: \"categories\"\n---\n```\n\n标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"js/hexo/hexo-2-theme","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qe0072i9sksedg67hp","content":"<h2 id=\"u4E0B_u8F7D_u4E3B_u9898\"><a href=\"#u4E0B_u8F7D_u4E3B_u9898\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h2><p>我使用的模板主题是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<p>然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539_u4E3B_u9898_u8BBE_u7F6E\"><a href=\"#u4FEE_u6539_u4E3B_u9898_u8BBE_u7F6E\" class=\"headerlink\" title=\"修改主题设置\"></a>修改主题设置</h2><p>指定了主题后，进入主题样式设置</p>\n<h3 id=\"u5185_u7F6E_u4E3B_u9898Mist\"><a href=\"#u5185_u7F6E_u4E3B_u9898Mist\" class=\"headerlink\" title=\"内置主题Mist\"></a>内置主题Mist</h3><p>有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5BFC_u822A_u589E_u52A0_u6807_u9898_u3001_u5206_u7C7B_u548C_u5173_u4E8E_u81EA_u5DF1\"><a href=\"#u5BFC_u822A_u589E_u52A0_u6807_u9898_u3001_u5206_u7C7B_u548C_u5173_u4E8E_u81EA_u5DF1\" class=\"headerlink\" title=\"导航增加标题、分类和关于自己\"></a>导航增加标题、分类和关于自己</h3><p>在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># When running hexo in a subdirectory (e.g. domain.tld/blog)</span></span><br><span class=\"line\"><span class=\"meta\"># Remove leading slashes ( <span class=\"string\">\"/archives\"</span> -&gt; <span class=\"string\">\"archives\"</span> )</span></span><br><span class=\"line\"><span class=\"symbol\">menu:</span></span><br><span class=\"line\"><span class=\"symbol\">  home:</span> /</span><br><span class=\"line\"><span class=\"symbol\">  categories:</span> /categories</span><br><span class=\"line\"><span class=\"symbol\">  tags:</span> /tags</span><br><span class=\"line\"><span class=\"symbol\">  archives:</span> /archives</span><br><span class=\"line\"><span class=\"symbol\">  about:</span> /about</span><br><span class=\"line\">  <span class=\"meta\">#commonweal: /404</span></span><br></pre></td></tr></table></figure>\n<p>这样子增加后访问<a href=\"http://yousite/tags\" target=\"_blank\" rel=\"noopener\">http://yousite/tags</a>时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页</p>\n<h3 id=\"u521B_u5EFA_u6807_u7B7E_u9875_uFF0C_u5206_u7C7B_u9875_u53CA_u5173_u4E8E_u9875\"><a href=\"#u521B_u5EFA_u6807_u7B7E_u9875_uFF0C_u5206_u7C7B_u9875_u53CA_u5173_u4E8E_u9875\" class=\"headerlink\" title=\"创建标签页，分类页及关于页\"></a>创建标签页，分类页及关于页</h3><p>创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>tags</span><br><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>about</span><br><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>categories</span><br></pre></td></tr></table></figure>\n<p>修改标签页面内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-10</span><span class=\"number\">-11</span> <span class=\"number\">21</span><span class=\"string\">:06:35</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"tags\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>修改分类页面内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-10</span><span class=\"number\">-11</span> <span class=\"number\">21</span><span class=\"string\">:06:35</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"categories\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u4E0B_u8F7D_u4E3B_u9898\"><a href=\"#u4E0B_u8F7D_u4E3B_u9898\" class=\"headerlink\" title=\"下载主题\"></a>下载主题</h2><p>我使用的模板主题是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，首先进入你的hexo项目根目录，把模板下到hexo项目下的theme文件夹中，如：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n<p>然后，在根目录的配置文件_config.yml中把theme指定为next就行了(默认的主题是自带的landscape)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: http://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: http://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">next</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u4FEE_u6539_u4E3B_u9898_u8BBE_u7F6E\"><a href=\"#u4FEE_u6539_u4E3B_u9898_u8BBE_u7F6E\" class=\"headerlink\" title=\"修改主题设置\"></a>修改主题设置</h2><p>指定了主题后，进入主题样式设置</p>\n<h3 id=\"u5185_u7F6E_u4E3B_u9898Mist\"><a href=\"#u5185_u7F6E_u4E3B_u9898Mist\" class=\"headerlink\" title=\"内置主题Mist\"></a>内置主题Mist</h3><p>有些主题会有题中题，也就是有2种布局可供选择，只要像下面一样，把sheme: Mist前的注释去掉就会加载另一种风格</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"u5BFC_u822A_u589E_u52A0_u6807_u9898_u3001_u5206_u7C7B_u548C_u5173_u4E8E_u81EA_u5DF1\"><a href=\"#u5BFC_u822A_u589E_u52A0_u6807_u9898_u3001_u5206_u7C7B_u548C_u5173_u4E8E_u81EA_u5DF1\" class=\"headerlink\" title=\"导航增加标题、分类和关于自己\"></a>导航增加标题、分类和关于自己</h3><p>在菜单中加多tags,categories,about，如下，后面的/tags是指访问的路由</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># When running hexo in a subdirectory (e.g. domain.tld/blog)</span></span><br><span class=\"line\"><span class=\"meta\"># Remove leading slashes ( <span class=\"string\">\"/archives\"</span> -&gt; <span class=\"string\">\"archives\"</span> )</span></span><br><span class=\"line\"><span class=\"symbol\">menu:</span></span><br><span class=\"line\"><span class=\"symbol\">  home:</span> /</span><br><span class=\"line\"><span class=\"symbol\">  categories:</span> /categories</span><br><span class=\"line\"><span class=\"symbol\">  tags:</span> /tags</span><br><span class=\"line\"><span class=\"symbol\">  archives:</span> /archives</span><br><span class=\"line\"><span class=\"symbol\">  about:</span> /about</span><br><span class=\"line\">  <span class=\"meta\">#commonweal: /404</span></span><br></pre></td></tr></table></figure>\n<p>这样子增加后访问<a href=\"http://yousite/tags\" target=\"_blank\" rel=\"noopener\">http://yousite/tags</a>时 会报Cannot GET /tags/,那是因为我们没有设置标签页面,接下来创建标签主页面和分类主页</p>\n<h3 id=\"u521B_u5EFA_u6807_u7B7E_u9875_uFF0C_u5206_u7C7B_u9875_u53CA_u5173_u4E8E_u9875\"><a href=\"#u521B_u5EFA_u6807_u7B7E_u9875_uFF0C_u5206_u7C7B_u9875_u53CA_u5173_u4E8E_u9875\" class=\"headerlink\" title=\"创建标签页，分类页及关于页\"></a>创建标签页，分类页及关于页</h3><p>创建页面时，因为这种页面跟文章页面不一样，访问的地址是如/tags,那么对应的页面应该是/tags/index.md，直接用命令创建：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>tags</span><br><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>about</span><br><span class=\"line\">$ hexo new<span class=\"built_in\"> page </span>categories</span><br></pre></td></tr></table></figure>\n<p>修改标签页面内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-10</span><span class=\"number\">-11</span> <span class=\"number\">21</span><span class=\"string\">:06:35</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"tags\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>修改分类页面内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2015</span><span class=\"number\">-10</span><span class=\"number\">-11</span> <span class=\"number\">21</span><span class=\"string\">:06:35</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">\"categories\"</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<p>标签页和分类页的type要注意填好，其他就不需要填了，而about页面则和普通的文章一样，不需要设置什么</p>\n","sticky":0},{"title":"hexo添加百度统计","date":"2016-01-25T13:52:27.000Z","_content":"\n想为hexo添加百度统计可以分为以下几步\n\n## 注册百度统计\n\n### 注册\n\n如果已经有了账号可以跳过注册这步，\n注册账号的地址是\n[百度统计](http://tongji.baidu.com/web/welcome/login)\n\n## 获取百度统计代码\n\n登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:\n\n```\n\t<script>\n\tvar _hmt = _hmt || [];\n\t(function() {\n\t  var hm = document.createElement(\"script\");\n\t  hm.src = \"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; \n\t  s.parentNode.insertBefore(hm, s);\n\t})();\n\t</script>\n```\n\n统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的`//hm.baidu.com/hm.js?`后面的key值不同。\n\n## 在页面添加百度统计代码\n\n### 自带统计模板\n\n大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的`layout`/`_scripts`/`analytics`统计模板文件夹下已经有了`baidu-analytics.swig`文件:\n\n```\n\t{% if theme.baidu_analytics %}\n\t  <script type=\"text/javascript\">\n\t    var _hmt = _hmt || [];\n\t    (function() {\n\t      var hm = document.createElement(\"script\");\n\t      hm.src = \"//hm.baidu.com/hm.js?{{ theme.baidu_analytics }}\";\n\t      var s = document.getElementsByTagName(\"script\")[0];\n\t      s.parentNode.insertBefore(hm, s);\n\t    })();\n\t  </script>\n\t{% endif %}\n```\n\n只要条件满足：`theme.baidu_analytics`为true便插入这段代码。统计代码的key值已经被抽取到主题`_config.yml`中的`baidu_analytics`属性了。\n\n接下来，在主题的`_config.yml`中添加上百度统计的key就行了\n\n```\n\t# Baidu Analytics ID\n\tbaidu_analytics: your key\n```\n\n### 手动添加统计模板\n\n若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹`layout`/`_scripts`/`analytics`，新建`baidu-analytics.swig`文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。\n\n```\n\t{% include 'analytics/baidu-analytics.swig' %}\n```\n","source":"_posts/js/hexo/hexo-baido-analytics.md","raw":"title: hexo添加百度统计  \ndate: 2016-01-25 21:52:27  \ncategories: node  \ntags: hexo  \n\n---\n\n想为hexo添加百度统计可以分为以下几步\n\n## 注册百度统计\n\n### 注册\n\n如果已经有了账号可以跳过注册这步，\n注册账号的地址是\n[百度统计](http://tongji.baidu.com/web/welcome/login)\n\n## 获取百度统计代码\n\n登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:\n\n```\n\t<script>\n\tvar _hmt = _hmt || [];\n\t(function() {\n\t  var hm = document.createElement(\"script\");\n\t  hm.src = \"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\";\n\t  var s = document.getElementsByTagName(\"script\")[0]; \n\t  s.parentNode.insertBefore(hm, s);\n\t})();\n\t</script>\n```\n\n统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的`//hm.baidu.com/hm.js?`后面的key值不同。\n\n## 在页面添加百度统计代码\n\n### 自带统计模板\n\n大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的`layout`/`_scripts`/`analytics`统计模板文件夹下已经有了`baidu-analytics.swig`文件:\n\n```\n\t{% if theme.baidu_analytics %}\n\t  <script type=\"text/javascript\">\n\t    var _hmt = _hmt || [];\n\t    (function() {\n\t      var hm = document.createElement(\"script\");\n\t      hm.src = \"//hm.baidu.com/hm.js?{{ theme.baidu_analytics }}\";\n\t      var s = document.getElementsByTagName(\"script\")[0];\n\t      s.parentNode.insertBefore(hm, s);\n\t    })();\n\t  </script>\n\t{% endif %}\n```\n\n只要条件满足：`theme.baidu_analytics`为true便插入这段代码。统计代码的key值已经被抽取到主题`_config.yml`中的`baidu_analytics`属性了。\n\n接下来，在主题的`_config.yml`中添加上百度统计的key就行了\n\n```\n\t# Baidu Analytics ID\n\tbaidu_analytics: your key\n```\n\n### 手动添加统计模板\n\n若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹`layout`/`_scripts`/`analytics`，新建`baidu-analytics.swig`文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。\n\n```\n\t{% include 'analytics/baidu-analytics.swig' %}\n```\n","slug":"js/hexo/hexo-baido-analytics","published":1,"updated":"2021-08-09T06:15:05.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qf0073i9sk3dalna28","content":"<p>想为hexo添加百度统计可以分为以下几步</p>\n<h2 id=\"u6CE8_u518C_u767E_u5EA6_u7EDF_u8BA1\"><a href=\"#u6CE8_u518C_u767E_u5EA6_u7EDF_u8BA1\" class=\"headerlink\" title=\"注册百度统计\"></a>注册百度统计</h2><h3 id=\"u6CE8_u518C\"><a href=\"#u6CE8_u518C\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>如果已经有了账号可以跳过注册这步，<br>注册账号的地址是<br><a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"noopener\">百度统计</a></p>\n<h2 id=\"u83B7_u53D6_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\"><a href=\"#u83B7_u53D6_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\" class=\"headerlink\" title=\"获取百度统计代码\"></a>获取百度统计代码</h2><p>登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> _hmt = _hmt || [];</span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  hm.src = <span class=\"string\">\"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>]; </span></span><br><span class=\"line\">  s.parentNode.insertBefore(hm, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的<code>//hm.baidu.com/hm.js?</code>后面的key值不同。</p>\n<h2 id=\"u5728_u9875_u9762_u6DFB_u52A0_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\"><a href=\"#u5728_u9875_u9762_u6DFB_u52A0_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\" class=\"headerlink\" title=\"在页面添加百度统计代码\"></a>在页面添加百度统计代码</h2><h3 id=\"u81EA_u5E26_u7EDF_u8BA1_u6A21_u677F\"><a href=\"#u81EA_u5E26_u7EDF_u8BA1_u6A21_u677F\" class=\"headerlink\" title=\"自带统计模板\"></a>自带统计模板</h3><p>大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的<code>layout</code>/<code>_scripts</code>/<code>analytics</code>统计模板文件夹下已经有了<code>baidu-analytics.swig</code>文件:</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> theme.baidu_analytics %&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    var _hmt = _hmt || [];</span></span><br><span class=\"line\"><span class=\"xml\">    (function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      var hm = document.createElement(\"script\");</span></span><br><span class=\"line\"><span class=\"xml\">      hm.src = \"//hm.baidu.com/hm.js?</span><span class=\"template-variable\">&#123;&#123; theme.baidu_analytics &#125;&#125;</span><span class=\"xml\">\";</span></span><br><span class=\"line\"><span class=\"xml\">      var s = document.getElementsByTagName(\"script\")[0];</span></span><br><span class=\"line\"><span class=\"xml\">      s.parentNode.insertBefore(hm, s);</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;)();</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>只要条件满足：<code>theme.baidu_analytics</code>为true便插入这段代码。统计代码的key值已经被抽取到主题<code>_config.yml</code>中的<code>baidu_analytics</code>属性了。</p>\n<p>接下来，在主题的<code>_config.yml</code>中添加上百度统计的key就行了</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">Baidu </span>Analytics ID</span><br><span class=\"line\"><span class=\"keyword\">baidu_analytics: </span>your key</span><br></pre></td></tr></table></figure>\n<h3 id=\"u624B_u52A8_u6DFB_u52A0_u7EDF_u8BA1_u6A21_u677F\"><a href=\"#u624B_u52A8_u6DFB_u52A0_u7EDF_u8BA1_u6A21_u677F\" class=\"headerlink\" title=\"手动添加统计模板\"></a>手动添加统计模板</h3><p>若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹<code>layout</code>/<code>_scripts</code>/<code>analytics</code>，新建<code>baidu-analytics.swig</code>文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">include</span></span> 'analytics/baidu-analytics.swig' %&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>想为hexo添加百度统计可以分为以下几步</p>\n<h2 id=\"u6CE8_u518C_u767E_u5EA6_u7EDF_u8BA1\"><a href=\"#u6CE8_u518C_u767E_u5EA6_u7EDF_u8BA1\" class=\"headerlink\" title=\"注册百度统计\"></a>注册百度统计</h2><h3 id=\"u6CE8_u518C\"><a href=\"#u6CE8_u518C\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>如果已经有了账号可以跳过注册这步，<br>注册账号的地址是<br><a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"noopener\">百度统计</a></p>\n<h2 id=\"u83B7_u53D6_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\"><a href=\"#u83B7_u53D6_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\" class=\"headerlink\" title=\"获取百度统计代码\"></a>获取百度统计代码</h2><p>登陆站长后台，点击网站中心，左侧有个代码获取。基本代码都是一样的:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> _hmt = _hmt || [];</span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> hm = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">  hm.src = <span class=\"string\">\"//hm.baidu.com/hm.js?xxxxxxxxxxxxxxxxxxx\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>]; </span></span><br><span class=\"line\">  s.parentNode.insertBefore(hm, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>统计代码的作用都是一样的，在页面插入一段js请求百度的统计接口。重点在于每个人得到的<code>//hm.baidu.com/hm.js?</code>后面的key值不同。</p>\n<h2 id=\"u5728_u9875_u9762_u6DFB_u52A0_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\"><a href=\"#u5728_u9875_u9762_u6DFB_u52A0_u767E_u5EA6_u7EDF_u8BA1_u4EE3_u7801\" class=\"headerlink\" title=\"在页面添加百度统计代码\"></a>在页面添加百度统计代码</h2><h3 id=\"u81EA_u5E26_u7EDF_u8BA1_u6A21_u677F\"><a href=\"#u81EA_u5E26_u7EDF_u8BA1_u6A21_u677F\" class=\"headerlink\" title=\"自带统计模板\"></a>自带统计模板</h3><p>大部分主题已经对百度统计功能进行了配置化抽取。以Next主题为例,在主题目录下的<code>layout</code>/<code>_scripts</code>/<code>analytics</code>统计模板文件夹下已经有了<code>baidu-analytics.swig</code>文件:</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> theme.baidu_analytics %&#125;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    var _hmt = _hmt || [];</span></span><br><span class=\"line\"><span class=\"xml\">    (function() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">      var hm = document.createElement(\"script\");</span></span><br><span class=\"line\"><span class=\"xml\">      hm.src = \"//hm.baidu.com/hm.js?</span><span class=\"template-variable\">&#123;&#123; theme.baidu_analytics &#125;&#125;</span><span class=\"xml\">\";</span></span><br><span class=\"line\"><span class=\"xml\">      var s = document.getElementsByTagName(\"script\")[0];</span></span><br><span class=\"line\"><span class=\"xml\">      s.parentNode.insertBefore(hm, s);</span></span><br><span class=\"line\"><span class=\"xml\">    &#125;)();</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>\n<p>只要条件满足：<code>theme.baidu_analytics</code>为true便插入这段代码。统计代码的key值已经被抽取到主题<code>_config.yml</code>中的<code>baidu_analytics</code>属性了。</p>\n<p>接下来，在主题的<code>_config.yml</code>中添加上百度统计的key就行了</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">Baidu </span>Analytics ID</span><br><span class=\"line\"><span class=\"keyword\">baidu_analytics: </span>your key</span><br></pre></td></tr></table></figure>\n<h3 id=\"u624B_u52A8_u6DFB_u52A0_u7EDF_u8BA1_u6A21_u677F\"><a href=\"#u624B_u52A8_u6DFB_u52A0_u7EDF_u8BA1_u6A21_u677F\" class=\"headerlink\" title=\"手动添加统计模板\"></a>手动添加统计模板</h3><p>若主题中没有内置百度统计模板的，可以手动添加，像上面自带统计模板一样，建立一个统计模板文件夹<code>layout</code>/<code>_scripts</code>/<code>analytics</code>，新建<code>baidu-analytics.swig</code>文件并加入上面那段代码。接着，在想添加的模板上引入这文件就行了。</p>\n<figure class=\"highlight django\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">include</span></span> 'analytics/baidu-analytics.swig' %&#125;</span></span><br></pre></td></tr></table></figure>\n","sticky":0},{"title":"hexo gitpage 404","date":"2021-10-03T13:30:20.000Z","_content":"\n\n\n## 一个奇怪的问题\n\n* Step 1 更新了一篇新的post;\n\n* Step 2 使用`hexo s`本地页面显示正常 ;\n\n* Step 3 使用`hexo g -d`命令执行正确;\n\n* Step 4 打开对应的Git page，发现404\n\n## 为什么会出现\n\n* 首先从最后环节开始排查，使用`hexo d --debug`查看部署是否有问题，没看到报错，把`.deploy_git`下的文件清理掉，重新跑几次也没解决\n* 接着看部署问题，`hexo g --debug`，文件生成也正常，无报错\n* 继续看生成的入口文件，发现`index.html`是空的，问题可能在这\n* 搜索`hexo index.html empty` 这回找到别人也有一样的问题，找到问题：\n\n```\n node 版本太高了，hexo 还不支持\n```\n\n## 解决\n\n查看`hexo`版本：\n\n```\n$ hexo -v                                                                            \nhexo: 3.9.0\nhexo-cli: 4.3.0\nos: darwin 20.5.0 11.4\n```\n\n参考[hexo官网](https://hexo.io/news/2021/07/09/hexo-renderer-pug-2-0-0-hexo-cli-4-3-0-hexo-paginaiton-2-0-0-hexo-clean-css-2-0-0/)推荐，支持的node版本是`8`以上或者`12`\n\n```\ndrop node 8 and add node 12\n```\n\n查看本地`node -v`:`v16.6.1`确实不符合，重新下载了`node12`，再部署解决～\n\n## 后记\n\n版本不兼容也没有提示，对使用者还是有些不友好，把错误都吞掉了\n","source":"_posts/js/hexo/hexo-gitpage-404.md","raw":"title: hexo gitpage 404  \ndate: 2021-10-03 21:30:20  \ncategories: node  \ntags: hexo  \n\n---\n\n\n\n## 一个奇怪的问题\n\n* Step 1 更新了一篇新的post;\n\n* Step 2 使用`hexo s`本地页面显示正常 ;\n\n* Step 3 使用`hexo g -d`命令执行正确;\n\n* Step 4 打开对应的Git page，发现404\n\n## 为什么会出现\n\n* 首先从最后环节开始排查，使用`hexo d --debug`查看部署是否有问题，没看到报错，把`.deploy_git`下的文件清理掉，重新跑几次也没解决\n* 接着看部署问题，`hexo g --debug`，文件生成也正常，无报错\n* 继续看生成的入口文件，发现`index.html`是空的，问题可能在这\n* 搜索`hexo index.html empty` 这回找到别人也有一样的问题，找到问题：\n\n```\n node 版本太高了，hexo 还不支持\n```\n\n## 解决\n\n查看`hexo`版本：\n\n```\n$ hexo -v                                                                            \nhexo: 3.9.0\nhexo-cli: 4.3.0\nos: darwin 20.5.0 11.4\n```\n\n参考[hexo官网](https://hexo.io/news/2021/07/09/hexo-renderer-pug-2-0-0-hexo-cli-4-3-0-hexo-paginaiton-2-0-0-hexo-clean-css-2-0-0/)推荐，支持的node版本是`8`以上或者`12`\n\n```\ndrop node 8 and add node 12\n```\n\n查看本地`node -v`:`v16.6.1`确实不符合，重新下载了`node12`，再部署解决～\n\n## 后记\n\n版本不兼容也没有提示，对使用者还是有些不友好，把错误都吞掉了\n","slug":"js/hexo/hexo-gitpage-404","published":1,"updated":"2021-10-12T10:31:02.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qg0077i9skew5sddx5","content":"<h2 id=\"u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898\"><a href=\"#u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898\" class=\"headerlink\" title=\"一个奇怪的问题\"></a>一个奇怪的问题</h2><ul>\n<li><p>Step 1 更新了一篇新的post;</p>\n</li>\n<li><p>Step 2 使用<code>hexo s</code>本地页面显示正常 ;</p>\n</li>\n<li><p>Step 3 使用<code>hexo g -d</code>命令执行正确;</p>\n</li>\n<li><p>Step 4 打开对应的Git page，发现404</p>\n</li>\n</ul>\n<h2 id=\"u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0\"><a href=\"#u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0\" class=\"headerlink\" title=\"为什么会出现\"></a>为什么会出现</h2><ul>\n<li>首先从最后环节开始排查，使用<code>hexo d --debug</code>查看部署是否有问题，没看到报错，把<code>.deploy_git</code>下的文件清理掉，重新跑几次也没解决</li>\n<li>接着看部署问题，<code>hexo g --debug</code>，文件生成也正常，无报错</li>\n<li>继续看生成的入口文件，发现<code>index.html</code>是空的，问题可能在这</li>\n<li>搜索<code>hexo index.html empty</code> 这回找到别人也有一样的问题，找到问题：</li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">版本太高了，hexo</span> 还不支持</span><br></pre></td></tr></table></figure>\n<h2 id=\"u89E3_u51B3\"><a href=\"#u89E3_u51B3\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>查看<code>hexo</code>版本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">-v</span>                                                                            </span><br><span class=\"line\"><span class=\"attr\">hexo:</span> <span class=\"number\">3.9</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">hexo-cli:</span> <span class=\"number\">4.3</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">os:</span> <span class=\"string\">darwin</span> <span class=\"number\">20.5</span><span class=\"number\">.0</span> <span class=\"number\">11.4</span></span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://hexo.io/news/2021/07/09/hexo-renderer-pug-2-0-0-hexo-cli-4-3-0-hexo-paginaiton-2-0-0-hexo-clean-css-2-0-0/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>推荐，支持的node版本是<code>8</code>以上或者<code>12</code></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop <span class=\"keyword\">node</span> <span class=\"title\">8</span> <span class=\"keyword\">and</span> add <span class=\"keyword\">node</span> <span class=\"title\">12</span></span><br></pre></td></tr></table></figure>\n<p>查看本地<code>node -v</code>:<code>v16.6.1</code>确实不符合，重新下载了<code>node12</code>，再部署解决～</p>\n<h2 id=\"u540E_u8BB0\"><a href=\"#u540E_u8BB0\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>版本不兼容也没有提示，对使用者还是有些不友好，把错误都吞掉了</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898\"><a href=\"#u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898\" class=\"headerlink\" title=\"一个奇怪的问题\"></a>一个奇怪的问题</h2><ul>\n<li><p>Step 1 更新了一篇新的post;</p>\n</li>\n<li><p>Step 2 使用<code>hexo s</code>本地页面显示正常 ;</p>\n</li>\n<li><p>Step 3 使用<code>hexo g -d</code>命令执行正确;</p>\n</li>\n<li><p>Step 4 打开对应的Git page，发现404</p>\n</li>\n</ul>\n<h2 id=\"u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0\"><a href=\"#u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0\" class=\"headerlink\" title=\"为什么会出现\"></a>为什么会出现</h2><ul>\n<li>首先从最后环节开始排查，使用<code>hexo d --debug</code>查看部署是否有问题，没看到报错，把<code>.deploy_git</code>下的文件清理掉，重新跑几次也没解决</li>\n<li>接着看部署问题，<code>hexo g --debug</code>，文件生成也正常，无报错</li>\n<li>继续看生成的入口文件，发现<code>index.html</code>是空的，问题可能在这</li>\n<li>搜索<code>hexo index.html empty</code> 这回找到别人也有一样的问题，找到问题：</li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">版本太高了，hexo</span> 还不支持</span><br></pre></td></tr></table></figure>\n<h2 id=\"u89E3_u51B3\"><a href=\"#u89E3_u51B3\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>查看<code>hexo</code>版本：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">-v</span>                                                                            </span><br><span class=\"line\"><span class=\"attr\">hexo:</span> <span class=\"number\">3.9</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">hexo-cli:</span> <span class=\"number\">4.3</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">os:</span> <span class=\"string\">darwin</span> <span class=\"number\">20.5</span><span class=\"number\">.0</span> <span class=\"number\">11.4</span></span><br></pre></td></tr></table></figure>\n<p>参考<a href=\"https://hexo.io/news/2021/07/09/hexo-renderer-pug-2-0-0-hexo-cli-4-3-0-hexo-paginaiton-2-0-0-hexo-clean-css-2-0-0/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>推荐，支持的node版本是<code>8</code>以上或者<code>12</code></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop <span class=\"keyword\">node</span> <span class=\"title\">8</span> <span class=\"keyword\">and</span> add <span class=\"keyword\">node</span> <span class=\"title\">12</span></span><br></pre></td></tr></table></figure>\n<p>查看本地<code>node -v</code>:<code>v16.6.1</code>确实不符合，重新下载了<code>node12</code>，再部署解决～</p>\n<h2 id=\"u540E_u8BB0\"><a href=\"#u540E_u8BB0\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>版本不兼容也没有提示，对使用者还是有些不友好，把错误都吞掉了</p>\n","sticky":0},{"title":"Golang错误处理","date":"2022-03-13T08:31:16.000Z","_content":"\n> golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题\n\n# 标准库 vs 第三方包pkg/errors\n\n\n\n`error`是一个接口，实现了`Error()`方法，返回字符串\n\n```\ntype error interface {\n\tError() string\n}\n```\n\n## 标准库errors\n\n标准库提供了简单的错误创建与处理，我们使用官方包errors简单新建一个错误\n\n```\npackage main \nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\nfunc main() {\n\terr := errors.New(\"something error\")\n  fmt.Printf(\"%+v\", err)\n}\n```\n\n得到结果是把New的错误信息打印出来：\n\n```\nsomething error\n```\n\n除了通过`errors.New()`新建错误，标准库还支持通过`fmt.Errorf()`创建：\n\n```\nerr = fmt.Errorf(\"this is error：%s\", \"bad news\")\n```\n\n## 第三方包pkg/errors\n\npkg/errors是Go标准库的替代品，它提供了一些非常有用的操作用于封装和处理错误\n获取第三方包：\n\n`go get github.com/pkg/errors/`\n\n同样新建错误(也支持用errors.Errorf创建)：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pkg/errors\"\n)\n\nfunc main() {\n\terr := errors.New(\"something error\")\n\tfmt.Printf(\"%+v\", err)\n}\n\n```\n\n打印结果如下，我们可以看到除用`%+v`打印时除了本身的信息，对应的堆栈信息，错误行数也输出了，相比标准库更好用：\n```\nsomething error\nmain.main\n\t/src/error/error.go:10\nruntime.main\n\t/src/runtime/proc.go:225\nruntime.goexit\n\t/usr/local/go/src/runtime/asm_amd64.s:1371\n```\n\n## 总结\n\n我们在应用程序中使用`pkg/errors`包处理错误，但注意在公共库当中，我们一般不用这个包，减少依赖\n\n# 错误处理方式\n\n\n## 哨兵错误\n\n`Sentinel Error`哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式\n\n如io包的`io.EOF`，gorm的`gorm.ErrRecordNotFound`，底层系统调用的`syscall.ENOENT`等..\n\n我们在使用时一般用等值或者`errors.Is`判断：\n\n```\n...\nif err == gorm.ErrRecordNotFound {\n\tdosomething....\n}\n\nif errors.Is(err, gorm.ErrRecordNotFound) {\n\tdosomething....\n}\n\n```\n\n优点：不用判断`error.Error()`返回的字符串\n缺点：不灵活，将`error`当作包的API暴露给第三方，调用方必须先了解有哪些预定义的错误，并在程序中进行比较。服务提供方需要公共文档说明各种Error，导致包之间有了依赖，重构或版本升级也麻烦\n总结：尽可能避免使用这种方式\n\n\n## 自定义类型error\n\n`error`是interface，只要实现了`Error()`都可以当error使用\n\n如\n\n```\ntype MyErr struct {\n\tMsg  string\n\tFile string\n\tLine int\n}\n\nfunc (e *MyErr) Error() string {\n\treturn fmt.Sprintf(\"%s::%d:%s\", e.File, e.Line, e.Msg)\n}\n\nfunc doSomething() error {\n\terr := &MyErr{\"err msg\", \"error.go\", 12}\n\treturn err\n}\n\nfunc main() {\n\terr := doSomething()\n\tfmt.Printf(\"%+v\", err)\n\tswitch err := err.(type) {\n\tcase nil:\n\t\t//call success\n\tcase *MyErr:\n\t\tfmt.Println(\"error occurred on line:\", err.Line)\n  default:\n  \t//unknown error\n\t}\n}\n```\n\n得到结果是实现的`Error()`里定义的格式：`error.go::12:err msg`\n\n优点：与错误值相比，错误类型的改进是能包装提供更多上下文，例如标准库的`os.PathError`\n缺点：同样需要把错误类型暴露给调用方，而调用方需要用`switch`断言类型，还是有耦合，不利于维护\n结论：尽量避免使用error types，至少避免将他们作为公共API的一部分\n\n\n\n## 不透明处理\n\n不透明错误是`opaque errors`，调用方捕获错误即返回上层，这样对代码耦合是最少的：\n\n```\nfunc dosomething() err {\n\terr := step1()\n\tif err != nil {\n\t\treturn err\n\t}\n\t...\n}\n```\n\n优点：对代码耦合最少\n缺点：少数情况下当想对具体错误进行判断时不太够用\n总结：可以用在大部分情况\n\n## 按行为断言\n\n当调用方需要调查错误性质，并做相应处理，可以使用行为断言，而不是断言错误是特定类型或值\n\n如`net`包的`Error`接口，定义了`Timeout()`,`Temporary()`两种行为，调用方可以通过行为做对应处理\t：\n\n```\ntype Error interface {\n\terror\n\tTimeout() bool   // Is the error a timeout?\n\tTemporary() bool // Is the error temporary?\n}\n```\n\n处理：\n\n```\nerr := dosomething()\nif nerr, ok := err.(net.Error); ok && nerr.Temporary() {\n\ttime.Sleep(1e9)\n\tcontinue\n}\nif err != nil {\n\t...\n}\n```\n\n优点：我们可以不导入定义错误的包，或实际上不了解error底层类型的情况下实现逻辑处理\n结论：比预定义错误和自定义错误好\n\n# 一些好习惯\n\n\n## 减少缩进代码\n\n错误处理时先判断错误，遇到错误则返回，使代码成为一条流畅的直线，而不是缩进的代码\n\n```\nerr := A()\n\nif err != nil {\n\t//handle error \n}\n\n//do something\nerr = B()\nif err != nil {\n\t// handle error \n}\n//do something\n```\n\n## 减少重复判断\n\n如统计`io.Reader`读取内容行数的实现：\n\n普通实现:\n\n```\nfunc CountLines(r io.Reader) (int, error) {\n\tvar (\n\t\tbr    = bufio.NewReader(r)\n\t\tlines int\n\t\terr   error\n\t)\n\n\tfor {\n\t\t// 读取到换行符就说明是一行\n\t\t_, err = br.ReadString('\\n')\n\t\tlines++\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 当错误是 EOF 的时候说明文件读取完毕了\n\tif err != io.EOF {\n\t\treturn 0, err\n\t}\n\n\treturn lines, err\n}\n\n```\n\n使用`bufio.scan`实现:\n\n```\nfunc CountLines(r io.Reader) (int, error) {\n\tvar (\n\t\tsc    = bufio.NewScanner(r)\n\t\tlines int\n\t)\n\n\tfor sc.Scan() {\n\t\tlines++\n\t}\n\n\treturn lines, sc.Err()\n}\n```\n\n`bufio.scan`实现后少了很多`if err`判断，因为`sc.Scan`做了类似的处理，需要循环读以的都可以考虑这样包装\n\n## wrap error:错误包装\n\n第三方包`github.com/pkg/errors`的Wrap可以追加错误信息和堆栈信息，这样我们更加方便定位错误\n\n```\n// Wrap returns an error annotating err with a stack trace\n// at the point Wrap is called, and the supplied message.\n// If err is nil, Wrap returns nil.\nfunc Wrap(err error, message string) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\terr = &withMessage{\n\t\tcause: err,\n\t\tmsg:   message,\n\t}\n\treturn &withStack{\n\t\terr,\n\t\tcallers(),\n\t}\n}\n```\n\n但请不要处处都使用`errors.Wrap`，因为这样会产生大量无效堆栈，一般我们只需要在调用标准库包时添加，平时遇到错误可以用无透明方式返回处理，如果想再追加Message，可以使用`errors.WithMessage`\n\n```\nerr = doSomething()\n\nif err != nil {\n  err = xerrors.WithMessage(err, \"dosomething fail\")\n  return\n}\n```\n\n经过多层包装的错误没法与哨兵模式结合判断，这时可以通过`errors.Cause`获取最初的`error`来判断：\n\n```\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\n\txerrors \"github.com/pkg/errors\"\n)\n\nerr := io.EOF\nerr = xerrors.Wrap(err, \"wrap message\")\n\nif errors.Is(xerrors.Cause(err), io.EOF) {\nfmt.Print(\"true\")\n}\n```\n\n\n\n\n\n","source":"_posts/golang/learn/error.md","raw":"title:  Golang错误处理\ndate: 2022-03-13 16:31:16 \ntags: [golang,errors]  \n\ncategories: golang\n---\n\n> golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题\n\n# 标准库 vs 第三方包pkg/errors\n\n\n\n`error`是一个接口，实现了`Error()`方法，返回字符串\n\n```\ntype error interface {\n\tError() string\n}\n```\n\n## 标准库errors\n\n标准库提供了简单的错误创建与处理，我们使用官方包errors简单新建一个错误\n\n```\npackage main \nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\nfunc main() {\n\terr := errors.New(\"something error\")\n  fmt.Printf(\"%+v\", err)\n}\n```\n\n得到结果是把New的错误信息打印出来：\n\n```\nsomething error\n```\n\n除了通过`errors.New()`新建错误，标准库还支持通过`fmt.Errorf()`创建：\n\n```\nerr = fmt.Errorf(\"this is error：%s\", \"bad news\")\n```\n\n## 第三方包pkg/errors\n\npkg/errors是Go标准库的替代品，它提供了一些非常有用的操作用于封装和处理错误\n获取第三方包：\n\n`go get github.com/pkg/errors/`\n\n同样新建错误(也支持用errors.Errorf创建)：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pkg/errors\"\n)\n\nfunc main() {\n\terr := errors.New(\"something error\")\n\tfmt.Printf(\"%+v\", err)\n}\n\n```\n\n打印结果如下，我们可以看到除用`%+v`打印时除了本身的信息，对应的堆栈信息，错误行数也输出了，相比标准库更好用：\n```\nsomething error\nmain.main\n\t/src/error/error.go:10\nruntime.main\n\t/src/runtime/proc.go:225\nruntime.goexit\n\t/usr/local/go/src/runtime/asm_amd64.s:1371\n```\n\n## 总结\n\n我们在应用程序中使用`pkg/errors`包处理错误，但注意在公共库当中，我们一般不用这个包，减少依赖\n\n# 错误处理方式\n\n\n## 哨兵错误\n\n`Sentinel Error`哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式\n\n如io包的`io.EOF`，gorm的`gorm.ErrRecordNotFound`，底层系统调用的`syscall.ENOENT`等..\n\n我们在使用时一般用等值或者`errors.Is`判断：\n\n```\n...\nif err == gorm.ErrRecordNotFound {\n\tdosomething....\n}\n\nif errors.Is(err, gorm.ErrRecordNotFound) {\n\tdosomething....\n}\n\n```\n\n优点：不用判断`error.Error()`返回的字符串\n缺点：不灵活，将`error`当作包的API暴露给第三方，调用方必须先了解有哪些预定义的错误，并在程序中进行比较。服务提供方需要公共文档说明各种Error，导致包之间有了依赖，重构或版本升级也麻烦\n总结：尽可能避免使用这种方式\n\n\n## 自定义类型error\n\n`error`是interface，只要实现了`Error()`都可以当error使用\n\n如\n\n```\ntype MyErr struct {\n\tMsg  string\n\tFile string\n\tLine int\n}\n\nfunc (e *MyErr) Error() string {\n\treturn fmt.Sprintf(\"%s::%d:%s\", e.File, e.Line, e.Msg)\n}\n\nfunc doSomething() error {\n\terr := &MyErr{\"err msg\", \"error.go\", 12}\n\treturn err\n}\n\nfunc main() {\n\terr := doSomething()\n\tfmt.Printf(\"%+v\", err)\n\tswitch err := err.(type) {\n\tcase nil:\n\t\t//call success\n\tcase *MyErr:\n\t\tfmt.Println(\"error occurred on line:\", err.Line)\n  default:\n  \t//unknown error\n\t}\n}\n```\n\n得到结果是实现的`Error()`里定义的格式：`error.go::12:err msg`\n\n优点：与错误值相比，错误类型的改进是能包装提供更多上下文，例如标准库的`os.PathError`\n缺点：同样需要把错误类型暴露给调用方，而调用方需要用`switch`断言类型，还是有耦合，不利于维护\n结论：尽量避免使用error types，至少避免将他们作为公共API的一部分\n\n\n\n## 不透明处理\n\n不透明错误是`opaque errors`，调用方捕获错误即返回上层，这样对代码耦合是最少的：\n\n```\nfunc dosomething() err {\n\terr := step1()\n\tif err != nil {\n\t\treturn err\n\t}\n\t...\n}\n```\n\n优点：对代码耦合最少\n缺点：少数情况下当想对具体错误进行判断时不太够用\n总结：可以用在大部分情况\n\n## 按行为断言\n\n当调用方需要调查错误性质，并做相应处理，可以使用行为断言，而不是断言错误是特定类型或值\n\n如`net`包的`Error`接口，定义了`Timeout()`,`Temporary()`两种行为，调用方可以通过行为做对应处理\t：\n\n```\ntype Error interface {\n\terror\n\tTimeout() bool   // Is the error a timeout?\n\tTemporary() bool // Is the error temporary?\n}\n```\n\n处理：\n\n```\nerr := dosomething()\nif nerr, ok := err.(net.Error); ok && nerr.Temporary() {\n\ttime.Sleep(1e9)\n\tcontinue\n}\nif err != nil {\n\t...\n}\n```\n\n优点：我们可以不导入定义错误的包，或实际上不了解error底层类型的情况下实现逻辑处理\n结论：比预定义错误和自定义错误好\n\n# 一些好习惯\n\n\n## 减少缩进代码\n\n错误处理时先判断错误，遇到错误则返回，使代码成为一条流畅的直线，而不是缩进的代码\n\n```\nerr := A()\n\nif err != nil {\n\t//handle error \n}\n\n//do something\nerr = B()\nif err != nil {\n\t// handle error \n}\n//do something\n```\n\n## 减少重复判断\n\n如统计`io.Reader`读取内容行数的实现：\n\n普通实现:\n\n```\nfunc CountLines(r io.Reader) (int, error) {\n\tvar (\n\t\tbr    = bufio.NewReader(r)\n\t\tlines int\n\t\terr   error\n\t)\n\n\tfor {\n\t\t// 读取到换行符就说明是一行\n\t\t_, err = br.ReadString('\\n')\n\t\tlines++\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// 当错误是 EOF 的时候说明文件读取完毕了\n\tif err != io.EOF {\n\t\treturn 0, err\n\t}\n\n\treturn lines, err\n}\n\n```\n\n使用`bufio.scan`实现:\n\n```\nfunc CountLines(r io.Reader) (int, error) {\n\tvar (\n\t\tsc    = bufio.NewScanner(r)\n\t\tlines int\n\t)\n\n\tfor sc.Scan() {\n\t\tlines++\n\t}\n\n\treturn lines, sc.Err()\n}\n```\n\n`bufio.scan`实现后少了很多`if err`判断，因为`sc.Scan`做了类似的处理，需要循环读以的都可以考虑这样包装\n\n## wrap error:错误包装\n\n第三方包`github.com/pkg/errors`的Wrap可以追加错误信息和堆栈信息，这样我们更加方便定位错误\n\n```\n// Wrap returns an error annotating err with a stack trace\n// at the point Wrap is called, and the supplied message.\n// If err is nil, Wrap returns nil.\nfunc Wrap(err error, message string) error {\n\tif err == nil {\n\t\treturn nil\n\t}\n\terr = &withMessage{\n\t\tcause: err,\n\t\tmsg:   message,\n\t}\n\treturn &withStack{\n\t\terr,\n\t\tcallers(),\n\t}\n}\n```\n\n但请不要处处都使用`errors.Wrap`，因为这样会产生大量无效堆栈，一般我们只需要在调用标准库包时添加，平时遇到错误可以用无透明方式返回处理，如果想再追加Message，可以使用`errors.WithMessage`\n\n```\nerr = doSomething()\n\nif err != nil {\n  err = xerrors.WithMessage(err, \"dosomething fail\")\n  return\n}\n```\n\n经过多层包装的错误没法与哨兵模式结合判断，这时可以通过`errors.Cause`获取最初的`error`来判断：\n\n```\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\n\txerrors \"github.com/pkg/errors\"\n)\n\nerr := io.EOF\nerr = xerrors.Wrap(err, \"wrap message\")\n\nif errors.Is(xerrors.Cause(err), io.EOF) {\nfmt.Print(\"true\")\n}\n```\n\n\n\n\n\n","slug":"golang/learn/error","published":1,"updated":"2022-03-13T08:05:56.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1vkj7qh0078i9skt09tfq1z","content":"<blockquote>\n<p>golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题</p>\n</blockquote>\n<h1 id=\"u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors\"><a href=\"#u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors\" class=\"headerlink\" title=\"标准库 vs 第三方包pkg/errors\"></a>标准库 vs 第三方包pkg/errors</h1><p><code>error</code>是一个接口，实现了<code>Error()</code>方法，返回字符串</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">type <span class=\"builtin-name\">error</span><span class=\"built_in\"> interface </span>&#123;</span><br><span class=\"line\">\t<span class=\"builtin-name\">Error</span>() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6807_u51C6_u5E93errors\"><a href=\"#u6807_u51C6_u5E93errors\" class=\"headerlink\" title=\"标准库errors\"></a>标准库errors</h2><p>标准库提供了简单的错误创建与处理，我们使用官方包errors简单新建一个错误</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">main</span> </span><br><span class=\"line\"><span class=\"selector-tag\">import</span> (</span><br><span class=\"line\">\t\"<span class=\"selector-tag\">errors</span>\"</span><br><span class=\"line\">\t\"<span class=\"selector-tag\">fmt</span>\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">func</span> <span class=\"selector-tag\">main</span>() &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">err </span>:= errors.<span class=\"built_in\">New</span>(<span class=\"string\">\"something error\"</span>)</span><br><span class=\"line\">  fmt.<span class=\"built_in\">Printf</span>(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>得到结果是把New的错误信息打印出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">something</span> <span class=\"literal\">error</span></span><br></pre></td></tr></table></figure>\n<p>除了通过<code>errors.New()</code>新建错误，标准库还支持通过<code>fmt.Errorf()</code>创建：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">err</span> = fmt.Errorf(<span class=\"string\">\"this is error：%s\"</span>, <span class=\"string\">\"bad news\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B2C_u4E09_u65B9_u5305pkg/errors\"><a href=\"#u7B2C_u4E09_u65B9_u5305pkg/errors\" class=\"headerlink\" title=\"第三方包pkg/errors\"></a>第三方包pkg/errors</h2><p>pkg/errors是Go标准库的替代品，它提供了一些非常有用的操作用于封装和处理错误<br>获取第三方包：</p>\n<p><code>go get github.com/pkg/errors/</code></p>\n<p>同样新建错误(也支持用errors.Errorf创建)：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := errors.New(<span class=\"string\">\"something error\"</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果如下，我们可以看到除用<code>%+v</code>打印时除了本身的信息，对应的堆栈信息，错误行数也输出了，相比标准库更好用：<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">something error</span><br><span class=\"line\">main.main</span><br><span class=\"line\">\t<span class=\"regexp\">/src/</span>error/error.<span class=\"string\">go:</span><span class=\"number\">10</span></span><br><span class=\"line\">runtime.main</span><br><span class=\"line\">\t<span class=\"regexp\">/src/</span>runtime/proc.<span class=\"string\">go:</span><span class=\"number\">225</span></span><br><span class=\"line\">runtime.goexit</span><br><span class=\"line\">\t<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/go/</span>src<span class=\"regexp\">/runtime/</span>asm_amd64.<span class=\"string\">s:</span><span class=\"number\">1371</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u603B_u7ED3\"><a href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们在应用程序中使用<code>pkg/errors</code>包处理错误，但注意在公共库当中，我们一般不用这个包，减少依赖</p>\n<h1 id=\"u9519_u8BEF_u5904_u7406_u65B9_u5F0F\"><a href=\"#u9519_u8BEF_u5904_u7406_u65B9_u5F0F\" class=\"headerlink\" title=\"错误处理方式\"></a>错误处理方式</h1><h2 id=\"u54E8_u5175_u9519_u8BEF\"><a href=\"#u54E8_u5175_u9519_u8BEF\" class=\"headerlink\" title=\"哨兵错误\"></a>哨兵错误</h2><p><code>Sentinel Error</code>哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式</p>\n<p>如io包的<code>io.EOF</code>，gorm的<code>gorm.ErrRecordNotFound</code>，底层系统调用的<code>syscall.ENOENT</code>等..</p>\n<p>我们在使用时一般用等值或者<code>errors.Is</code>判断：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == gorm.ErrRecordNotFound &#123;</span><br><span class=\"line\">\tdosomething<span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class=\"line\">\tdosomething<span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：不用判断<code>error.Error()</code>返回的字符串<br>缺点：不灵活，将<code>error</code>当作包的API暴露给第三方，调用方必须先了解有哪些预定义的错误，并在程序中进行比较。服务提供方需要公共文档说明各种Error，导致包之间有了依赖，重构或版本升级也麻烦<br>总结：尽可能避免使用这种方式</p>\n<h2 id=\"u81EA_u5B9A_u4E49_u7C7B_u578Berror\"><a href=\"#u81EA_u5B9A_u4E49_u7C7B_u578Berror\" class=\"headerlink\" title=\"自定义类型error\"></a>自定义类型error</h2><p><code>error</code>是interface，只要实现了<code>Error()</code>都可以当error使用</p>\n<p>如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyErr <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMsg  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tFile <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLine <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *MyErr)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%s::%d:%s\"</span>, e.File, e.Line, e.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\terr := &amp;MyErr&#123;<span class=\"string\">\"err msg\"</span>, <span class=\"string\">\"error.go\"</span>, <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> err := err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">//call success</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *MyErr:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"error occurred on line:\"</span>, err.Line)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//unknown error</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>得到结果是实现的<code>Error()</code>里定义的格式：<code>error.go::12:err msg</code></p>\n<p>优点：与错误值相比，错误类型的改进是能包装提供更多上下文，例如标准库的<code>os.PathError</code><br>缺点：同样需要把错误类型暴露给调用方，而调用方需要用<code>switch</code>断言类型，还是有耦合，不利于维护<br>结论：尽量避免使用error types，至少避免将他们作为公共API的一部分</p>\n<h2 id=\"u4E0D_u900F_u660E_u5904_u7406\"><a href=\"#u4E0D_u900F_u660E_u5904_u7406\" class=\"headerlink\" title=\"不透明处理\"></a>不透明处理</h2><p>不透明错误是<code>opaque errors</code>，调用方捕获错误即返回上层，这样对代码耦合是最少的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">func</span> <span class=\"selector-tag\">dosomething</span>() <span class=\"selector-tag\">err</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">err </span>:= <span class=\"built_in\">step1</span>()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：对代码耦合最少<br>缺点：少数情况下当想对具体错误进行判断时不太够用<br>总结：可以用在大部分情况</p>\n<h2 id=\"u6309_u884C_u4E3A_u65AD_u8A00\"><a href=\"#u6309_u884C_u4E3A_u65AD_u8A00\" class=\"headerlink\" title=\"按行为断言\"></a>按行为断言</h2><p>当调用方需要调查错误性质，并做相应处理，可以使用行为断言，而不是断言错误是特定类型或值</p>\n<p>如<code>net</code>包的<code>Error</code>接口，定义了<code>Timeout()</code>,<code>Temporary()</code>两种行为，调用方可以通过行为做对应处理    ：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span> <span class=\"built_in\">Error</span> interface &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">error</span></span><br><span class=\"line\">\t<span class=\"built_in\">Timeout</span>() <span class=\"keyword\">bool</span>   <span class=\"comment\">// Is the error a timeout?</span></span><br><span class=\"line\">\t<span class=\"built_in\">Temporary</span>() <span class=\"keyword\">bool</span> <span class=\"comment\">// Is the error temporary?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> := dosomething()</span><br><span class=\"line\"><span class=\"keyword\">if</span> nerr, ok := <span class=\"keyword\">err</span>.(<span class=\"keyword\">net</span>.<span class=\"keyword\">Error</span>); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class=\"line\">\ttime.<span class=\"keyword\">Sleep</span>(1e9)</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：我们可以不导入定义错误的包，或实际上不了解error底层类型的情况下实现逻辑处理<br>结论：比预定义错误和自定义错误好</p>\n<h1 id=\"u4E00_u4E9B_u597D_u4E60_u60EF\"><a href=\"#u4E00_u4E9B_u597D_u4E60_u60EF\" class=\"headerlink\" title=\"一些好习惯\"></a>一些好习惯</h1><h2 id=\"u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801\"><a href=\"#u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801\" class=\"headerlink\" title=\"减少缩进代码\"></a>减少缩进代码</h2><p>错误处理时先判断错误，遇到错误则返回，使代码成为一条流畅的直线，而不是缩进的代码</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> := A()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//handle error </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br><span class=\"line\"><span class=\"keyword\">err</span> = B()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// handle error </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u51CF_u5C11_u91CD_u590D_u5224_u65AD\"><a href=\"#u51CF_u5C11_u91CD_u590D_u5224_u65AD\" class=\"headerlink\" title=\"减少重复判断\"></a>减少重复判断</h2><p>如统计<code>io.Reader</code>读取内容行数的实现：</p>\n<p>普通实现:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">func CountLines(r io.Reader) (int, <span class=\"keyword\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">br</span>    = bufio.NewReader(r)</span><br><span class=\"line\">\t\tlines int</span><br><span class=\"line\">\t\t<span class=\"keyword\">err</span>   <span class=\"keyword\">error</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取到换行符就说明是一行</span></span><br><span class=\"line\">\t\t_, <span class=\"keyword\">err</span> = <span class=\"keyword\">br</span>.ReadString('\\<span class=\"keyword\">n</span>')</span><br><span class=\"line\">\t\tlines++</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当错误是 EOF 的时候说明文件读取完毕了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != io.EOF &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> 0, <span class=\"keyword\">err</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lines, <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>bufio.scan</code>实现:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CountLines</span><span class=\"params\">(r io.Reader)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tsc    = bufio.NewScanner(r)</span><br><span class=\"line\">\t\tlines <span class=\"keyword\">int</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sc.Scan() &#123;</span><br><span class=\"line\">\t\tlines++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lines, sc.Err()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>bufio.scan</code>实现后少了很多<code>if err</code>判断，因为<code>sc.Scan</code>做了类似的处理，需要循环读以的都可以考虑这样包装</p>\n<h2 id=\"wrap_error_3A_u9519_u8BEF_u5305_u88C5\"><a href=\"#wrap_error_3A_u9519_u8BEF_u5305_u88C5\" class=\"headerlink\" title=\"wrap error:错误包装\"></a>wrap error:错误包装</h2><p>第三方包<code>github.com/pkg/errors</code>的Wrap可以追加错误信息和堆栈信息，这样我们更加方便定位错误</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrap returns an error annotating err with a stack trace</span></span><br><span class=\"line\"><span class=\"comment\">// at the point Wrap is called, and the supplied message.</span></span><br><span class=\"line\"><span class=\"comment\">// If err is nil, Wrap returns nil.</span></span><br><span class=\"line\">func Wrap(<span class=\"keyword\">err</span> <span class=\"keyword\">error</span>, message string) <span class=\"keyword\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> == nil &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">err</span> = &amp;withMessage&#123;</span><br><span class=\"line\">\t\tcause: <span class=\"keyword\">err</span>,</span><br><span class=\"line\">\t\tmsg:   message,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;withStack&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">err</span>,</span><br><span class=\"line\">\t\tcallers(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但请不要处处都使用<code>errors.Wrap</code>，因为这样会产生大量无效堆栈，一般我们只需要在调用标准库包时添加，平时遇到错误可以用无透明方式返回处理，如果想再追加Message，可以使用<code>errors.WithMessage</code></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> = doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">  <span class=\"keyword\">err</span> = xerrors.WithMessage(<span class=\"keyword\">err</span>, <span class=\"string\">\"dosomething fail\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过多层包装的错误没法与哨兵模式结合判断，这时可以通过<code>errors.Cause</code>获取最初的<code>error</code>来判断：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\txerrors <span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">err</span> := io.EOF</span><br><span class=\"line\"><span class=\"keyword\">err</span> = xerrors.Wrap(<span class=\"keyword\">err</span>, <span class=\"string\">\"wrap message\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> errors.Is(xerrors.Cause(<span class=\"keyword\">err</span>), io.EOF) &#123;</span><br><span class=\"line\">fmt.<span class=\"keyword\">Print</span>(<span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题</p>\n</blockquote>\n<h1 id=\"u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors\"><a href=\"#u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors\" class=\"headerlink\" title=\"标准库 vs 第三方包pkg/errors\"></a>标准库 vs 第三方包pkg/errors</h1><p><code>error</code>是一个接口，实现了<code>Error()</code>方法，返回字符串</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">type <span class=\"builtin-name\">error</span><span class=\"built_in\"> interface </span>&#123;</span><br><span class=\"line\">\t<span class=\"builtin-name\">Error</span>() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"u6807_u51C6_u5E93errors\"><a href=\"#u6807_u51C6_u5E93errors\" class=\"headerlink\" title=\"标准库errors\"></a>标准库errors</h2><p>标准库提供了简单的错误创建与处理，我们使用官方包errors简单新建一个错误</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">package</span> <span class=\"selector-tag\">main</span> </span><br><span class=\"line\"><span class=\"selector-tag\">import</span> (</span><br><span class=\"line\">\t\"<span class=\"selector-tag\">errors</span>\"</span><br><span class=\"line\">\t\"<span class=\"selector-tag\">fmt</span>\"</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">func</span> <span class=\"selector-tag\">main</span>() &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">err </span>:= errors.<span class=\"built_in\">New</span>(<span class=\"string\">\"something error\"</span>)</span><br><span class=\"line\">  fmt.<span class=\"built_in\">Printf</span>(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>得到结果是把New的错误信息打印出来：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">something</span> <span class=\"literal\">error</span></span><br></pre></td></tr></table></figure>\n<p>除了通过<code>errors.New()</code>新建错误，标准库还支持通过<code>fmt.Errorf()</code>创建：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">err</span> = fmt.Errorf(<span class=\"string\">\"this is error：%s\"</span>, <span class=\"string\">\"bad news\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"u7B2C_u4E09_u65B9_u5305pkg/errors\"><a href=\"#u7B2C_u4E09_u65B9_u5305pkg/errors\" class=\"headerlink\" title=\"第三方包pkg/errors\"></a>第三方包pkg/errors</h2><p>pkg/errors是Go标准库的替代品，它提供了一些非常有用的操作用于封装和处理错误<br>获取第三方包：</p>\n<p><code>go get github.com/pkg/errors/</code></p>\n<p>同样新建错误(也支持用errors.Errorf创建)：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := errors.New(<span class=\"string\">\"something error\"</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印结果如下，我们可以看到除用<code>%+v</code>打印时除了本身的信息，对应的堆栈信息，错误行数也输出了，相比标准库更好用：<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">something error</span><br><span class=\"line\">main.main</span><br><span class=\"line\">\t<span class=\"regexp\">/src/</span>error/error.<span class=\"string\">go:</span><span class=\"number\">10</span></span><br><span class=\"line\">runtime.main</span><br><span class=\"line\">\t<span class=\"regexp\">/src/</span>runtime/proc.<span class=\"string\">go:</span><span class=\"number\">225</span></span><br><span class=\"line\">runtime.goexit</span><br><span class=\"line\">\t<span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/go/</span>src<span class=\"regexp\">/runtime/</span>asm_amd64.<span class=\"string\">s:</span><span class=\"number\">1371</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"u603B_u7ED3\"><a href=\"#u603B_u7ED3\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们在应用程序中使用<code>pkg/errors</code>包处理错误，但注意在公共库当中，我们一般不用这个包，减少依赖</p>\n<h1 id=\"u9519_u8BEF_u5904_u7406_u65B9_u5F0F\"><a href=\"#u9519_u8BEF_u5904_u7406_u65B9_u5F0F\" class=\"headerlink\" title=\"错误处理方式\"></a>错误处理方式</h1><h2 id=\"u54E8_u5175_u9519_u8BEF\"><a href=\"#u54E8_u5175_u9519_u8BEF\" class=\"headerlink\" title=\"哨兵错误\"></a>哨兵错误</h2><p><code>Sentinel Error</code>哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式</p>\n<p>如io包的<code>io.EOF</code>，gorm的<code>gorm.ErrRecordNotFound</code>，底层系统调用的<code>syscall.ENOENT</code>等..</p>\n<p>我们在使用时一般用等值或者<code>errors.Is</code>判断：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\"><span class=\"keyword\">if</span> err == gorm.ErrRecordNotFound &#123;</span><br><span class=\"line\">\tdosomething<span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class=\"line\">\tdosomething<span class=\"built_in\">..</span><span class=\"built_in\">..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：不用判断<code>error.Error()</code>返回的字符串<br>缺点：不灵活，将<code>error</code>当作包的API暴露给第三方，调用方必须先了解有哪些预定义的错误，并在程序中进行比较。服务提供方需要公共文档说明各种Error，导致包之间有了依赖，重构或版本升级也麻烦<br>总结：尽可能避免使用这种方式</p>\n<h2 id=\"u81EA_u5B9A_u4E49_u7C7B_u578Berror\"><a href=\"#u81EA_u5B9A_u4E49_u7C7B_u578Berror\" class=\"headerlink\" title=\"自定义类型error\"></a>自定义类型error</h2><p><code>error</code>是interface，只要实现了<code>Error()</code>都可以当error使用</p>\n<p>如</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyErr <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tMsg  <span class=\"keyword\">string</span></span><br><span class=\"line\">\tFile <span class=\"keyword\">string</span></span><br><span class=\"line\">\tLine <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *MyErr)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%s::%d:%s\"</span>, e.File, e.Line, e.Msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\terr := &amp;MyErr&#123;<span class=\"string\">\"err msg\"</span>, <span class=\"string\">\"error.go\"</span>, <span class=\"number\">12</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\terr := doSomething()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"%+v\"</span>, err)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> err := err.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">//call success</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> *MyErr:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"error occurred on line:\"</span>, err.Line)</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//unknown error</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>得到结果是实现的<code>Error()</code>里定义的格式：<code>error.go::12:err msg</code></p>\n<p>优点：与错误值相比，错误类型的改进是能包装提供更多上下文，例如标准库的<code>os.PathError</code><br>缺点：同样需要把错误类型暴露给调用方，而调用方需要用<code>switch</code>断言类型，还是有耦合，不利于维护<br>结论：尽量避免使用error types，至少避免将他们作为公共API的一部分</p>\n<h2 id=\"u4E0D_u900F_u660E_u5904_u7406\"><a href=\"#u4E0D_u900F_u660E_u5904_u7406\" class=\"headerlink\" title=\"不透明处理\"></a>不透明处理</h2><p>不透明错误是<code>opaque errors</code>，调用方捕获错误即返回上层，这样对代码耦合是最少的：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">func</span> <span class=\"selector-tag\">dosomething</span>() <span class=\"selector-tag\">err</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">err </span>:= <span class=\"built_in\">step1</span>()</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\treturn err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：对代码耦合最少<br>缺点：少数情况下当想对具体错误进行判断时不太够用<br>总结：可以用在大部分情况</p>\n<h2 id=\"u6309_u884C_u4E3A_u65AD_u8A00\"><a href=\"#u6309_u884C_u4E3A_u65AD_u8A00\" class=\"headerlink\" title=\"按行为断言\"></a>按行为断言</h2><p>当调用方需要调查错误性质，并做相应处理，可以使用行为断言，而不是断言错误是特定类型或值</p>\n<p>如<code>net</code>包的<code>Error</code>接口，定义了<code>Timeout()</code>,<code>Temporary()</code>两种行为，调用方可以通过行为做对应处理    ：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span> <span class=\"built_in\">Error</span> interface &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">error</span></span><br><span class=\"line\">\t<span class=\"built_in\">Timeout</span>() <span class=\"keyword\">bool</span>   <span class=\"comment\">// Is the error a timeout?</span></span><br><span class=\"line\">\t<span class=\"built_in\">Temporary</span>() <span class=\"keyword\">bool</span> <span class=\"comment\">// Is the error temporary?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> := dosomething()</span><br><span class=\"line\"><span class=\"keyword\">if</span> nerr, ok := <span class=\"keyword\">err</span>.(<span class=\"keyword\">net</span>.<span class=\"keyword\">Error</span>); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class=\"line\">\ttime.<span class=\"keyword\">Sleep</span>(1e9)</span><br><span class=\"line\">\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：我们可以不导入定义错误的包，或实际上不了解error底层类型的情况下实现逻辑处理<br>结论：比预定义错误和自定义错误好</p>\n<h1 id=\"u4E00_u4E9B_u597D_u4E60_u60EF\"><a href=\"#u4E00_u4E9B_u597D_u4E60_u60EF\" class=\"headerlink\" title=\"一些好习惯\"></a>一些好习惯</h1><h2 id=\"u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801\"><a href=\"#u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801\" class=\"headerlink\" title=\"减少缩进代码\"></a>减少缩进代码</h2><p>错误处理时先判断错误，遇到错误则返回，使代码成为一条流畅的直线，而不是缩进的代码</p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> := A()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//handle error </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br><span class=\"line\"><span class=\"keyword\">err</span> = B()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// handle error </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//do something</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"u51CF_u5C11_u91CD_u590D_u5224_u65AD\"><a href=\"#u51CF_u5C11_u91CD_u590D_u5224_u65AD\" class=\"headerlink\" title=\"减少重复判断\"></a>减少重复判断</h2><p>如统计<code>io.Reader</code>读取内容行数的实现：</p>\n<p>普通实现:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\">func CountLines(r io.Reader) (int, <span class=\"keyword\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\t<span class=\"keyword\">br</span>    = bufio.NewReader(r)</span><br><span class=\"line\">\t\tlines int</span><br><span class=\"line\">\t\t<span class=\"keyword\">err</span>   <span class=\"keyword\">error</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取到换行符就说明是一行</span></span><br><span class=\"line\">\t\t_, <span class=\"keyword\">err</span> = <span class=\"keyword\">br</span>.ReadString('\\<span class=\"keyword\">n</span>')</span><br><span class=\"line\">\t\tlines++</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当错误是 EOF 的时候说明文件读取完毕了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != io.EOF &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> 0, <span class=\"keyword\">err</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lines, <span class=\"keyword\">err</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用<code>bufio.scan</code>实现:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CountLines</span><span class=\"params\">(r io.Reader)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tsc    = bufio.NewScanner(r)</span><br><span class=\"line\">\t\tlines <span class=\"keyword\">int</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sc.Scan() &#123;</span><br><span class=\"line\">\t\tlines++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lines, sc.Err()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>bufio.scan</code>实现后少了很多<code>if err</code>判断，因为<code>sc.Scan</code>做了类似的处理，需要循环读以的都可以考虑这样包装</p>\n<h2 id=\"wrap_error_3A_u9519_u8BEF_u5305_u88C5\"><a href=\"#wrap_error_3A_u9519_u8BEF_u5305_u88C5\" class=\"headerlink\" title=\"wrap error:错误包装\"></a>wrap error:错误包装</h2><p>第三方包<code>github.com/pkg/errors</code>的Wrap可以追加错误信息和堆栈信息，这样我们更加方便定位错误</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrap returns an error annotating err with a stack trace</span></span><br><span class=\"line\"><span class=\"comment\">// at the point Wrap is called, and the supplied message.</span></span><br><span class=\"line\"><span class=\"comment\">// If err is nil, Wrap returns nil.</span></span><br><span class=\"line\">func Wrap(<span class=\"keyword\">err</span> <span class=\"keyword\">error</span>, message string) <span class=\"keyword\">error</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"keyword\">err</span> == nil &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">err</span> = &amp;withMessage&#123;</span><br><span class=\"line\">\t\tcause: <span class=\"keyword\">err</span>,</span><br><span class=\"line\">\t\tmsg:   message,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;withStack&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">err</span>,</span><br><span class=\"line\">\t\tcallers(),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但请不要处处都使用<code>errors.Wrap</code>，因为这样会产生大量无效堆栈，一般我们只需要在调用标准库包时添加，平时遇到错误可以用无透明方式返回处理，如果想再追加Message，可以使用<code>errors.WithMessage</code></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">err</span> = doSomething()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">err</span> != nil &#123;</span><br><span class=\"line\">  <span class=\"keyword\">err</span> = xerrors.WithMessage(<span class=\"keyword\">err</span>, <span class=\"string\">\"dosomething fail\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过多层包装的错误没法与哨兵模式结合判断，这时可以通过<code>errors.Cause</code>获取最初的<code>error</code>来判断：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t<span class=\"string\">\"errors\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"io\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\txerrors <span class=\"string\">\"github.com/pkg/errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">err</span> := io.EOF</span><br><span class=\"line\"><span class=\"keyword\">err</span> = xerrors.Wrap(<span class=\"keyword\">err</span>, <span class=\"string\">\"wrap message\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> errors.Is(xerrors.Cause(<span class=\"keyword\">err</span>), io.EOF) &#123;</span><br><span class=\"line\">fmt.<span class=\"keyword\">Print</span>(<span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"cl1vkj7ot0007i9sk81f7m2mm","category_id":"cl1vkj7ow0009i9sk7lmggmc0","_id":"cl1vkj7oz000ji9skoi4ingt5"},{"post_id":"cl1vkj7ov0008i9skp9463ype","category_id":"cl1vkj7oy000ei9skk3vnh0dm","_id":"cl1vkj7p0000pi9sk3imjvl2q"},{"post_id":"cl1vkj7ox000bi9skxna1rzd6","category_id":"cl1vkj7oz000ki9skprn6tjzn","_id":"cl1vkj7p1000ui9skndbeg38r"},{"post_id":"cl1vkj7p0000oi9sk6s174of1","category_id":"cl1vkj7oz000ki9skprn6tjzn","_id":"cl1vkj7p2000yi9skxiyj68jy"},{"post_id":"cl1vkj7oy000ci9sklyqbwosb","category_id":"cl1vkj7p0000qi9skzvt1mz8m","_id":"cl1vkj7p20012i9skf3tq7wtl"},{"post_id":"cl1vkj7oy000di9sk66a99olw","category_id":"cl1vkj7p1000vi9skz79hk1du","_id":"cl1vkj7p4001ai9sk21talm4o"},{"post_id":"cl1vkj7oz000hi9skb90mm4so","category_id":"cl1vkj7p1000vi9skz79hk1du","_id":"cl1vkj7p5001gi9skncxjsi7r"},{"post_id":"cl1vkj7oz000ii9skva10szhi","category_id":"cl1vkj7p1000vi9skz79hk1du","_id":"cl1vkj7p6001mi9sk89l7q1ya"},{"post_id":"cl1vkj7p0000mi9sk79pb9wy9","category_id":"cl1vkj7p1000vi9skz79hk1du","_id":"cl1vkj7p7001ri9sku3acxfm8"},{"post_id":"cl1vkj7p0000si9skq1xbi9ol","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7p8001yi9skg3gz5ajz"},{"post_id":"cl1vkj7p1000ti9skuil9jvpp","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7p90024i9skf4g9dzxx"},{"post_id":"cl1vkj7p1000xi9sk9qlypi00","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7pa002bi9skqpdr6mbb"},{"post_id":"cl1vkj7p20010i9skw7ik1zb2","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7pb002hi9skzggkfota"},{"post_id":"cl1vkj7p20013i9sk49rw5mwx","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7pc002ni9sk7j6elkzy"},{"post_id":"cl1vkj7p30017i9skdblp3t5u","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7pd002si9skgjjwl0iy"},{"post_id":"cl1vkj7p40018i9skucfq0cx3","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pe002zi9sk4hcrok7c"},{"post_id":"cl1vkj7p4001ci9skgx4hf82n","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pf0035i9skqnmoyk1w"},{"post_id":"cl1vkj7p5001ei9sk5mkxr6xb","category_id":"cl1vkj7p6001li9skjs4v72f0","_id":"cl1vkj7pg003bi9skbokft0vl"},{"post_id":"cl1vkj7p5001ii9sk0psh2gyz","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7ph003hi9sk5lpdvqmu"},{"post_id":"cl1vkj7p6001ki9sk4dc4zfw7","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pi003ni9sksuw3xr74"},{"post_id":"cl1vkj7p6001oi9skdz9lwjea","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pj003ti9sk6panmawb"},{"post_id":"cl1vkj7p7001qi9skwjg673vp","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pk003xi9skvrzbghk0"},{"post_id":"cl1vkj7p7001ui9sk02otl3q3","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pk0041i9skduumb2or"},{"post_id":"cl1vkj7p8001wi9skgk70y9l0","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pl0045i9sk4wraob09"},{"post_id":"cl1vkj7p80020i9sknhxupj1a","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pl0048i9skpzjtq8he"},{"post_id":"cl1vkj7p90022i9sk71bcvoof","category_id":"cl1vkj7pl0044i9skd62e8biy","_id":"cl1vkj7pl004ci9sk545ib24t"},{"post_id":"cl1vkj7p90027i9skzh1ghf2j","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pm004gi9skbunfw0st"},{"post_id":"cl1vkj7pa0029i9sk0zla7x04","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pm004ki9skh69jeaje"},{"post_id":"cl1vkj7pa002di9skco7pjs1q","category_id":"cl1vkj7pm004fi9skelavjzuy","_id":"cl1vkj7pm004oi9skacqmm4wf"},{"post_id":"cl1vkj7pb002fi9skdu46do85","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pn004ti9skqlenve8n"},{"post_id":"cl1vkj7pb002ji9skybvfex6r","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pn004xi9sk0yjeajun"},{"post_id":"cl1vkj7pc002li9skpxaqab1m","category_id":"cl1vkj7pc002mi9sk3z879yqq","_id":"cl1vkj7pn0050i9skz4ia3uw9"},{"post_id":"cl1vkj7pc002pi9skhoyjvv23","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7po0054i9skap339kl7"},{"post_id":"cl1vkj7pd002ri9skdh87qqmz","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7po0059i9skkl3c7bm8"},{"post_id":"cl1vkj7pd002vi9sk11xo7hpo","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7po005ci9ske1b7l5ct"},{"post_id":"cl1vkj7pe002xi9sk5wzc98ku","category_id":"cl1vkj7po0058i9skbkgzlyh0","_id":"cl1vkj7pp005gi9skohly5tts"},{"post_id":"cl1vkj7pe0031i9sk4yzrdc9k","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pp005ki9skbdx5wnuk"},{"post_id":"cl1vkj7pf0033i9skdrkd3yjt","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pq005pi9sk29pjpyef"},{"post_id":"cl1vkj7pf0036i9skz6bhjqp3","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pq005si9sk5nmxh89i"},{"post_id":"cl1vkj7pg0039i9ski24t50ek","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pq005vi9skl2groo66"},{"post_id":"cl1vkj7pg003ci9sk55texb47","category_id":"cl1vkj7pq005ri9skgr525st2","_id":"cl1vkj7pq0060i9skchl0ejro"},{"post_id":"cl1vkj7ph003fi9skna4d3whq","category_id":"cl1vkj7pq005wi9sk3eaea7vl","_id":"cl1vkj7pr0064i9skllahhvm0"},{"post_id":"cl1vkj7ph003ii9skj7z5594l","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7pr0067i9skektn5opm"},{"post_id":"cl1vkj7pi003li9sk9virk9oi","category_id":"cl1vkj7pr0063i9skzkzaeoy7","_id":"cl1vkj7ps006di9sk9e3ihed8"},{"post_id":"cl1vkj7pi003oi9sk97ohchr1","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7ps006gi9skzzpxqgli"},{"post_id":"cl1vkj7pj003ri9sk7w7me7ja","category_id":"cl1vkj7pm004li9sknhkbg9ce","_id":"cl1vkj7ps006ji9sk7koau7ea"},{"post_id":"cl1vkj7qd006xi9skb9ypp0sp","category_id":"cl1vkj7qe006zi9sk8a83u84t","_id":"cl1vkj7qh0079i9skirgd36nx"},{"post_id":"cl1vkj7qg0077i9skew5sddx5","category_id":"cl1vkj7qf0074i9skdrswoqx4","_id":"cl1vkj7qi007di9skrh2jqsmq"},{"post_id":"cl1vkj7qe0071i9sklok174up","category_id":"cl1vkj7qf0074i9skdrswoqx4","_id":"cl1vkj7qi007hi9sk2hwvmac5"},{"post_id":"cl1vkj7qh0078i9skt09tfq1z","category_id":"cl1vkj7oz000ki9skprn6tjzn","_id":"cl1vkj7qj007ji9sklihtlfql"},{"post_id":"cl1vkj7qe0072i9sksedg67hp","category_id":"cl1vkj7qf0074i9skdrswoqx4","_id":"cl1vkj7qj007li9skvo4m46ro"},{"post_id":"cl1vkj7qf0073i9sk3dalna28","category_id":"cl1vkj7qf0074i9skdrswoqx4","_id":"cl1vkj7qj007ni9skp9xp5dg5"}],"PostTag":[{"post_id":"cl1vkj7ot0007i9sk81f7m2mm","tag_id":"cl1vkj7ox000ai9sktkokys8t","_id":"cl1vkj7oz000gi9sko12wcf8o"},{"post_id":"cl1vkj7ov0008i9skp9463ype","tag_id":"cl1vkj7oz000fi9sktlij6k7o","_id":"cl1vkj7p0000ni9skzp8wjjqu"},{"post_id":"cl1vkj7ox000bi9skxna1rzd6","tag_id":"cl1vkj7p0000li9skd4bz6zao","_id":"cl1vkj7p2000zi9sk1tyt6pkc"},{"post_id":"cl1vkj7ox000bi9skxna1rzd6","tag_id":"cl1vkj7p0000ri9skwnffmexf","_id":"cl1vkj7p20011i9skogsi0blt"},{"post_id":"cl1vkj7oy000ci9sklyqbwosb","tag_id":"cl1vkj7p1000wi9skhdfr204g","_id":"cl1vkj7p30016i9skkb5t44c4"},{"post_id":"cl1vkj7oy000di9sk66a99olw","tag_id":"cl1vkj7p20015i9skdyn4901q","_id":"cl1vkj7p4001di9sk7kk3so81"},{"post_id":"cl1vkj7oz000hi9skb90mm4so","tag_id":"cl1vkj7p20015i9skdyn4901q","_id":"cl1vkj7p5001ji9skbfm52xzs"},{"post_id":"cl1vkj7oz000ii9skva10szhi","tag_id":"cl1vkj7p20015i9skdyn4901q","_id":"cl1vkj7p6001pi9skzh19zzme"},{"post_id":"cl1vkj7p0000mi9sk79pb9wy9","tag_id":"cl1vkj7p20015i9skdyn4901q","_id":"cl1vkj7p7001vi9skya4k6ztq"},{"post_id":"cl1vkj7p0000oi9sk6s174of1","tag_id":"cl1vkj7p0000li9skd4bz6zao","_id":"cl1vkj7p80021i9sk0zm4qxkt"},{"post_id":"cl1vkj7p0000oi9sk6s174of1","tag_id":"cl1vkj7p7001ti9skpqqpq1qx","_id":"cl1vkj7p90025i9skq2rdyzxw"},{"post_id":"cl1vkj7p0000si9skq1xbi9ol","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pa0028i9skpo9ad9gz"},{"post_id":"cl1vkj7p1000ti9skuil9jvpp","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pb002ei9skj8tausi1"},{"post_id":"cl1vkj7p1000xi9sk9qlypi00","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pc002ki9skf4zv124h"},{"post_id":"cl1vkj7p20010i9skw7ik1zb2","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pd002qi9skdwkdn4r5"},{"post_id":"cl1vkj7p20013i9sk49rw5mwx","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pe002wi9sk8x9s6b22"},{"post_id":"cl1vkj7p30017i9skdblp3t5u","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7pf0032i9sku2triea3"},{"post_id":"cl1vkj7p40018i9skucfq0cx3","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pg0038i9skfc2miftr"},{"post_id":"cl1vkj7p4001ci9skgx4hf82n","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7ph003ei9skh1p2cw2v"},{"post_id":"cl1vkj7p5001ei9sk5mkxr6xb","tag_id":"cl1vkj7p8001zi9skkp6m0tah","_id":"cl1vkj7ph003ki9sk45pmej6g"},{"post_id":"cl1vkj7p5001ii9sk0psh2gyz","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pi003qi9skfm3096jg"},{"post_id":"cl1vkj7p6001ki9sk4dc4zfw7","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pj003vi9skr7h67iyj"},{"post_id":"cl1vkj7p6001oi9skdz9lwjea","tag_id":"cl1vkj7pj003ui9sk79n1x0g2","_id":"cl1vkj7pk003zi9sklzsn78is"},{"post_id":"cl1vkj7p7001qi9skwjg673vp","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pk0043i9sklqn960iz"},{"post_id":"cl1vkj7p7001ui9sk02otl3q3","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pl0047i9sk7apd7a6w"},{"post_id":"cl1vkj7p8001wi9skgk70y9l0","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pm004ei9ski0670pbp"},{"post_id":"cl1vkj7p8001wi9skgk70y9l0","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pm004hi9skgm0pc9qg"},{"post_id":"cl1vkj7p80020i9sknhxupj1a","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pm004ji9skit0zsoyj"},{"post_id":"cl1vkj7p90022i9sk71bcvoof","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pm004ni9skzk0cd6rw"},{"post_id":"cl1vkj7p90027i9skzh1ghf2j","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pn004ri9skikvzdoyo"},{"post_id":"cl1vkj7pa0029i9sk0zla7x04","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pn004vi9skhgu68pnh"},{"post_id":"cl1vkj7pa002di9skco7pjs1q","tag_id":"cl1vkj7pn004ui9skomjjraxv","_id":"cl1vkj7po0052i9skhpgnq3hh"},{"post_id":"cl1vkj7pa002di9skco7pjs1q","tag_id":"cl1vkj7pn004yi9sktz67b9k3","_id":"cl1vkj7po0055i9sk50cu73uu"},{"post_id":"cl1vkj7pb002fi9skdu46do85","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7po0057i9sk2bf7t2yy"},{"post_id":"cl1vkj7pb002ji9skybvfex6r","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7po005bi9skbrerjz2p"},{"post_id":"cl1vkj7pc002li9skpxaqab1m","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pp005ii9skjp5xj8rj"},{"post_id":"cl1vkj7pc002li9skpxaqab1m","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pp005li9skozsvo54j"},{"post_id":"cl1vkj7pc002pi9skhoyjvv23","tag_id":"cl1vkj7pn004ui9skomjjraxv","_id":"cl1vkj7pp005ni9skewyzcv1u"},{"post_id":"cl1vkj7pd002ri9skdh87qqmz","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pq005ui9skphlgi404"},{"post_id":"cl1vkj7pd002ri9skdh87qqmz","tag_id":"cl1vkj7pq005qi9sk0kzugfns","_id":"cl1vkj7pq005xi9skj484hogo"},{"post_id":"cl1vkj7pd002vi9sk11xo7hpo","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pq005zi9skiqkjm7f2"},{"post_id":"cl1vkj7pe002xi9sk5wzc98ku","tag_id":"cl1vkj7pq005yi9skoh9y0lqb","_id":"cl1vkj7pr0066i9skz79177q3"},{"post_id":"cl1vkj7pe002xi9sk5wzc98ku","tag_id":"cl1vkj7pe0030i9skyha889mo","_id":"cl1vkj7pr0069i9sksefrk6wg"},{"post_id":"cl1vkj7pe0031i9sk4yzrdc9k","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pr006bi9skhnand1jc"},{"post_id":"cl1vkj7pf0033i9skdrkd3yjt","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7ps006fi9skpftnufhp"},{"post_id":"cl1vkj7pf0036i9skz6bhjqp3","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7ps006ii9skkqbaagpp"},{"post_id":"cl1vkj7pg0039i9ski24t50ek","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7ps006li9skhes7dmav"},{"post_id":"cl1vkj7pg003ci9sk55texb47","tag_id":"cl1vkj7ps006ki9sk0ngzqmvp","_id":"cl1vkj7pt006ni9skympkjylj"},{"post_id":"cl1vkj7ph003fi9skna4d3whq","tag_id":"cl1vkj7ps006mi9sktj1yaq6e","_id":"cl1vkj7pu006pi9skhw813eho"},{"post_id":"cl1vkj7ph003ii9skj7z5594l","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pu006ri9skubni28m0"},{"post_id":"cl1vkj7pi003li9sk9virk9oi","tag_id":"cl1vkj7pu006qi9skf350wq7l","_id":"cl1vkj7pu006ti9sk79ftqjid"},{"post_id":"cl1vkj7pi003oi9sk97ohchr1","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pu006vi9skfb1qr3y4"},{"post_id":"cl1vkj7pj003ri9sk7w7me7ja","tag_id":"cl1vkj7pl004ai9skivddyqtp","_id":"cl1vkj7pv006wi9skc2y7z7zq"},{"post_id":"cl1vkj7qd006xi9skb9ypp0sp","tag_id":"cl1vkj7qe0070i9skqnt5v8w0","_id":"cl1vkj7qf0076i9skh4erqrlm"},{"post_id":"cl1vkj7qe006yi9skgdgflmtt","tag_id":"cl1vkj7p0000li9skd4bz6zao","_id":"cl1vkj7qi007ci9skm1zw32u4"},{"post_id":"cl1vkj7qe006yi9skgdgflmtt","tag_id":"cl1vkj7qf0075i9sky2hoc3ye","_id":"cl1vkj7qi007ei9skyy7mbvo7"},{"post_id":"cl1vkj7qe0071i9sklok174up","tag_id":"cl1vkj7qi007bi9skkd3xbge5","_id":"cl1vkj7qi007ii9sk7m92xyzt"},{"post_id":"cl1vkj7qe0072i9sksedg67hp","tag_id":"cl1vkj7qi007bi9skkd3xbge5","_id":"cl1vkj7qj007mi9skv7vpeyio"},{"post_id":"cl1vkj7qf0073i9sk3dalna28","tag_id":"cl1vkj7qi007bi9skkd3xbge5","_id":"cl1vkj7qj007pi9skgzhd39f4"},{"post_id":"cl1vkj7qg0077i9skew5sddx5","tag_id":"cl1vkj7qi007bi9skkd3xbge5","_id":"cl1vkj7qk007ri9skupsnwd6x"},{"post_id":"cl1vkj7qh0078i9skt09tfq1z","tag_id":"cl1vkj7p0000li9skd4bz6zao","_id":"cl1vkj7qk007si9sk211ry5d4"},{"post_id":"cl1vkj7qh0078i9skt09tfq1z","tag_id":"cl1vkj7qk007qi9skt0vsmc3o","_id":"cl1vkj7qk007ti9sk1wzndlzn"}],"Tag":[{"name":"http","_id":"cl1vkj7ox000ai9sktkokys8t"},{"name":"git","_id":"cl1vkj7oz000fi9sktlij6k7o"},{"name":"golang","_id":"cl1vkj7p0000li9skd4bz6zao"},{"name":"defer","_id":"cl1vkj7p0000ri9skwnffmexf"},{"name":"java","_id":"cl1vkj7p1000wi9skhdfr204g"},{"name":"javascript","_id":"cl1vkj7p20015i9skdyn4901q"},{"name":"docker","_id":"cl1vkj7p7001ti9skpqqpq1qx"},{"name":"linux","_id":"cl1vkj7p8001zi9skkp6m0tah"},{"name":"php","_id":"cl1vkj7pe0030i9skyha889mo"},{"name":"intval","_id":"cl1vkj7pj003ui9sk79n1x0g2"},{"name":"mysql","_id":"cl1vkj7pl004ai9skivddyqtp"},{"name":"brew","_id":"cl1vkj7pn004ui9skomjjraxv"},{"name":"mongodb","_id":"cl1vkj7pn004yi9sktz67b9k3"},{"name":"distinct","_id":"cl1vkj7pq005qi9sk0kzugfns"},{"name":"pattern","_id":"cl1vkj7pq005yi9skoh9y0lqb"},{"name":"regEx","_id":"cl1vkj7ps006ki9sk0ngzqmvp"},{"name":"redis","_id":"cl1vkj7ps006mi9sktj1yaq6e"},{"name":"homebrew","_id":"cl1vkj7pu006qi9skf350wq7l"},{"name":"sublime","_id":"cl1vkj7qe0070i9skqnt5v8w0"},{"name":"ide","_id":"cl1vkj7qf0075i9sky2hoc3ye"},{"name":"hexo","_id":"cl1vkj7qi007bi9skkd3xbge5"},{"name":"errors","_id":"cl1vkj7qk007qi9skt0vsmc3o"}]}}