<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This way up</title>
  <icon>https://www.gravatar.com/avatar/88a80c9c4a7711986c20dbd59bf0f0bf</icon>
  <subtitle>I am not perfect but I keep trying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jcsama.com/"/>
  <updated>2022-04-10T10:40:48.171Z</updated>
  <id>http://www.jcsama.com/</id>
  
  <author>
    <name>jceee</name>
    <email>jceee@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用mysqlslap回放Mysql流量</title>
    <link href="http://www.jcsama.com/2022/04/09/mysql/mysqlslap/"/>
    <id>http://www.jcsama.com/2022/04/09/mysql/mysqlslap/</id>
    <published>2022-04-09T09:40:00.000Z</published>
    <updated>2022-04-10T10:40:48.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u80CC_u666F"><a href="#u80CC_u666F" class="headerlink" title="背景"></a>背景</h1><h2 id="mysqlslap_u7B80_u4ECB"><a href="#mysqlslap_u7B80_u4ECB" class="headerlink" title="mysqlslap简介"></a>mysqlslap简介</h2><p><code>mysqlslap</code> 是 MySQL 从 5.1.4 版开始官方自带的一个压力测试工具。</p><p>功能：它通过模拟多个并发客户端访问 MySQL 来执行压力测试，我们通过结果信息可以了解数据库的性能状况。</p><h2 id="u9002_u7528_u573A_u666F"><a href="#u9002_u7528_u573A_u666F" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>优化了操作系统的内核参数后，是否提升了性能</li><li>优化了Mysql参数，性能变化</li><li>服务器的硬件资源能够支持多大的访问压力</li></ul><h1 id="u538B_u6D4B_u6D41_u7A0B"><a href="#u538B_u6D4B_u6D41_u7A0B" class="headerlink" title="压测流程"></a>压测流程</h1><h2 id="u6D41_u91CF_u5F55_u5236"><a href="#u6D41_u91CF_u5F55_u5236" class="headerlink" title="流量录制"></a>流量录制</h2><p>打开原Mysql服务的<code>general log</code>，录制一定时间的流量</p><p>注意：</p><ul><li><code>general log</code>的开启会增加Mysql的io压力，造成一定的性能下降，请选择适当的时间，且注意观察服务器压力</li></ul><h2 id="u56DE_u653E_u6587_u4EF6_u68B3_u7406"><a href="#u56DE_u653E_u6587_u4EF6_u68B3_u7406" class="headerlink" title="回放文件梳理"></a>回放文件梳理</h2><h3 id="u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9"><a href="#u7B5B_u9009_u51FASQL_u90E8_u5206_u7684_u5185_u5BB9" class="headerlink" title="筛选出SQL部分的内容"></a>筛选出SQL部分的内容</h3><p>回放需要的文件是一行一个sql，而<code>general log</code>里我们只需要Query部分的内容，如：</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">220408 14:35:13 1150499963 Query        <span class="keyword">UPDATE</span> <span class="symbol">`m_user`</span> <span class="keyword">SET</span> <span class="symbol">`status`</span> = <span class="string">'1'</span> <span class="keyword">WHERE</span> uid = <span class="number">3</span></span><br><span class="line">                <span class="number">1781571137</span> Quit</span><br><span class="line">                <span class="number">1781571146</span> <span class="keyword">Connect</span>      root@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">on</span> db_test</span><br><span class="line">                <span class="number">1781571120</span> Init DB      db_test</span><br></pre></td></tr></table></figure><h3 id="u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26"><a href="#u53BB_u6389_u6362_u884C_u3001_u6CE8_u91CA_u7B49_u5B57_u7B26" class="headerlink" title="去掉换行、注释等字符"></a>去掉换行、注释等字符</h3><p>筛选完Query，还可能有换行的SQL，或带注释的SQL，这种需要拼接回一行，并去掉注释</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1792900537 Query        <span class="keyword">SELECT</span> uid,user_name  <span class="comment">--field注释部分</span></span><br><span class="line">                        <span class="keyword">FROM</span> m_user</span><br><span class="line">                        <span class="keyword">WHERE</span> uid = <span class="number">2</span> </span><br><span class="line">                        <span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="u8865_u5145_u5E93_u540D"><a href="#u8865_u5145_u5E93_u540D" class="headerlink" title="补充库名"></a>补充库名</h3><p>如果测试的实例有多个库，会更加麻烦一些，需要在梳理的时候可以根据表名补充回sql</p><h2 id="u6D41_u91CF_u56DE_u653E"><a href="#u6D41_u91CF_u56DE_u653E" class="headerlink" title="流量回放"></a>流量回放</h2><h3 id="u547D_u4EE4_u4E0E_u53C2_u6570"><a href="#u547D_u4EE4_u4E0E_u53C2_u6570" class="headerlink" title="命令与参数"></a>命令与参数</h3><p>我们最终得到一个sql文件，接着我们就可以开始压测了</p><p>具体命令如下：<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/mysql/bin/mysqlslap --no-defaults -h127.0.0.1 -P3306 -utest_mysqlslap -p<span class="string">'123456'</span>  <span class="attribute">--concurrency</span>=600 <span class="attribute">--iterations</span>=2 <span class="attribute">--create-schema</span>=test_db <span class="attribute">--query</span>=/data/general_out.log <span class="attribute">--number-of-queries</span>=80000000 -T</span><br></pre></td></tr></table></figure></p><p>参数含义</p><ul><li>–no-defaults   必须加在参数第一位，不然会报<code>unknown variable &#39;default-character-set=utf8</code></li><li>-h 待测试实例host</li><li>-P 待测试实例端口</li><li>-u 待测试实例账号</li><li>-p 待测试实例密码</li><li>–concurrency 并发线程数</li><li>–iterations 重复次数，按多次计算平均数</li><li>–create-schema  指定测试的库</li><li>–query 可以是sql语句，也可以是个sql文件，我们这里用的是文件模式</li><li>–number-of-queries 请求次数，所有sql请求的次数，比如sql文件里有200个sql，<code>number-of-queries</code>指定100时，会只执行到一半就停止，指定300时，会执行完200个再重新跑100</li></ul><h3 id="u7ED3_u679C"><a href="#u7ED3_u679C" class="headerlink" title="结果"></a>结果</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Benchmark</span><br><span class="line">        Average number of seconds <span class="keyword">to</span> <span class="builtin-name">run</span> all queries: 672.956 seconds</span><br><span class="line">        Minimum number of seconds <span class="keyword">to</span> <span class="builtin-name">run</span> all queries: 672.341 seconds</span><br><span class="line">        Maximum number of seconds <span class="keyword">to</span> <span class="builtin-name">run</span> all queries: 673.571 seconds</span><br><span class="line">        Number of clients running queries: 600</span><br><span class="line">        Average number of queries per client: 133333</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User time 1503.60,<span class="built_in"> System </span>time 3036.06</span><br><span class="line">Maximum resident <span class="builtin-name">set</span> size 9077056, Integral resident <span class="builtin-name">set</span> size 0</span><br><span class="line">Non-physical pagefaults 4343854, Physical pagefaults 19, Swaps 0</span><br><span class="line">Blocks <span class="keyword">in</span> 4262400 out 8, Messages <span class="keyword">in</span> 0 out 0, Signals 0</span><br><span class="line">Voluntary context switches 161188899, Involuntary context switches 5020</span><br></pre></td></tr></table></figure><p>从结果看，执行80000000 个sql的平均时间是672.956秒，得出qps差不多119047.6，具体的硬件cpu、io、负载，可以看对应实例的监控</p><h3 id="u5E76_u53D1_u5199_u9501"><a href="#u5E76_u53D1_u5199_u9501" class="headerlink" title="并发写锁"></a>并发写锁</h3><p>因为我们设置了600个<code>concurrency</code>并发数，所以一些原本串行更新可能变为并发更新，导致产生并发锁：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqlslap: Cannot run query <span class="keyword">UPDATE</span> <span class="string">`m_user`</span> <span class="keyword">SET</span> <span class="string">`status`</span>=<span class="number">1</span> <span class="keyword">WHERE</span> <span class="string">`uid`</span>=<span class="number">235</span> <span class="keyword">ERROR</span> : <span class="keyword">Lock</span> <span class="keyword">wait</span> <span class="keyword">timeout</span> exceeded; try restarting transaction</span><br></pre></td></tr></table></figure><p>这时可以按sql类型拆分sql文件，把<code>select</code>和<code>update</code>、<code>insert</code>、<code>delete</code>分出不同文件。通过开多个mysqlslap进程来压测</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;u80CC_u666F&quot;&gt;&lt;a href=&quot;#u80CC_u666F&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;h2 id=&quot;mysqlslap_u7B80_u4ECB&quot;&gt;&lt;a href=&quot;#mysqlslap_u7B8
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.jcsama.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM 子进程不断重启exited on signal 11</title>
    <link href="http://www.jcsama.com/2022/03/16/php/php-fpm-signal-exited/"/>
    <id>http://www.jcsama.com/2022/03/16/php/php-fpm-signal-exited/</id>
    <published>2022-03-16T12:07:01.000Z</published>
    <updated>2022-03-17T11:09:26.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u73B0_u8C61"><a href="#u73B0_u8C61" class="headerlink" title="现象"></a>现象</h1><p>某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启</p><h1 id="u5B9A_u4F4D_u6392_u67E5"><a href="#u5B9A_u4F4D_u6392_u67E5" class="headerlink" title="定位排查"></a>定位排查</h1><h2 id="u68C0_u67E5_u53D1_u7248"><a href="#u68C0_u67E5_u53D1_u7248" class="headerlink" title="检查发版"></a>检查发版</h2><p>检查对应时间是否有发版，检查了之后确实与发版时间吻合，但检查代码没看出问题，但多台服务器一起发布，只有一台出现问题，跟代码有关的概率很低，可以先排除代码问题</p><h2 id="u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7"><a href="#u770Bphp-fpm__u9519_u8BEF_u65E5_u5FD7" class="headerlink" title="看php-fpm 错误日志"></a>看php-fpm 错误日志</h2><p>首先从配置文件找到错误日志路径：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> /usr/<span class="keyword">local</span>/php/etc/php-fpm.<span class="keyword">conf</span> | grep error_log</span><br><span class="line"></span><br><span class="line">error_log = /data1/logs/php-fpm.<span class="keyword">log</span></span><br></pre></td></tr></table></figure><p>从错误日志中可以看到子进程反复通过<code>signal 11 (SIGSEGV)</code>信号退出</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="symbol">WARNING: </span>[pool www] child 25406 exited on signal 11 (SIGSEGV) after 47.465595 seconds from start</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h2 id="u8FFD_u8E2A_u8FDB_u7A0B"><a href="#u8FFD_u8E2A_u8FDB_u7A0B" class="headerlink" title="追踪进程"></a>追踪进程</h2><p>查了<code>SIGSEGV</code>定义：</p><blockquote><ol><li>SIGSEGV是在访问内存时发生的错误，它属于内存管理的范畴</li><li>SIGSEGV是一个用户态的概念，是操作系统在用户态程序错误访问内存时所做出的处理。</li><li>当用户态程序访问（访问表示读、写或执行）不允许访问的内存时，产生SIGSEGV。 </li><li>当用户态程序以错误的方式访问允许访问的内存时，产生SIGSEGV</li></ol></blockquote><p>也就是进程访问到异常内存导致异常退出，这时我们来追踪进程执行遇到什么问题</p><h3 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h3><p>我们通过strace追踪某个子进程，看结束前是跑了什么逻辑，这里排除master进程，head出一个子进程来追踪，因为子进程重启很快，不一定能捕获到，要多跑几次</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">ps aux | <span class="type">grep</span> php-fpm | <span class="type">grep</span> -v master |<span class="type">head</span> <span class="number">-1</span> | <span class="type">awk</span> '&#123;print <span class="string">" -p "</span> $<span class="number">2</span><span class="string">" -s 10000 -o /tmp/strace_"</span>$<span class="number">2</span><span class="string">".log"</span>&#125;'|<span class="type">xargs</span> sudo strace</span><br></pre></td></tr></table></figure><p>看strace日志：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">....</span></span><br><span class="line">stat<span class="params">("xxx.php", &#123;<span class="attr">st_mode</span>=S_IFREG|0644, <span class="attr">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class="line">open<span class="params">("/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141", O_RDONLY)</span> = 4</span><br><span class="line">flock<span class="params">(4, LOCK_SH)</span>                       = 0</span><br><span class="line">read<span class="params">(4, "EACCELER\..........</span></span><br><span class="line"><span class="params">843496)</span> = 843496</span><br><span class="line">flock<span class="params">(4, LOCK_UN)</span>                       = 0</span><br><span class="line">close<span class="params">(4)</span>                                = 0</span><br><span class="line">stat<span class="params">("xxx.php", &#123;<span class="attr">st_mode</span>=S_IFREG|0644, <span class="attr">st_size</span>=142755, ...&#125;)</span> = 0</span><br><span class="line"><span class="params">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xd21f4a20c8&#125; </span><br><span class="line">rt_sigaction<span class="params">(SIGSEGV, &#123;<span class="attr">sa_handler</span>=SIG_DFL, <span class="attr">sa_mask</span>=[SEGV], <span class="attr">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class="attr">sa_restorer</span>=0x7ff5c002c400&#125;, &#123;<span class="attr">sa_handler</span>=0x7ff5b59caa30, <span class="attr">sa_mask</span>=[SEGV], <span class="attr">sa_flags</span>=SA_RESTORER|SA_RESTART, <span class="attr">sa_restorer</span>=0x7ff5c002c400&#125;, 8)</span> = 0</span><br><span class="line">kill<span class="params">(300, SIGSEGV)</span>                      = 0</span><br><span class="line">rt_sigreturn<span class="params">(&#123;<span class="attr">mask</span>=[]&#125;)</span>                 = 140693241590544</span><br><span class="line"><span class="params">---</span> SIGSEGV &#123;si_signo=SIGSEGV, si_code=SI_USER, si_pid=300, si_uid=1007&#125; <span class="params">---</span></span><br><span class="line">+++ killed by SIGSEGV +++</span><br></pre></td></tr></table></figure><p>看到发生<code>SIGSEGV</code>之前是执行了xxx.php，再之前有个动作是加载了编译缓存<code>open(&quot;/data/eaccelerator_cache/1/5/eaccelerator-48746.27075141&quot;, O_RDONLY)</code>，代码每台机都一样，可能是编译缓存出现问题，我们把缓存删除试试，502消失了，确实是缓存问题</p><h1 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h1><p>原因：根据触发的时间点与发版吻合，猜测有可能是服务器请求量大，在热更的时候编译缓存生成出现问题，导致进程异常，偶然现象<br>优化：把服务容器化，发版时断开流量，更新完代码重启容器，重新生成缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;u73B0_u8C61&quot;&gt;&lt;a href=&quot;#u73B0_u8C61&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;某台服务器请求状态码出现大量502，看所有php-fpm master进程不断重启&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="php" scheme="http://www.jcsama.com/categories/php/"/>
    
    
      <category term="php" scheme="http://www.jcsama.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Golang错误处理</title>
    <link href="http://www.jcsama.com/2022/03/13/golang/learn/error/"/>
    <id>http://www.jcsama.com/2022/03/13/golang/learn/error/</id>
    <published>2022-03-13T08:31:16.000Z</published>
    <updated>2022-03-13T08:05:56.459Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题</p></blockquote><h1 id="u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors"><a href="#u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors" class="headerlink" title="标准库 vs 第三方包pkg/errors"></a>标准库 vs 第三方包pkg/errors</h1><p><code>error</code>是一个接口，实现了<code>Error()</code>方法，返回字符串</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">type <span class="builtin-name">error</span><span class="built_in"> interface </span>&#123;</span><br><span class="line"><span class="builtin-name">Error</span>() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="u6807_u51C6_u5E93errors"><a href="#u6807_u51C6_u5E93errors" class="headerlink" title="标准库errors"></a>标准库errors</h2><p>标准库提供了简单的错误创建与处理，我们使用官方包errors简单新建一个错误</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">main</span> </span><br><span class="line"><span class="selector-tag">import</span> (</span><br><span class="line">"<span class="selector-tag">errors</span>"</span><br><span class="line">"<span class="selector-tag">fmt</span>"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line"><span class="attribute">err </span>:= errors.<span class="built_in">New</span>(<span class="string">"something error"</span>)</span><br><span class="line">  fmt.<span class="built_in">Printf</span>(<span class="string">"%+v"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果是把New的错误信息打印出来：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">something</span> <span class="literal">error</span></span><br></pre></td></tr></table></figure><p>除了通过<code>errors.New()</code>新建错误，标准库还支持通过<code>fmt.Errorf()</code>创建：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">err</span> = fmt.Errorf(<span class="string">"this is error：%s"</span>, <span class="string">"bad news"</span>)</span><br></pre></td></tr></table></figure><h2 id="u7B2C_u4E09_u65B9_u5305pkg/errors"><a href="#u7B2C_u4E09_u65B9_u5305pkg/errors" class="headerlink" title="第三方包pkg/errors"></a>第三方包pkg/errors</h2><p>pkg/errors是Go标准库的替代品，它提供了一些非常有用的操作用于封装和处理错误<br>获取第三方包：</p><p><code>go get github.com/pkg/errors/</code></p><p>同样新建错误(也支持用errors.Errorf创建)：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/pkg/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := errors.New(<span class="string">"something error"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%+v"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果如下，我们可以看到除用<code>%+v</code>打印时除了本身的信息，对应的堆栈信息，错误行数也输出了，相比标准库更好用：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">something error</span><br><span class="line">main.main</span><br><span class="line"><span class="regexp">/src/</span>error/error.<span class="string">go:</span><span class="number">10</span></span><br><span class="line">runtime.main</span><br><span class="line"><span class="regexp">/src/</span>runtime/proc.<span class="string">go:</span><span class="number">225</span></span><br><span class="line">runtime.goexit</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/go/</span>src<span class="regexp">/runtime/</span>asm_amd64.<span class="string">s:</span><span class="number">1371</span></span><br></pre></td></tr></table></figure></p><h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>我们在应用程序中使用<code>pkg/errors</code>包处理错误，但注意在公共库当中，我们一般不用这个包，减少依赖</p><h1 id="u9519_u8BEF_u5904_u7406_u65B9_u5F0F"><a href="#u9519_u8BEF_u5904_u7406_u65B9_u5F0F" class="headerlink" title="错误处理方式"></a>错误处理方式</h1><h2 id="u54E8_u5175_u9519_u8BEF"><a href="#u54E8_u5175_u9519_u8BEF" class="headerlink" title="哨兵错误"></a>哨兵错误</h2><p><code>Sentinel Error</code>哨兵错误，就是定义一些包级别的错误变量，然后在调用的时候外部包可以直接对比变量进行判定，在标准库当中大量的使用了这种方式</p><p>如io包的<code>io.EOF</code>，gorm的<code>gorm.ErrRecordNotFound</code>，底层系统调用的<code>syscall.ENOENT</code>等..</p><p>我们在使用时一般用等值或者<code>errors.Is</code>判断：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">..</span>.</span><br><span class="line"><span class="keyword">if</span> err == gorm.ErrRecordNotFound &#123;</span><br><span class="line">dosomething<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line">dosomething<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不用判断<code>error.Error()</code>返回的字符串<br>缺点：不灵活，将<code>error</code>当作包的API暴露给第三方，调用方必须先了解有哪些预定义的错误，并在程序中进行比较。服务提供方需要公共文档说明各种Error，导致包之间有了依赖，重构或版本升级也麻烦<br>总结：尽可能避免使用这种方式</p><h2 id="u81EA_u5B9A_u4E49_u7C7B_u578Berror"><a href="#u81EA_u5B9A_u4E49_u7C7B_u578Berror" class="headerlink" title="自定义类型error"></a>自定义类型error</h2><p><code>error</code>是interface，只要实现了<code>Error()</code>都可以当error使用</p><p>如</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyErr <span class="keyword">struct</span> &#123;</span><br><span class="line">Msg  <span class="keyword">string</span></span><br><span class="line">File <span class="keyword">string</span></span><br><span class="line">Line <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *MyErr)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s::%d:%s"</span>, e.File, e.Line, e.Msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">err := &amp;MyErr&#123;<span class="string">"err msg"</span>, <span class="string">"error.go"</span>, <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := doSomething()</span><br><span class="line">fmt.Printf(<span class="string">"%+v"</span>, err)</span><br><span class="line"><span class="keyword">switch</span> err := err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</span><br><span class="line"><span class="comment">//call success</span></span><br><span class="line"><span class="keyword">case</span> *MyErr:</span><br><span class="line">fmt.Println(<span class="string">"error occurred on line:"</span>, err.Line)</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  <span class="comment">//unknown error</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到结果是实现的<code>Error()</code>里定义的格式：<code>error.go::12:err msg</code></p><p>优点：与错误值相比，错误类型的改进是能包装提供更多上下文，例如标准库的<code>os.PathError</code><br>缺点：同样需要把错误类型暴露给调用方，而调用方需要用<code>switch</code>断言类型，还是有耦合，不利于维护<br>结论：尽量避免使用error types，至少避免将他们作为公共API的一部分</p><h2 id="u4E0D_u900F_u660E_u5904_u7406"><a href="#u4E0D_u900F_u660E_u5904_u7406" class="headerlink" title="不透明处理"></a>不透明处理</h2><p>不透明错误是<code>opaque errors</code>，调用方捕获错误即返回上层，这样对代码耦合是最少的：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">dosomething</span>() <span class="selector-tag">err</span> &#123;</span><br><span class="line"><span class="attribute">err </span>:= <span class="built_in">step1</span>()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：对代码耦合最少<br>缺点：少数情况下当想对具体错误进行判断时不太够用<br>总结：可以用在大部分情况</p><h2 id="u6309_u884C_u4E3A_u65AD_u8A00"><a href="#u6309_u884C_u4E3A_u65AD_u8A00" class="headerlink" title="按行为断言"></a>按行为断言</h2><p>当调用方需要调查错误性质，并做相应处理，可以使用行为断言，而不是断言错误是特定类型或值</p><p>如<code>net</code>包的<code>Error</code>接口，定义了<code>Timeout()</code>,<code>Temporary()</code>两种行为，调用方可以通过行为做对应处理    ：</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="built_in">Error</span> interface &#123;</span><br><span class="line"><span class="built_in">error</span></span><br><span class="line"><span class="built_in">Timeout</span>() <span class="keyword">bool</span>   <span class="comment">// Is the error a timeout?</span></span><br><span class="line"><span class="built_in">Temporary</span>() <span class="keyword">bool</span> <span class="comment">// Is the error temporary?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">err</span> := dosomething()</span><br><span class="line"><span class="keyword">if</span> nerr, ok := <span class="keyword">err</span>.(<span class="keyword">net</span>.<span class="keyword">Error</span>); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class="line">time.<span class="keyword">Sleep</span>(1e9)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：我们可以不导入定义错误的包，或实际上不了解error底层类型的情况下实现逻辑处理<br>结论：比预定义错误和自定义错误好</p><h1 id="u4E00_u4E9B_u597D_u4E60_u60EF"><a href="#u4E00_u4E9B_u597D_u4E60_u60EF" class="headerlink" title="一些好习惯"></a>一些好习惯</h1><h2 id="u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801"><a href="#u51CF_u5C11_u7F29_u8FDB_u4EE3_u7801" class="headerlink" title="减少缩进代码"></a>减少缩进代码</h2><p>错误处理时先判断错误，遇到错误则返回，使代码成为一条流畅的直线，而不是缩进的代码</p><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">err</span> := A()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="comment">//handle error </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line"><span class="keyword">err</span> = B()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="comment">// handle error </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//do something</span></span><br></pre></td></tr></table></figure><h2 id="u51CF_u5C11_u91CD_u590D_u5224_u65AD"><a href="#u51CF_u5C11_u91CD_u590D_u5224_u65AD" class="headerlink" title="减少重复判断"></a>减少重复判断</h2><p>如统计<code>io.Reader</code>读取内容行数的实现：</p><p>普通实现:</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">func CountLines(r io.Reader) (int, <span class="keyword">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="keyword">br</span>    = bufio.NewReader(r)</span><br><span class="line">lines int</span><br><span class="line"><span class="keyword">err</span>   <span class="keyword">error</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 读取到换行符就说明是一行</span></span><br><span class="line">_, <span class="keyword">err</span> = <span class="keyword">br</span>.ReadString('\<span class="keyword">n</span>')</span><br><span class="line">lines++</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当错误是 EOF 的时候说明文件读取完毕了</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != io.EOF &#123;</span><br><span class="line"><span class="keyword">return</span> 0, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> lines, <span class="keyword">err</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>bufio.scan</code>实现:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CountLines</span><span class="params">(r io.Reader)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">sc    = bufio.NewScanner(r)</span><br><span class="line">lines <span class="keyword">int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sc.Scan() &#123;</span><br><span class="line">lines++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> lines, sc.Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bufio.scan</code>实现后少了很多<code>if err</code>判断，因为<code>sc.Scan</code>做了类似的处理，需要循环读以的都可以考虑这样包装</p><h2 id="wrap_error_3A_u9519_u8BEF_u5305_u88C5"><a href="#wrap_error_3A_u9519_u8BEF_u5305_u88C5" class="headerlink" title="wrap error:错误包装"></a>wrap error:错误包装</h2><p>第三方包<code>github.com/pkg/errors</code>的Wrap可以追加错误信息和堆栈信息，这样我们更加方便定位错误</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrap returns an error annotating err with a stack trace</span></span><br><span class="line"><span class="comment">// at the point Wrap is called, and the supplied message.</span></span><br><span class="line"><span class="comment">// If err is nil, Wrap returns nil.</span></span><br><span class="line">func Wrap(<span class="keyword">err</span> <span class="keyword">error</span>, message string) <span class="keyword">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> == nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">err</span> = &amp;withMessage&#123;</span><br><span class="line">cause: <span class="keyword">err</span>,</span><br><span class="line">msg:   message,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;withStack&#123;</span><br><span class="line"><span class="keyword">err</span>,</span><br><span class="line">callers(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但请不要处处都使用<code>errors.Wrap</code>，因为这样会产生大量无效堆栈，一般我们只需要在调用标准库包时添加，平时遇到错误可以用无透明方式返回处理，如果想再追加Message，可以使用<code>errors.WithMessage</code></p><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">err</span> = doSomething()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">  <span class="keyword">err</span> = xerrors.WithMessage(<span class="keyword">err</span>, <span class="string">"dosomething fail"</span>)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过多层包装的错误没法与哨兵模式结合判断，这时可以通过<code>errors.Cause</code>获取最初的<code>error</code>来判断：</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"></span><br><span class="line">xerrors <span class="string">"github.com/pkg/errors"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">err</span> := io.EOF</span><br><span class="line"><span class="keyword">err</span> = xerrors.Wrap(<span class="keyword">err</span>, <span class="string">"wrap message"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errors.Is(xerrors.Cause(<span class="keyword">err</span>), io.EOF) &#123;</span><br><span class="line">fmt.<span class="keyword">Print</span>(<span class="string">"true"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;golang编程中，错误处理估计是写得最多的代码，我们总结一下使用上的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;u6807_u51C6_u5E93_vs__u7B2C_u4E09_u65B9_u5305pkg/errors&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="golang" scheme="http://www.jcsama.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.jcsama.com/tags/golang/"/>
    
      <category term="errors" scheme="http://www.jcsama.com/tags/errors/"/>
    
  </entry>
  
  <entry>
    <title>使用mysql中间件：mysql proxy</title>
    <link href="http://www.jcsama.com/2021/12/20/mysql/mysql-proxy/"/>
    <id>http://www.jcsama.com/2021/12/20/mysql/mysql-proxy/</id>
    <published>2021-12-20T14:15:47.000Z</published>
    <updated>2021-12-29T12:56:53.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。</p></blockquote><h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><p>前往<a href="https://downloads.mysql.com/archives/proxy/" target="_blank" rel="noopener">mysql官网</a>，选择对应的版本，如我选择的是Linux平台的文件，下载到服务器：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>解压</span><br><span class="line">tar -zxf mysql-proxy-<span class="number">0.8</span>.<span class="number">5</span>-linux-el6-x86-<span class="number">64</span>bit.tar.gz</span><br><span class="line"><span class="regexp">//</span>移动到mysql_proxy</span><br><span class="line">sudo mv -f mysql_proxy<span class="regexp">/mysql-proxy-0.8.5-linux-el6-x86-64bit/</span>* .<span class="regexp">/mysql_proxy/</span></span><br><span class="line"><span class="regexp">//</span>查看版本</span><br><span class="line">.<span class="regexp">/mysql_proxy/</span>bin<span class="regexp">/mysql-proxy -V</span></span><br></pre></td></tr></table></figure><p>可以看到版本，依赖的glib，libevent，lua版本等：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">mysql-proxy <span class="number">0.8</span>.<span class="number">5</span></span><br><span class="line">  <span class="symbol">chassis:</span> <span class="number">0.8</span>.<span class="number">5</span></span><br><span class="line">  <span class="symbol">glib2:</span> <span class="number">2.16</span>.<span class="number">6</span></span><br><span class="line">  <span class="symbol">libevent:</span> <span class="number">2.0</span>.<span class="number">21</span>-stable</span><br><span class="line">  <span class="symbol">LUA:</span> Lua <span class="number">5.1</span>.<span class="number">4</span></span><br><span class="line">    package.<span class="symbol">path:</span> /data1/mysqlproxy/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>-<span class="title">proxy</span>/<span class="title">lua</span>/?.<span class="title">lua</span></span></span><br><span class="line">    package.<span class="symbol">cpath:</span> /data1/mysqlproxy/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>-<span class="title">proxy</span>/<span class="title">lua</span>/?.<span class="title">so</span></span></span><br><span class="line">-- modules</span><br><span class="line">  <span class="symbol">proxy:</span> <span class="number">0.8</span>.<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="u7B80_u5355_u542F_u52A8"><a href="#u7B80_u5355_u542F_u52A8" class="headerlink" title="简单启动"></a>简单启动</h2><p>mysql-proxy启动至少需要指定一个后端mysql的ip和端口号，此时带上–proxy-backend-addresses参数即可：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./mysql_proxy/bin/mysql-proxy</span> <span class="params">--proxy-backend-addresses=127</span>.0.0.1<span class="function">:3306</span></span><br></pre></td></tr></table></figure><h2 id="u914D_u7F6E_u6587_u4EF6_u542F_u52A8"><a href="#u914D_u7F6E_u6587_u4EF6_u542F_u52A8" class="headerlink" title="配置文件启动"></a>配置文件启动</h2><h3 id="u914D_u7F6E_u9879"><a href="#u914D_u7F6E_u9879" class="headerlink" title="配置项"></a>配置项</h3><p>我们可以配置<code>./mysql_proxy/rw-splitting.lua</code>, 来设置最小最大空闲连接</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> not proxy.global.config.rwsplit <span class="keyword">then</span></span><br><span class="line">    proxy.global.config.<span class="attr">rwsplit</span> = &#123;</span><br><span class="line">            <span class="attr">min_idle_connections</span> = <span class="number">10</span>,</span><br><span class="line">            <span class="attr">max_idle_connections</span> = <span class="number">20</span>,</span><br><span class="line">            <span class="attr">is_debug</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>接着配置我们使用的mysql server:<br><code>vi ./mysql_proxy/conf/proxy_4000.conf</code></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql-proxy]</span></span><br><span class="line"><span class="attr">proxy-address</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">4000</span></span><br><span class="line"><span class="attr">proxy-backend-addresses</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>  </span><br><span class="line"><span class="attr">proxy-read-only-backend-addresses</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span></span><br><span class="line"><span class="attr">log-file</span> = /data1/mysqlproxy/logs/mysql-proxy.log</span><br><span class="line"><span class="attr">proxy-lua-script</span>=/data1/mysqlproxy/rw-splitting.lua</span><br><span class="line"><span class="attr">log-level</span> = info</span><br><span class="line"><span class="attr">daemon</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">keepalive</span>= <span class="number">1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>proxy-address</td><td>提供给外部调用的ip和端口</td></tr><tr><td>proxy-backend-addresses</td><td>后端使用的mysql节点，必填</td></tr><tr><td>proxy-read-only-backend-addresses</td><td>后端使用的mysql只读节点，需要读写分离时填</td></tr><tr><td>log-file</td><td>日志存储地址</td></tr><tr><td>proxy-lua-script</td><td>lua配置脚本</td></tr><tr><td>log-level</td><td>日志级别</td></tr><tr><td>daemon</td><td>后台运行</td></tr><tr><td>keepalive</td><td>常驻</td></tr></tbody></table><h3 id="u542F_u52A8"><a href="#u542F_u52A8" class="headerlink" title="启动"></a>启动</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo .<span class="regexp">/mysql_proxy/</span>bin<span class="regexp">/mysql-proxy  --defaults-file=./my</span>sql_proxy<span class="regexp">/conf/</span>proxy_4000.conf</span><br></pre></td></tr></table></figure><p>如果遇到报错：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">loading<span class="built_in"> config </span><span class="keyword">from</span> <span class="string">'./mysql_proxy/conf/proxy_4000.conf'</span> failed:permissions of ./mysql_proxy/conf/proxy_4000.conf aren<span class="string">'t secure (0660 or stricter required)</span></span><br></pre></td></tr></table></figure><p>这个是安全要求，将配置文件权限设为660才能启动，改一下权限就可以。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mysql-proxy是mysql官方提供的mysql中间件服务，上游可接入若干个mysql-client，后端可连接若干个mysql-server，它使用mysql协议，任何连接mysql的上游无需任何更改即可迁移至mysql-proxy上。&lt;/
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.jcsama.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>GO环境篇-从零开始的Docker环境搭建</title>
    <link href="http://www.jcsama.com/2021/11/27/golang/docker/"/>
    <id>http://www.jcsama.com/2021/11/27/golang/docker/</id>
    <published>2021-11-27T02:33:16.000Z</published>
    <updated>2021-11-27T10:39:58.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从Dockerfile开始的环境搭建</p></blockquote><h1 id="u7F16_u5199dockerfile"><a href="#u7F16_u5199dockerfile" class="headerlink" title="编写dockerfile"></a>编写dockerfile</h1><h2 id="step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A"><a href="#step1__u660E_u786Edockerfile_u8981_u505A_u7684_u4E8B_uFF1A" class="headerlink" title="step1 明确dockerfile要做的事："></a>step1 明确dockerfile要做的事：</h2><ul><li>选择环境包，如centos</li><li>安装基本软件binutils/vim/gdb/git/wget等</li><li>选择golang版本，下载，安装</li><li>安装调试工具delve</li></ul><h2 id="step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765"><a href="#step2__u628A_u6E05_u5355_u7F16_u5199_u51FA_u6765" class="headerlink" title="step2 把清单编写出来"></a>step2 把清单编写出来</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum <span class="keyword">install</span> binutils -y \</span><br><span class="line">    &amp;&amp; yum <span class="keyword">install</span> vim -y \</span><br><span class="line">    &amp;&amp; yum <span class="keyword">install</span> gdb -y \</span><br><span class="line">    &amp;&amp; yum <span class="keyword">install</span> git -y \</span><br><span class="line">    &amp;&amp; yum <span class="keyword">install</span> wget -y</span><br><span class="line"></span><br><span class="line">RUN wget https://dl.google.com/<span class="keyword">go</span>/go1<span class="number">.14</span><span class="number">.12</span>.linux-amd64.tar.gz  \</span><br><span class="line">    &amp;&amp; tar -C /usr/<span class="keyword">local</span> -zxvf go1<span class="number">.14</span><span class="number">.12</span>.linux-amd64.tar.gz \</span><br><span class="line">    &amp;&amp; rm /go1<span class="number">.14</span><span class="number">.12</span>.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">ENV <span class="keyword">PATH</span> /usr/<span class="keyword">local</span>/<span class="keyword">go</span>/<span class="keyword">bin</span>:$<span class="keyword">PATH</span></span><br><span class="line">ENV GOPATH /home</span><br><span class="line">ENV GOROOT /usr/<span class="keyword">local</span>/<span class="keyword">go</span></span><br><span class="line">ENV GOPROXY goproxy.cn</span><br><span class="line"></span><br><span class="line">RUN git <span class="keyword">clone</span> https://github.com/<span class="keyword">go</span>-delve/delve \</span><br><span class="line">&amp;&amp; cd delve/ \</span><br><span class="line">&amp;&amp; <span class="keyword">go</span> <span class="keyword">build</span> ./cmd/dlv/ \</span><br><span class="line">&amp;&amp; cp ./dlv /usr/<span class="keyword">local</span>/<span class="keyword">bin</span></span><br></pre></td></tr></table></figure><h1 id="build_u955C_u8C61"><a href="#build_u955C_u8C61" class="headerlink" title="build镜象"></a>build镜象</h1><h2 id="u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A"><a href="#u7ED9dockerimage_u60F3_u4E2A_u540D_u5B57_uFF0C_u5982go14dev_3A" class="headerlink" title="给dockerimage想个名字，如go14dev:"></a>给dockerimage想个名字，如go14dev:</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t go14dev .</span><br></pre></td></tr></table></figure><h2 id="u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A"><a href="#u8FC7_u7A0B_u4E2D_u53EF_u80FD_u4F1A_u9047_u5230_u95EE_u9898_3A" class="headerlink" title="过程中可能会遇到问题:"></a>过程中可能会遇到问题:</h2><ul><li>如<code>git clone delve</code>超时，这时可以在外部把delve下载到当前目录，copy进去执行。<br>最后一句换成：</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#RUN git clone https://github.com/go-delve/delve \delve/cmd/dlv</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> delve ./delve</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  <span class="built_in">cd</span> delve/ \</span></span><br><span class="line"><span class="bash">&amp;&amp; go build ./cmd/dlv/ \</span></span><br><span class="line"><span class="bash">&amp;&amp; cp ./dlv /usr/<span class="built_in">local</span>/bin</span></span><br></pre></td></tr></table></figure><ul><li>build dlv报错</li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"> &gt; [<span class="number">6</span>/<span class="number">7</span>] RUN <span class="keyword">go</span> build ./cmd/<span class="keyword">dl</span><span class="variable">v:</span></span><br><span class="line">#<span class="number">10</span> <span class="number">0.150</span> qemu-x86_64: Could not <span class="keyword">open</span> <span class="string">'/lib64/ld-linux-x86-64.so.2'</span>: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br></pre></td></tr></table></figure><p>可以在build命令加上<code>--platform linux/x86_64</code></p><p>变成：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker build <span class="comment">--platform linux/x86_64 -t go14dev .</span></span><br></pre></td></tr></table></figure><h1 id="run"><a href="#run" class="headerlink" title="run"></a>run</h1><h2 id="u628A_u955C_u8C61_u8DD1_u8D77_u6765"><a href="#u628A_u955C_u8C61_u8DD1_u8D77_u6765" class="headerlink" title="把镜象跑起来"></a>把镜象跑起来</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm go14dev bash</span></span><br></pre></td></tr></table></figure><p>写个main.go测试一下：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> <span class="builtin-name">run</span> main.go</span><br><span class="line">&gt;hello world</span><br></pre></td></tr></table></figure><h2 id="u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB"><a href="#u628A_u672C_u5730_u6587_u4EF6_u6302_u8F7D_u8FDB_u53BB" class="headerlink" title="把本地文件挂载进去"></a>把本地文件挂载进去</h2><p>docker环境里的文件重启就会消失，所以我们项目一般是挂载上去，加上<code>-v localpath:dockerpath</code></p><p>如：</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">docker run -v ~<span class="regexp">/code/web</span><span class="symbol">:/data/web</span>  -it  --rm go14dev bash</span><br></pre></td></tr></table></figure><p>进入环境后，<code>ls -lah /data/web</code>就能看到挂载进去的文件了</p><h1 id="u63A8_u9001_u955C_u8C61_u5230docker-hub-com"><a href="#u63A8_u9001_u955C_u8C61_u5230docker-hub-com" class="headerlink" title="推送镜象到docker.hub.com"></a>推送镜象到docker.hub.com</h1><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">docker login -<span class="class">u </span>&#123;username&#125;</span><br></pre></td></tr></table></figure><h2 id="u6253tag_3A"><a href="#u6253tag_3A" class="headerlink" title="打tag:"></a>打tag:</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">go14dev</span>:latest go14dev</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">docker</span> <span class="keyword">push </span>&#123;username&#125;/go14dev:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从Dockerfile开始的环境搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;u7F16_u5199dockerfile&quot;&gt;&lt;a href=&quot;#u7F16_u5199dockerfile&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="golang" scheme="http://www.jcsama.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.jcsama.com/tags/golang/"/>
    
      <category term="docker" scheme="http://www.jcsama.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo gitpage 404</title>
    <link href="http://www.jcsama.com/2021/10/03/js/hexo/hexo-gitpage-404/"/>
    <id>http://www.jcsama.com/2021/10/03/js/hexo/hexo-gitpage-404/</id>
    <published>2021-10-03T13:30:20.000Z</published>
    <updated>2021-10-12T10:31:02.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898"><a href="#u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898" class="headerlink" title="一个奇怪的问题"></a>一个奇怪的问题</h2><ul><li><p>Step 1 更新了一篇新的post;</p></li><li><p>Step 2 使用<code>hexo s</code>本地页面显示正常 ;</p></li><li><p>Step 3 使用<code>hexo g -d</code>命令执行正确;</p></li><li><p>Step 4 打开对应的Git page，发现404</p></li></ul><h2 id="u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0"><a href="#u4E3A_u4EC0_u4E48_u4F1A_u51FA_u73B0" class="headerlink" title="为什么会出现"></a>为什么会出现</h2><ul><li>首先从最后环节开始排查，使用<code>hexo d --debug</code>查看部署是否有问题，没看到报错，把<code>.deploy_git</code>下的文件清理掉，重新跑几次也没解决</li><li>接着看部署问题，<code>hexo g --debug</code>，文件生成也正常，无报错</li><li>继续看生成的入口文件，发现<code>index.html</code>是空的，问题可能在这</li><li>搜索<code>hexo index.html empty</code> 这回找到别人也有一样的问题，找到问题：</li></ul><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">版本太高了，hexo</span> 还不支持</span><br></pre></td></tr></table></figure><h2 id="u89E3_u51B3"><a href="#u89E3_u51B3" class="headerlink" title="解决"></a>解决</h2><p>查看<code>hexo</code>版本：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">hexo</span> <span class="string">-v</span>                                                                            </span><br><span class="line"><span class="attr">hexo:</span> <span class="number">3.9</span><span class="number">.0</span></span><br><span class="line"><span class="attr">hexo-cli:</span> <span class="number">4.3</span><span class="number">.0</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">darwin</span> <span class="number">20.5</span><span class="number">.0</span> <span class="number">11.4</span></span><br></pre></td></tr></table></figure><p>参考<a href="https://hexo.io/news/2021/07/09/hexo-renderer-pug-2-0-0-hexo-cli-4-3-0-hexo-paginaiton-2-0-0-hexo-clean-css-2-0-0/" target="_blank" rel="noopener">hexo官网</a>推荐，支持的node版本是<code>8</code>以上或者<code>12</code></p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">drop <span class="keyword">node</span> <span class="title">8</span> <span class="keyword">and</span> add <span class="keyword">node</span> <span class="title">12</span></span><br></pre></td></tr></table></figure><p>查看本地<code>node -v</code>:<code>v16.6.1</code>确实不符合，重新下载了<code>node12</code>，再部署解决～</p><h2 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h2><p>版本不兼容也没有提示，对使用者还是有些不友好，把错误都吞掉了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898&quot;&gt;&lt;a href=&quot;#u4E00_u4E2A_u5947_u602A_u7684_u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;一个奇怪的问题&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="http://www.jcsama.com/categories/node/"/>
    
    
      <category term="hexo" scheme="http://www.jcsama.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>一个环境引发的乱码问题</title>
    <link href="http://www.jcsama.com/2021/09/11/php/php_mysql_charset/"/>
    <id>http://www.jcsama.com/2021/09/11/php/php_mysql_charset/</id>
    <published>2021-09-11T10:13:00.000Z</published>
    <updated>2022-03-18T08:30:32.836Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：”it can works ,why ?”  or  “it can`t works , why?”</p></blockquote><h2 id="u53D1_u73B0_u95EE_u9898"><a href="#u53D1_u73B0_u95EE_u9898" class="headerlink" title="发现问题"></a>发现问题</h2><p>有这一段代码，在服务器A中，从Mysql查出来的中文字段是正常显示的，从服务器B中显示的却是<code>???</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT * from m_user limit 10"</span>;</span><br><span class="line">$db = <span class="keyword">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class="line">$result = $db-&gt;query($sql);</span><br><span class="line">$output = $result-&gt;fetch_assoc();</span><br><span class="line">$result-&gt;free();</span><br><span class="line">var_dump($output);</span><br></pre></td></tr></table></figure><h2 id="u4FEE_u590D_u95EE_u9898"><a href="#u4FEE_u590D_u95EE_u9898" class="headerlink" title="修复问题"></a>修复问题</h2><p><code>MySQLi</code>很少用，现在基本都是用<code>PDO</code>了，遇到这问题第一反应是查函数文档，是不是有些奇怪的环境设置。</p><p>查到<code>MySQLi</code>编码相关有<code>set_charset</code>函数，而mysql连接也有<code></code>SET NAMES {charset}`可以指定编码，在使用代码指定编码后服务器B也可以正常使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$db = <span class="keyword">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class="line">$db-&gt;set_charset(<span class="string">"utf8"</span>);</span><br><span class="line"><span class="comment">// or $db-&gt;query("set names utf8");</span></span><br><span class="line">$result = $db-&gt;query($sql);</span><br></pre></td></tr></table></figure><p>指定编码是可以正常查询，那么我们再通过<code>get_charset</code>，看看各自连接默认使用的编码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$db = <span class="keyword">new</span> MySQLi($host, $user, $pwd, $dbname, $port);</span><br><span class="line">var_dump($db-&gt;get_charset());</span><br></pre></td></tr></table></figure><p>发现正常的机器上使用的是<code>utf8</code>，乱码机器上的是<code>latin1</code></p><h2 id="u6392_u67E5_u95EE_u9898"><a href="#u6392_u67E5_u95EE_u9898" class="headerlink" title="排查问题"></a>排查问题</h2><p>我们发现问题在于php与mysql连接时，默认编码不一致，我们排查一下php与mysql的连接扩展有没有问题</p><p>通过<code>php -i</code> 命令查看mysql client使用的版本</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认utf8的机器:</span></span><br><span class="line">mysqli</span><br><span class="line">Client API library version =&gt; 5.5.19</span><br><span class="line">---------------------</span><br><span class="line"><span class="comment">//默认latin1的机器：</span></span><br><span class="line">mysqli</span><br><span class="line">Client API library version =&gt; 5.5.68-MariaDB</span><br></pre></td></tr></table></figure><p>通过对比，我们发现两者的版本并不一致，有问题的机器使用的是<code>MariaDB</code>，通过wifi百科发现这是个社区开发的，兼容mysql协议的开源数据库管理系统。</p><p><code>MariaDB</code>的API和协议兼容MySQL，使用是没有问题的，但<code>MariaDB</code>的默认编码是<code>latin1</code>，那这很可能就是问题根源。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">In</span> MariaDB, the<span class="built_in"> default </span>character <span class="builtin-name">set</span> is latin1, <span class="keyword">and</span> the<span class="built_in"> default </span>collation is latin1_swedish_ci</span><br></pre></td></tr></table></figure><p>尝试修改php连接mysql的 Client API library，安装mysqlmysql_5.5.19 lib包，改原来使用包的软链，发现代码正常运行，问题解决～</p><h2 id="u540E_u8BB0"><a href="#u540E_u8BB0" class="headerlink" title="后记"></a>后记</h2><p>我们可以通过docker之类的工具，保持统一的环境，但从开发的解决还是尽量维护代码健壮性，通过代码指定连接使用的编码，这样换一个差不多的环境也能正常运行，可以少折腾一些环境</p><h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="/MariaDB">MariaDB</a></li><li><a href="https://mariadb.com/kb/en/setting-character-sets-and-collations/" target="_blank" rel="noopener">MariaDb Default Charset</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 每个程序员多少都遇到过一些祖传代码，当代码能跑起来的时候并不可怕，可怕的是换了个环境，代码跑不起来了，这时脑里离不开这2个问题：”it can works ,why ?”  or  “it can`t works , why?”&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="php" scheme="http://www.jcsama.com/categories/php/"/>
    
    
      <category term="php" scheme="http://www.jcsama.com/tags/php/"/>
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>拆分Git仓库并保存提交记录</title>
    <link href="http://www.jcsama.com/2021/06/26/git/split-git-repository/"/>
    <id>http://www.jcsama.com/2021/06/26/git/split-git-repository/</id>
    <published>2021-06-26T14:48:38.000Z</published>
    <updated>2021-08-09T06:15:05.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作</p></blockquote><h2 id="u57FA_u672C_u8BBE_u5B9A"><a href="#u57FA_u672C_u8BBE_u5B9A" class="headerlink" title="基本设定"></a>基本设定</h2><p>父项目为 <code>https://github.com/xxx/demo.git</code></p><p>父仓库目录：/demo</p><p>当前子仓库目录：/demo/target_child</p><p>目标是把target_child拆到新项目：<code>https://github.com/xxx/target_child.git</code></p><h2 id="step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939"><a href="#step1_clone__u4E00_u4EFD_u539F_u4ED3_u5E93_u6587_u4EF6_u5230_u672C_u5730_uFF0C_u76EE_u5F55_u4E3A_u76EE_u6807_u6587_u4EF6_u5939" class="headerlink" title="step1 clone 一份原仓库文件到本地，目录为目标文件夹"></a>step1 clone 一份原仓库文件到本地，目录为目标文件夹</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">​cd ~/git/code/</span><br><span class="line">​</span><br><span class="line">​git <span class="keyword">clone</span> <span class="title">https</span>://github.com/xxx/demo.git target_child</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h2 id="step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote"><a href="#step2__u5220_u6389_u539F_u4ED3_u5E93_u7684remote" class="headerlink" title="step2 删掉原仓库的remote"></a>step2 删掉原仓库的remote</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">cd</span> target_child</span><br><span class="line"></span><br><span class="line">git remote <span class="keyword">rm</span> origin</span><br></pre></td></tr></table></figure><h2 id="step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55"><a href="#step3__u8FC7_u6EE4_u65E0_u7528_u7684_u5386_u53F2_u8BB0_u5F55" class="headerlink" title="step3 过滤无用的历史记录"></a>step3 过滤无用的历史记录</h2><p>过滤所有历史提交，只保留对指定子目录有影响的提交. 命令执行完毕后，就可以看到本地的新仓库已经是原仓库子目录中的内容了，且保留了关于该子目录所有的提交历史。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">git filter-branch --tag-name-filter cat --prune-empty --subdirectory-filter ./target_child -- --all</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–tag-name-filter</td><td>该参数控制我们要如何处理旧的 tag，cat 即表示原样输出</td></tr><tr><td>–prune-empty</td><td>删除空的（对子目录没有影响的）提交</td></tr><tr><td>–subdirectory-filter</td><td>指定子目录路径, 如<code>./target_child</code></td></tr><tr><td>– –all</td><td>该参数必须跟在<code>--</code>后面，表示对所有分支进行操作。如果你只想保存当前分支，也可以不添加此参数。</td></tr></tbody></table><h2 id="step_4__u6E05_u7406-git_u7684object"><a href="#step_4__u6E05_u7406-git_u7684object" class="headerlink" title="step 4 清理.git的object"></a>step 4 清理.git的object</h2><p><code>.git</code> 目录里还是保存有不少无用的object，我们需要将其清除掉以减小新仓库的体积.</p><p>PS: <code>git gc</code>操作耗时比较久,请耐心等待.</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line">git for-each-ref --format="%(refname)" refs/original/ |xargs -n 1 git update-ref -d</span><br><span class="line"></span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line"></span><br><span class="line">git gc --aggressive --prune=now</span><br></pre></td></tr></table></figure><h2 id="step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF"><a href="#step_5__u5C06_u65B0_u7684_u672C_u5730_u4ED3_u5E93_u63A8_u9001_u5230_u8FDC_u7AEF" class="headerlink" title="step 5 将新的本地仓库推送到远端"></a>step 5 将新的本地仓库推送到远端</h2><p>先创建新的仓库：<code>https://github.com/xxx/target_child.git</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">//添加远端分支</span><br><span class="line"></span><br><span class="line">git remote add origin https://github.com/xxx/target_child.git</span><br><span class="line"></span><br><span class="line">//强制推送到远端</span><br><span class="line"></span><br><span class="line">git push --fore origin master</span><br></pre></td></tr></table></figure><p>PS:</p><p>若master分支为保护状态，强制推送时会遇到如下错误：</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">remote: GitLab: You are not allowed to force push code to a protected branch on this project.</span></span><br></pre></td></tr></table></figure><p>须解除master分支的保护状态，推完之后再改回来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;分分合合是常态，大项目有时会有拆分的需求，当想拆分git项目，又想保留提交记录时，可以按下面流程操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u57FA_u672C_u8BBE_u5B9A&quot;&gt;&lt;a href=&quot;#u57FA_u672C_
      
    
    </summary>
    
      <category term="git" scheme="http://www.jcsama.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.jcsama.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mysql abs func</title>
    <link href="http://www.jcsama.com/2021/06/10/mysql/mysql-abs/"/>
    <id>http://www.jcsama.com/2021/06/10/mysql/mysql-abs/</id>
    <published>2021-06-10T15:15:47.000Z</published>
    <updated>2021-08-09T06:15:05.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ABS(<em>number</em>)</p><p>Return the absolute value of a number</p></blockquote><h2 id="u57FA_u672C_u7528_u6CD5"><a href="#u57FA_u672C_u7528_u6CD5" class="headerlink" title="基本用法"></a>基本用法</h2><p>返回数字参数的绝对值</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-243.5</span>);     ===&gt; 243.5</span><br></pre></td></tr></table></figure><h2 id="u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898"><a href="#u65E0_u7B26_u53F7_u6570_u5B57_u76F8_u51CF_u8BA1_u7B97_u5F02_u5E38_u95EE_u9898" class="headerlink" title="无符号数字相减计算异常问题"></a>无符号数字相减计算异常问题</h2><p>例子：创建用户表，年龄字段为非负</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `uid` int(11) unsigned <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'uid'</span>,</span><br><span class="line">  `age` int(10) unsigned <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">  `name` varchar(50) <span class="keyword">NOT</span> <span class="literal">NULL</span><span class="built_in"> DEFAULT </span><span class="string">''</span> COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  PRIMARY KEY (`uid`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB <span class="attribute">AUTO_INCREMENT</span>=1<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8mb4 COMMENT <span class="string">'用户表'</span>;</span><br></pre></td></tr></table></figure><p>写入几条测试数据</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> `<span class="selector-tag">user</span>` ( <span class="built_in">`age`</span>, <span class="built_in">`name`</span>)</span><br><span class="line"><span class="selector-tag">VALUES</span></span><br><span class="line">( <span class="number">11</span>, <span class="string">'张小明'</span>),</span><br><span class="line">( <span class="number">26</span>, <span class="string">'林小红'</span>),</span><br><span class="line">( <span class="number">21</span>, <span class="string">'李小狼'</span>),</span><br><span class="line">( <span class="number">18</span>, <span class="string">'陈小洋'</span>);</span><br></pre></td></tr></table></figure><p>当我们想找出年龄最接近25岁的用户时，会出现Mysql错误：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select *,ABS(age - 25) as age_sort <span class="keyword">from</span><span class="built_in"> user </span>order by age_sort asc limit 1;</span><br><span class="line">===&gt;BIGINT UNSIGNED value is out of range <span class="keyword">in</span> <span class="string">'(`user`.`age` - 25)'</span></span><br></pre></td></tr></table></figure><p>解决方法：使用cast把无符号age转为带符号的number</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *,<span class="built_in">ABS</span>(<span class="keyword">CAST</span>(age <span class="keyword">AS</span> SIGNED) - <span class="number">25</span>) <span class="keyword">as</span> age_sort </span><br><span class="line"><span class="keyword">from</span> <span class="symbol">`user`</span> <span class="keyword">order</span> <span class="keyword">by</span> age_sort <span class="keyword">asc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ABS(&lt;em&gt;number&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Return the absolute value of a number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u57FA_u672C_u7528_u6CD5&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.jcsama.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP3.1 事务BUG</title>
    <link href="http://www.jcsama.com/2020/02/11/php/php_thinkphp3.1_db_bug/"/>
    <id>http://www.jcsama.com/2020/02/11/php/php_thinkphp3.1_db_bug/</id>
    <published>2020-02-11T10:13:00.000Z</published>
    <updated>2022-04-12T03:12:24.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 久远的框架不一定就安全，可能有一些隐藏的BUG</p></blockquote><h2 id="u53D1_u73B0_u95EE_u9898"><a href="#u53D1_u73B0_u95EE_u9898" class="headerlink" title="发现问题"></a>发现问题</h2><p>影响：开启事务，rollback后，再执行update/delete/insert等写操作，数据没有发生变化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$UserModel = <span class="keyword">new</span> UserModel();</span><br><span class="line">$UserModel-&gt;startTrans();</span><br><span class="line">$uid = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//dosomething.....</span></span><br><span class="line">  $UserModel-&gt;where(<span class="keyword">array</span>(<span class="string">"uid"</span>=&gt;$uid))-&gt;save(<span class="keyword">array</span>(<span class="string">"status"</span>=&gt;<span class="number">1</span>));</span><br><span class="line">  $UserModel-&gt;commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">  $UserModel-&gt;rollback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新无效</span></span><br><span class="line">$UserModel-&gt;where(<span class="keyword">array</span>(<span class="string">"uid"</span>=&gt;$uid))-&gt;save(<span class="keyword">array</span>(<span class="string">"login_time"</span>=&gt;time()));</span><br></pre></td></tr></table></figure><h2 id="u539F_u56E0_uFF1A"><a href="#u539F_u56E0_uFF1A" class="headerlink" title="原因："></a>原因：</h2><p>事务启动时会关闭mysql的自动提交，事务正常提交后会重新打开mysql的自动提交,但rollback时没重新打开</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 启动事务</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">startTrans</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error = <span class="string">''</span>;<span class="comment">//清空错误信息</span></span><br><span class="line">       <span class="keyword">$this</span>-&gt;initConnect(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//数据rollback 支持</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;transTimes == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;_linkID-&gt;autocommit(<span class="keyword">false</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;transTimes++;</span><br><span class="line">       <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用于非自动提交状态下面的查询提交</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolen</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;transTimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           $result = <span class="keyword">$this</span>-&gt;_linkID-&gt;commit();</span><br><span class="line">           <span class="keyword">$this</span>-&gt;transTimes = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(!$result)&#123;</span><br><span class="line">               <span class="keyword">$this</span>-&gt;error();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_linkID-&gt;autocommit( <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_linkID-&gt;autocommit( <span class="keyword">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 事务回滚</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> boolen</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;transTimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           $result = <span class="keyword">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class="line">           <span class="keyword">$this</span>-&gt;transTimes = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span>(!$result)&#123;</span><br><span class="line">               <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="u4FEE_u590D_uFF1A"><a href="#u4FEE_u590D_uFF1A" class="headerlink" title="修复："></a>修复：</h2><p>在rollback里重新打开自动提交</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 事务回滚</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> boolen</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;transTimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         $result = <span class="keyword">$this</span>-&gt;_linkID-&gt;rollback();</span><br><span class="line"><span class="comment">//打开自动提交</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;_linkID-&gt;autocommit( <span class="keyword">true</span>);</span><br><span class="line">         <span class="keyword">$this</span>-&gt;transTimes = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">if</span>(!$result)&#123;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;error();</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 久远的框架不一定就安全，可能有一些隐藏的BUG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u53D1_u73B0_u95EE_u9898&quot;&gt;&lt;a href=&quot;#u53D1_u73B0_u95EE_u9898&quot; class=&quot;header
      
    
    </summary>
    
      <category term="php" scheme="http://www.jcsama.com/categories/php/"/>
    
    
      <category term="php" scheme="http://www.jcsama.com/tags/php/"/>
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>GO学习笔记--defer篇</title>
    <link href="http://www.jcsama.com/2019/04/23/golang/defer/"/>
    <id>http://www.jcsama.com/2019/04/23/golang/defer/</id>
    <published>2019-04-23T14:33:16.000Z</published>
    <updated>2021-08-09T06:15:05.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="u4EC0_u4E48_u662Fdefer"><a href="#u4EC0_u4E48_u662Fdefer" class="headerlink" title="什么是defer"></a>什么是defer</h1><h1 id="defer_u7279_u522B"><a href="#defer_u7279_u522B" class="headerlink" title="defer特别"></a>defer特别</h1><p>栈，后进先出</p><h1 id="u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer"><a href="#u4EC0_u4E48_u573A_u666F_u4E0B_u7528defer" class="headerlink" title="什么场景下用defer"></a>什么场景下用defer</h1><p>程序员在编程的时候，经常需要打开一些资源，比如数据库连接、文件、锁等，这些资源需要在用完之后释放掉，否则会造成内存泄漏。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">f,err := os.Open(<span class="string">"test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(err, <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"do close \n"</span>)</span><br><span class="line">closeErr := f.Close()</span><br><span class="line"><span class="keyword">if</span> closeErr != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"close file err \n"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Print(<span class="string">"main end \n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="defer_u539F_u7406"><a href="#defer_u539F_u7406" class="headerlink" title="defer原理"></a>defer原理</h1><p>每次defer语句执行的时候，会把函数“压栈”，函数参数会被拷贝下来；当外层函数（非代码块，如一个for循环）退出时，defer函数按照定义的逆序执行；如果defer执行的函数为nil, 那么会在最终调用函数的产生panic.<br>defer语句并不会马上执行，而是会进入一个栈，函数return前，会按先进后出的顺序执行。也说是说最先被定义的defer语句最后执行。先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;u4EC0_u4E48_u662Fdefer&quot;&gt;&lt;a href=&quot;#u4EC0_u4E48_u662Fdefer&quot; class=&quot;headerlink&quot; title=&quot;什么是defer&quot;&gt;&lt;/a&gt;什么是defer&lt;/h1&gt;&lt;h1 id=&quot;defer_u7279_u
      
    
    </summary>
    
      <category term="golang" scheme="http://www.jcsama.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.jcsama.com/tags/golang/"/>
    
      <category term="defer" scheme="http://www.jcsama.com/tags/defer/"/>
    
  </entry>
  
  <entry>
    <title>GO语言IDE篇--Vscode (Mac)</title>
    <link href="http://www.jcsama.com/2018/11/20/IDE/vscode/go-ide-vscode/"/>
    <id>http://www.jcsama.com/2018/11/20/IDE/vscode/go-ide-vscode/</id>
    <published>2018-11-20T15:26:46.000Z</published>
    <updated>2021-11-27T09:57:58.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器<br>—-《论语·卫灵公》</p></blockquote><h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>当我们开始学习一个编程语言时，第一步就是选择一款编码工具，我们使用工具的主要目的是提高我们的效率： </p><ul><li>语法高亮(基本都有)</li><li>支持DEBUG</li><li>插件丰富</li><li>集成终端</li><li>颜值（这个也很重要啊喂！）</li></ul><p>对比多款式工具后，jetbrains系列收费，LiteIDE略丑，Vim学习曲线高…最后我选择了满足了我的所有要求的Vscode，下面开始撸之～</p><h2 id="u5B89_u88C5GO_u73AF_u5883"><a href="#u5B89_u88C5GO_u73AF_u5883" class="headerlink" title="安装GO环境"></a>安装GO环境</h2><p>这里假设我们已经安装完基础环境并配置好了环境变量，略过…</p><h2 id="u5B89_u88C5vscode"><a href="#u5B89_u88C5vscode" class="headerlink" title="安装vscode"></a>安装vscode</h2><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode官网</a>下之</p><h2 id="u5B89_u88C5go_u63D2_u4EF6"><a href="#u5B89_u88C5go_u63D2_u4EF6" class="headerlink" title="安装go插件"></a>安装go插件</h2><h3 id="u57FA_u7840_u63D2_u4EF6"><a href="#u57FA_u7840_u63D2_u4EF6" class="headerlink" title="基础插件"></a>基础插件</h3><p>打开vscode，打开插件搜索，输入go，安装之:<br><img src="/images/go-vscode/go-extend.png" alt="插件安装"></p><h3 id="u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301"><a href="#u5B89_u88C5_u4F9D_u8D56_u5305_u652F_u6301" class="headerlink" title="安装依赖包支持"></a>安装依赖包支持</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -<span class="keyword">p</span> $GOPAH/src/golang.org/<span class="keyword">x</span></span><br><span class="line">$ <span class="keyword">cd</span> $GOPAH/src/golang.org/<span class="keyword">x</span></span><br><span class="line">$ git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/golang/tools.git tools</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span>  github.<span class="keyword">com</span>/ramya-rao-<span class="keyword">a</span>/<span class="keyword">go</span>-outline</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span>  github.<span class="keyword">com</span>/acroca/<span class="keyword">go</span>-symbols</span><br><span class="line">$ <span class="keyword">go</span> install golang.org/<span class="keyword">x</span>/tools/cmd/guru</span><br><span class="line">$ <span class="keyword">go</span> install golang.org/<span class="keyword">x</span>/tools/cmd/gorename</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/rogpeppe/godef</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/sqs/goreturns</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/ramya-rao-<span class="keyword">a</span>/<span class="keyword">go</span>-outline</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/josharian/impl</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> golang.org/<span class="keyword">x</span>/lint/golint</span><br><span class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> -<span class="keyword">u</span> github.<span class="keyword">com</span>/cweill/gotests/gotests</span><br></pre></td></tr></table></figure><h3 id="u5B89_u88C5dlv"><a href="#u5B89_u88C5dlv" class="headerlink" title="安装dlv"></a>安装dlv</h3><p>go的debug依赖于dlv</p><p>安装dlv有2种途径:</p><h4 id="brew_u5B89_u88C5dlv"><a href="#brew_u5B89_u88C5dlv" class="headerlink" title="brew安装dlv"></a>brew安装dlv</h4><p>这个帮你解决了证书等问题</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ brew <span class="keyword">install</span> <span class="keyword">go</span>-delve/delve/delve</span><br></pre></td></tr></table></figure><h4 id="go_get_u5B89_u88C5dlv"><a href="#go_get_u5B89_u88C5dlv" class="headerlink" title="go get安装dlv"></a>go get安装dlv</h4><p>安装dlv</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ go get github.com<span class="regexp">/derekparker/</span>delve<span class="regexp">/cmd/</span>dlv</span><br><span class="line"></span><br><span class="line">-- 查看是否安装成功</span><br><span class="line">$ <span class="variable">$GOPATH</span><span class="regexp">/bin/</span>dlv version</span><br></pre></td></tr></table></figure><p>把dlv从<code>GOPATH</code>移动到<code>GOROOT</code></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo mv <span class="variable">$GOPATH</span><span class="regexp">/bin/</span>dlv <span class="variable">$GOROOT</span><span class="regexp">/bin/</span>dlv</span><br></pre></td></tr></table></figure><p>创建系统证书</p><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>打开<span class="string">"钥匙串访问"</span></span><br><span class="line"><span class="symbol">2 </span>打开菜单 钥匙串访问/证书助理/创建证书...</span><br><span class="line"><span class="symbol">3 </span>名称: dlv-cert 身份类型: 自签名证书 证书类型: 代码签名 并 选择<span class="string">"让我覆盖这些默认值"</span></span><br><span class="line"><span class="symbol">4 </span>单击<span class="string">"继续"</span>, 有效期(天数): <span class="number">365</span> 这里你可以自己修改, 我改为<span class="number">3650</span></span><br><span class="line"><span class="symbol">5 </span>一路继续下去, 直到看到<span class="string">"指定用于该证书的位置"</span> 钥匙串 选择 <span class="string">"系统"</span> 并单击<span class="string">"创建"</span>按钮</span><br><span class="line"><span class="symbol">6 </span>重启系统之后, 再打开<span class="string">"钥匙串访问"</span>, 选择<span class="string">"系统"</span>, 就会看到创建好的<span class="string">"dlv-cert"</span>证书.</span><br><span class="line"><span class="symbol">7 </span>右键<span class="string">"dlv-cert"</span>证书, 选择<span class="string">"显示简介"</span>-&gt;<span class="string">"信任"</span>-&gt;<span class="string">"代码签名"</span> 修改为: 始终信任</span><br></pre></td></tr></table></figure><p>分配证书</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo codesign -s <span class="string">"dlv-cert"</span> <span class="variable">$GOROOT</span><span class="regexp">/bin/</span>dlv</span><br></pre></td></tr></table></figure><p>如果调试时遇到下面问题：</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">could<span class="built_in"> not </span>launch process: debugserver<span class="built_in"> or </span>lldb-server<span class="built_in"> not </span>found: install XCode's command line tools<span class="built_in"> or </span>lldb-server</span><br></pre></td></tr></table></figure><p>可以安装一下xcode-select:</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure><h2 id="u5F00_u59CB_u8C03_u8BD5"><a href="#u5F00_u59CB_u8C03_u8BD5" class="headerlink" title="开始调试"></a>开始调试</h2><p>创建个必写的hello world文件：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">string</span> = <span class="string">"こんにちは"</span></span><br><span class="line"><span class="keyword">var</span> w <span class="keyword">string</span> = <span class="string">"世界"</span></span><br><span class="line">fmt.Println(h, w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后开始debug<br><img src="/images/go-vscode/start-debug.png" alt="开始debug"></p><p>如果是第一次调试，会让你编辑launch.json文件</p><p>我们加一个配置：<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"helloword"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"go"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="attr">"mode"</span>: <span class="string">"debug"</span>,</span><br><span class="line">    <span class="attr">"env"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/hello/helloworld.go"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>program是调试文件的地址，${workspaceRoot}是项目的根目录，根据实际情况改</p><p>保存，再跑一下debug：<br><img src="/images/go-vscode/debug.png" alt="开始debug"></p><p>这样就完成了～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;br&gt;—-《论语·卫灵公》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u524D_u8A00&quot;&gt;&lt;a href=&quot;#u524D_u8A00&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言
      
    
    </summary>
    
    
      <category term="golang" scheme="http://www.jcsama.com/tags/golang/"/>
    
      <category term="ide" scheme="http://www.jcsama.com/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>java学习笔记[bean注解]</title>
    <link href="http://www.jcsama.com/2018/03/30/java/java-bean/"/>
    <id>http://www.jcsama.com/2018/03/30/java/java-bean/</id>
    <published>2018-03-30T14:22:53.000Z</published>
    <updated>2021-08-09T06:15:05.367Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置…等等，这里对其作用做了笔记</p></blockquote><h1 id="Bean_u7684_u58F0_u660E"><a href="#Bean_u7684_u58F0_u660E" class="headerlink" title="Bean的声明"></a>Bean的声明</h1><ul><li>@Component 通用，无明确角色</li><li>@Repository. 数据访问层（Dao）层注解</li><li>@Controller  Controller层</li><li>@Service  业务逻辑Service层</li><li>@Configuration 配置文件</li></ul><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><h2 id="u4F5C_u7528_u57DF_u7C7B_u578B"><a href="#u4F5C_u7528_u57DF_u7C7B_u578B" class="headerlink" title="作用域类型"></a>作用域类型</h2><p>@Scope(“single”)    </p><ul><li>single          每个IOC容器对一个bean定义创建唯一实例 </li><li>prototype    对一个bean定义，每次请求容器都会创建新的实例 </li><li>session         对一个bean定义，一次web会话创建一个实例 </li><li>request            对一个bean定义，一次web请求会创建一个实例 </li><li>global session    对一个bean定义，一次porlet会话创建一个实例 </li></ul><h2 id="u4EE3_u7406"><a href="#u4EE3_u7406" class="headerlink" title="代理"></a>代理</h2><p>scoped-proxy的意义在关联bean之间的依赖<br>proxy，它代理的工作就是——暴露这个bean时令其符合其作用域的特性。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br></pre></td></tr></table></figure><p>能够在HTTP request或者Session（甚至自定义）作用域中定义bean固然很好，但是Spring IoC容器除了管理对象（bean）的实例化，同时还负责协作者（或者叫依赖）的实例化。<br>如果你打算将一个Http request范围的bean注入到另一个bean中，那么需要注入一个AOP代理来替代被注入的作用域bean。<br>也就是说，你需要注入一个代理对象，该对象具有与被代理对象一样的公共接口，而容器则可以足够智能的从相关作用域中（比如一个HTTP request）获取到真实的目标对象，并把方法调用委派给实际的对象。</p><p>proxyMode：代理方式</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">取值说明：  </span><br><span class="line"><span class="keyword">ScopedProxyMode.DEFAULT: </span>          默认  </span><br><span class="line"><span class="keyword">ScopedProxyMode.NO: </span>               不使用代理</span><br><span class="line"><span class="keyword">ScopedProxyMode.INTERFACES: </span>       接口    ---<span class="keyword">jdk动态代理</span></span><br><span class="line"><span class="keyword">ScopedProxyMode.TARGET_CLASS: </span>     类      ---cglib</span><br></pre></td></tr></table></figure><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>@Bean<br>配置Bean</p><h1 id="Bean_u7684_u6CE8_u5165"><a href="#Bean_u7684_u6CE8_u5165" class="headerlink" title="Bean的注入"></a>Bean的注入</h1><ul><li>@Autowired          Spring 提供的注解 .    (required=false)非必要注入，找不到不会报错</li><li>@Resource           JSR-250提供的注解.    </li><li>@Inject                JSR-330提供的注解</li></ul><h2 id="u533A_u522B"><a href="#u533A_u522B" class="headerlink" title="区别"></a>区别</h2><p>‘@Autowired’和‘@Inject’这两个注解行为完全相同，都是通过AutowiredAnnotation的BeanPostProcessor来实现依赖注入。也就是说，在注入Spring bean的时候‘Autowired’和‘@Inject’可以互换。</p><p>而‘@Resource’使用CommonAnnotationBeanPostProcessor来实现注入。虽然它使用的注入处理类不一样，但是其实所有这三个注解行为几乎一样。</p><p>下面是它们执行逻辑顺序的总结：</p><p><code>@Autowired和@Inject</code></p><p>按照类型匹配<br>使用限定符进行类型限定<br>按照名称匹配</p><p><code>@Resource</code></p><p>按照名称匹配<br>按照类型匹配<br>使用限定符进行类型限定（但如果名称匹配成功的话这条会被忽略）</p><p>Ps: 使用@Inject需要Jsr-303的支持，添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="List_2CMap_u7684_u6CE8_u5165"><a href="#List_2CMap_u7684_u6CE8_u5165" class="headerlink" title="List,Map的注入"></a>List,Map的注入</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    @Autowired</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">List</span>&lt;Bean&gt; <span class="keyword">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="Qualifier"></a>Qualifier</h2><p>限定符</p><h1 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h1><p>@Required注解适用于bean属性的setter方法并且它指示，受影响的bean属性必须在配置时被填充在XML配置文件中，否则容器将抛出BeanInitializationException例外。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    @Required</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Demo2 &#123;</span><br><span class="line">    @Autowired(value=<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> Demo demo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Meta-annotations_u5143_u6CE8_u89E3"><a href="#Meta-annotations_u5143_u6CE8_u89E3" class="headerlink" title="Meta-annotations元注解"></a>Meta-annotations元注解</h1><ul><li><p>@Retention：</p><p>可以设置三种值RetentionPolicy.CLASS、RentionPolicy.RUNTIME、RentionPolicy.SOURCE，表明描述注解的生命周期，即注解的生效范围，分别是：<br> 1.SOURCE：在源文件中生效，仅存在java文件中，class文件将会去除注解。</p><p> 2.CLASS：在class文件中生效，仅保留在class文件中，运行时无法获取注解。</p><p> 3.RUNTIME:在运行时生效，保留在class文件中且运行时可通过反射机制获取。</p></li><li><p>@Target：</p><p>表示该新定义Annotation的作用目标，具体可参考API文档。<br>  1.CONSTRUCTOR:用于描述构造器</p><p>  2.FIELD:用于描述域（成员变量）</p><p>  3.LOCAL_VARIABLE:用于描述局部变量</p><p>  4.METHOD:用于描述方法</p><p>  5.PACKAGE:用于描述包</p><p>  6.PARAMETER:用于描述参数</p><p>  7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p></li><li><p>@Documented</p><p>表示该新定义Annotation是否保留在Java Docs中。</p></li><li><p>@Inherited</p><p>表示使用该新定义Annotation可以继承。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;java的注解可以实现很多功能，如类的声明，属性声明，注入声明，配置…等等，这里对其作用做了笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Bean_u7684_u58F0_u660E&quot;&gt;&lt;a href=&quot;#Bean_u7684_u58F
      
    
    </summary>
    
      <category term="java" scheme="http://www.jcsama.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.jcsama.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>php-config</title>
    <link href="http://www.jcsama.com/2016/10/14/php/php-config/"/>
    <id>http://www.jcsama.com/2016/10/14/php/php-config/</id>
    <published>2016-10-14T09:39:00.000Z</published>
    <updated>2021-08-09T06:15:05.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>php配置</p></blockquote><h1 id="PHP_config"><a href="#PHP_config" class="headerlink" title="PHP config"></a>PHP config</h1><h2 id="u9690_u85CFphp_u7248_u672C_u53F7"><a href="#u9690_u85CFphp_u7248_u672C_u53F7" class="headerlink" title="隐藏php版本号"></a>隐藏php版本号</h2><p>通常没经验修改配置的php服务，在请求结束时返回的Response头中会带有php的版本信息，如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cache</span>-control:<span class="keyword">no</span>-<span class="keyword">cache</span></span><br><span class="line"><span class="keyword">Connection</span>:<span class="keyword">keep</span>-alive</span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Type</span>:<span class="built_in">text</span>/html; charset=UTF-8</span><br><span class="line">date:Fri, 14 Oct 2016 09:44:22 GMT</span><br><span class="line">Server:nginx</span><br><span class="line">Transfer-Encoding:chunked</span><br><span class="line">X-Powered-By:PHP/5.6.16</span><br></pre></td></tr></table></figure><p>我们想隐藏掉<code>X-Powered-By:PHP/5.6.16</code>只需修改一个地方：php.ini中的<code>expose_php</code>,把<code>On</code>改为<code>Off</code>即可</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">expose_php</span> = <span class="literal">Off</span></span><br></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cache</span>-control:<span class="keyword">no</span>-<span class="keyword">cache</span></span><br><span class="line"><span class="keyword">Connection</span>:<span class="keyword">keep</span>-alive</span><br><span class="line"><span class="keyword">Content</span>-<span class="keyword">Type</span>:<span class="built_in">text</span>/html; charset=UTF-8</span><br><span class="line">date:Fri, 14 Oct 2016 09:46:31 GMT</span><br><span class="line">Server:nginx</span><br><span class="line">Transfer-Encoding:chunked</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;php配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;PHP_config&quot;&gt;&lt;a href=&quot;#PHP_config&quot; class=&quot;headerlink&quot; title=&quot;PHP config&quot;&gt;&lt;/a&gt;PHP config&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="php" scheme="http://www.jcsama.com/categories/php/"/>
    
    
      <category term="php" scheme="http://www.jcsama.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>linux-find</title>
    <link href="http://www.jcsama.com/2016/07/04/linux/linux-find/"/>
    <id>http://www.jcsama.com/2016/07/04/linux/linux-find/</id>
    <published>2016-07-04T07:02:12.000Z</published>
    <updated>2021-08-09T06:15:05.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。</p></blockquote><h2 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="builtin-name">find</span> path -option [ -<span class="builtin-name">print</span> ] [ -exec -ok command ] &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>下边列举常用的一些条件</p><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>查找单个目录：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ <span class="builtin-name">find</span> /tmp</span><br></pre></td></tr></table></figure><p>查找多个目录:</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ find <span class="string">/tmp</span> <span class="string">/opt</span> <span class="string">/etc</span></span><br></pre></td></tr></table></figure><h2 id="option"><a href="#option" class="headerlink" title="option"></a>option</h2><h3 id="u6309_u6863_u6848_u540D"><a href="#u6309_u6863_u6848_u540D" class="headerlink" title="按档案名"></a>按档案名</h3><p>查找后缀为<code>.md</code> 的档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -name "*.<span class="built_in">md</span>"</span><br></pre></td></tr></table></figure><p>查找后缀为<code>.md</code>的档案，并不区分大小写(可以是<code>.MD</code>,<code>.Md</code>,<code>.mD</code>)</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -iname "*.<span class="built_in">md</span>"</span><br></pre></td></tr></table></figure><h3 id="u6309_u6863_u6848_u7C7B_u578B"><a href="#u6309_u6863_u6848_u7C7B_u578B" class="headerlink" title="按档案类型"></a>按档案类型</h3><p>文件夹</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure><p>符号连接</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> l</span><br></pre></td></tr></table></figure><p>一般档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure><p>字形装置</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> c</span><br></pre></td></tr></table></figure><p>区块装置</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> b</span><br></pre></td></tr></table></figure><p>具名贮列</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> p</span><br></pre></td></tr></table></figure><p>socket</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">type</span> s</span><br></pre></td></tr></table></figure><h3 id="u65F6_u95F4"><a href="#u65F6_u95F4" class="headerlink" title="时间"></a>时间</h3><p>类型</p><ul><li>a (access) 访问时间</li><li>c (change) 状态改变时间(如修改,chmod,chown)</li><li>m (modification) 修改时间</li></ul><p>单位</p><ul><li>min 以分钟为单位  </li><li>time 以天为单位  </li></ul><p>量</p><ul><li>-n  在n单位时间内  </li><li>+n  在n单位时间前  </li><li>n   在n单位时间中  </li></ul><p>在n分钟前被访问|修改|改变过的档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -amin +n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -mmin +n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -cmin +n</span><br></pre></td></tr></table></figure><p>在n分钟内被访问|修改|改变过的档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -amin -n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -mmin -n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -cmin -n</span><br></pre></td></tr></table></figure><p>在前n分钟被访问|修改|改变过的档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -amin n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -mmin n</span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -cmin n</span><br></pre></td></tr></table></figure><p>最近[n天内|n天前|前n天]被访问|修改|改变过的档案</p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> path -atime [-<span class="built_in">n</span>|+<span class="built_in">n</span>|<span class="built_in">n</span>]</span><br><span class="line">$ <span class="built_in">find</span> path -mtime [-<span class="built_in">n</span>|+<span class="built_in">n</span>|<span class="built_in">n</span>]</span><br><span class="line">$ <span class="built_in">find</span> path -ctime [-<span class="built_in">n</span>|+<span class="built_in">n</span>|<span class="built_in">n</span>]</span><br></pre></td></tr></table></figure><p>比file档案更晚被访问|修改|改变过的档案</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">find</span> path -anewer <span class="keyword">file</span></span><br><span class="line">$ <span class="keyword">find</span> path -mnewer <span class="keyword">file</span></span><br><span class="line">$ <span class="keyword">find</span> path -<span class="keyword">cnewer</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure><h3 id="u8DEF_u5F84"><a href="#u8DEF_u5F84" class="headerlink" title="路径"></a>路径</h3><p>路径中含有path</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -<span class="built_in">path</span> "*<span class="built_in">path</span>*"</span><br></pre></td></tr></table></figure><p>路径含有path并不区分大小写</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -ipath "*<span class="built_in">PATH</span>*"</span><br></pre></td></tr></table></figure><h3 id="u5927_u5C0F"><a href="#u5927_u5C0F" class="headerlink" title="大小"></a>大小</h3><p>查找大于nk,小于nk的档案</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> path -<span class="built_in">size</span> +nk</span><br><span class="line">$ <span class="built_in">find</span> path -<span class="built_in">size</span> -nk</span><br></pre></td></tr></table></figure><p>空档案</p><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -empty</span><br></pre></td></tr></table></figure><h3 id="u6743_u9650"><a href="#u6743_u9650" class="headerlink" title="权限"></a>权限</h3><p>mode的值 对应3种用户(所属用户，所属组，其他)的rwx权限 </p><ul><li>-mode 3种用户的权限都跟mode值对上，则成功（如644对444|644）</li><li>+mode 3种用户的权限只要有一个对上，则成功（如644能对622等）</li><li>mode 3种用户的权限都要跟mode准确对上才成功（如222对222）</li></ul><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -perm -<span class="built_in">mode</span></span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -perm +<span class="built_in">mode</span></span><br><span class="line">$ <span class="built_in">find</span> <span class="built_in">path</span> -perm <span class="built_in">mode</span></span><br></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>需要对搜索结果执行shell命令则用<code>-exec</code>,如</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ find / -<span class="keyword">type</span> f -exec ls -lah &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>把小于2k的文件搬到/tmp目录</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">find</span> path -<span class="built_in">size</span> <span class="number">-2</span>k -exec mv &#123;&#125; /tmp \;</span><br></pre></td></tr></table></figure><p>找出档案名含有’abc’ 的普通档案</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">find</span> path -name <span class="string">'*abc*'</span> -<span class="built_in">type</span> <span class="keyword">f</span> </span><br><span class="line">$ <span class="keyword">find</span> -<span class="built_in">type</span> <span class="keyword">f</span> | <span class="keyword">grep</span> <span class="keyword">abc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;find是linux 命令，它将档案系统内符合 expression 的档案列出来。你可以指要档案的名称、类别、时间、大小、权限等不同资讯的组合，只有完全相符的才会被列出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u8BED_u6CD
      
    
    </summary>
    
      <category term="linux" scheme="http://www.jcsama.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.jcsama.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux-nohup</title>
    <link href="http://www.jcsama.com/2016/07/02/linux/linux-nohup/"/>
    <id>http://www.jcsama.com/2016/07/02/linux/linux-nohup/</id>
    <published>2016-07-02T09:33:25.000Z</published>
    <updated>2021-08-09T06:15:05.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程</p></blockquote><h2 id="u529F_u80FD"><a href="#u529F_u80FD" class="headerlink" title="功能"></a>功能</h2><p>nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 &amp; （ 表示“and”的符号）到命令的尾部。<br>如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 <code>nohup.out</code> 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。</p><h2 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">$ nohup Command <span class="comment">[ Arg ... ]</span> <span class="comment">[　&amp; ]</span></span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ nohup php <span class="keyword">test</span>.php &amp;</span><br><span class="line">$ nohup php <span class="keyword">test</span>.php &gt;~/<span class="keyword">outFile</span>.<span class="keyword">out</span> 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><ul><li>0 – stdin (standard input)</li><li>1 – stdout (standard output)</li><li>2 – stderr (standard error)  </li></ul><p>2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到myout.file文件中。</p><h2 id="u67E5_u770B_u4EFB_u52A1_u5217_u8868"><a href="#u67E5_u770B_u4EFB_u52A1_u5217_u8868" class="headerlink" title="查看任务列表"></a>查看任务列表</h2><p>用<code>jobs</code>可以看到正在运行的任务</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">$ jobs                                                                                                                   </span><br><span class="line">[<span class="number">1</span>]  + running    nohup php test.php &gt; ~/outFile.out <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="u5173_u95ED_u4EFB_u52A1"><a href="#u5173_u95ED_u4EFB_u52A1" class="headerlink" title="关闭任务"></a>关闭任务</h2><p>n为任务号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">fg</span> %n</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;nohup(no hang up) 即不挂机，在关闭终端或退出账户时，仍不关闭进程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u529F_u80FD&quot;&gt;&lt;a href=&quot;#u529F_u80FD&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="linux" scheme="http://www.jcsama.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.jcsama.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下配置lnmp</title>
    <link href="http://www.jcsama.com/2016/06/19/linux/linux-lnmp/"/>
    <id>http://www.jcsama.com/2016/06/19/linux/linux-lnmp/</id>
    <published>2016-06-19T14:10:25.000Z</published>
    <updated>2021-08-09T06:15:05.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境：Ubuntu Linux 14.04</p></blockquote><h1 id="u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668"><a href="#u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668" class="headerlink" title="安装软件仓库管理器"></a>安装软件仓库管理器</h1><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="built_in">get</span> install python-software-<span class="built_in">properties</span>;</span><br></pre></td></tr></table></figure><h1 id="u5B89_u88C5PHP"><a href="#u5B89_u88C5PHP" class="headerlink" title="安装PHP"></a>安装PHP</h1><h2 id="u5B89_u88C5php_u53CA_u6269_u5C55"><a href="#u5B89_u88C5php_u53CA_u6269_u5C55" class="headerlink" title="安装php及扩展"></a>安装php及扩展</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-software-properties;</span><br><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>ppa:ondrej/php5-5.6;</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install php5-fpm php5-cli php5-curl php5-gd php5-json php5-mcrypt php5-mysqlnd php5-memcache php5-redis php5-xdebug;</span><br></pre></td></tr></table></figure><p>查看版本信息</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">   $ php5-fpm -vPHP <span class="number">5.6</span><span class="number">.22</span><span class="number">-1</span>+donate.sury.org~trusty+<span class="number">1</span> (fpm-fcgi)Copyright (c) <span class="number">1997</span><span class="number">-2016</span> The PHP GroupZend Engine v2<span class="number">.6</span><span class="number">.0</span>, Copyright (c) <span class="number">1998</span><span class="number">-2016</span> Zend Technologies    with Zend OPcache v7<span class="number">.0</span><span class="number">.6</span>-dev, Copyright (c) <span class="number">1999</span><span class="number">-2016</span>, by Zend Technologies    with Xdebug v2<span class="number">.3</span><span class="number">.3</span>, Copyright (c) <span class="number">2002</span><span class="number">-2015</span>, by Derick Rethans</span><br></pre></td></tr></table></figure><h2 id="u5E38_u7528_u547D_u4EE4"><a href="#u5E38_u7528_u547D_u4EE4" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F"><a href="#u5173_u95ED_uFF0C_u5F00_u542F_uFF0C_u91CD_u542F" class="headerlink" title="关闭，开启，重启"></a>关闭，开启，重启</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> service </span>php5-fpm stop </span><br><span class="line">$ sudo<span class="built_in"> service </span>php5-fpm start</span><br><span class="line">$ sudo<span class="built_in"> service </span>php5-fpm restart</span><br></pre></td></tr></table></figure><h2 id="u5B89_u88C5composer"><a href="#u5B89_u88C5composer" class="headerlink" title="安装composer"></a>安装composer</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo apt-get install curl</span><br><span class="line"><span class="variable">$ </span>sudo curl -sS <span class="symbol">https:</span>/<span class="regexp">/getcomposer.org/installer</span> | php</span><br><span class="line"><span class="variable">$ </span>sudo mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure><h1 id="u5B89_u88C5Nginx"><a href="#u5B89_u88C5Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><h2 id="u5B89_u88C5Nginx-1"><a href="#u5B89_u88C5Nginx-1" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>ppa:nginx/stable;</span><br><span class="line">$ sudo apt-get update;</span><br><span class="line">$ sudo apt-get install nginx;</span><br></pre></td></tr></table></figure><p>查看版本信息</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo nginx -v</span><br></pre></td></tr></table></figure><h2 id="u5E38_u7528_u547D_u4EE4-1"><a href="#u5E38_u7528_u547D_u4EE4-1" class="headerlink" title="常用命令"></a>常用命令</h2><p>启动 ，关闭，重启，配置重载</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> service </span>nginx start</span><br><span class="line">$ sudo<span class="built_in"> service </span>nginx stop</span><br><span class="line">$ sudo<span class="built_in"> service </span>nginx restart</span><br><span class="line">$ sudo<span class="built_in"> service </span>nginx reload</span><br></pre></td></tr></table></figure><h1 id="u5B89_u88C5mysql"><a href="#u5B89_u88C5mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">$ sudo<span class="built_in"> add-apt-repository </span>-y ppa:ondrej/mysql-5.6</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get -y install mysql-server</span><br></pre></td></tr></table></figure><p>登陆mysql创建账号</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ mysql -u root </span><br><span class="line">mysql&gt;create database wordpress;</span><br><span class="line">mysql&gt;grant all privileges on *.* to jceee identified by <span class="string">'123456'</span>;</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">mysql&gt;<span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><h1 id="u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883"><a href="#u4F7F_u7528wordpress_u6D4B_u8BD5_u73AF_u5883" class="headerlink" title="使用wordpress测试环境"></a>使用wordpress测试环境</h1><h2 id="u5B89_u88C5git"><a href="#u5B89_u88C5git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure><h2 id="u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939"><a href="#u521B_u5EFA_u9879_u76EE_u6587_u4EF6_u5939" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/htdocs/</span><br></pre></td></tr></table></figure><h2 id="u4E0B_u8F7Dwordpress"><a href="#u4E0B_u8F7Dwordpress" class="headerlink" title="下载wordpress"></a>下载wordpress</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/WordPress/WordPress /<span class="keyword">opt</span>/htdocs/wordpress</span><br><span class="line">$ sudo chown -R www-data /<span class="keyword">opt</span>/htdocs</span><br></pre></td></tr></table></figure><h2 id="u589E_u52A0Nginx_u914D_u7F6E"><a href="#u589E_u52A0Nginx_u914D_u7F6E" class="headerlink" title="增加Nginx配置"></a>增加Nginx配置</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="keyword">vi</span> /etc/nginx/<span class="keyword">conf</span>.d/wordpress.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><p>写入以下内容，保存并重载Nginx配置</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;    <span class="attribute">listen</span> <span class="number">80</span>;    <span class="attribute">server_name</span> www.wordpress.com;    <span class="attribute">root</span> /opt/htdocs/wordpress;    <span class="attribute">index</span> index.html index.php;    <span class="attribute">location</span> / &#123;        <span class="attribute">index</span> index.html index.php;    &#125;    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">            <span class="attribute">include</span> fastcgi.conf;                  </span><br><span class="line">            <span class="attribute">fastcgi_pass</span> unix:/var/run/php5-fpm.sock;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果php-fpm是以TPC/IP    方式监听,如127.0.0.1:9000，则把上方</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">fastcgi_pass unix:/var/<span class="keyword">run</span><span class="bash">/php5-fpm.sock;</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">fastcgi_pass</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:9000</span>;</span><br></pre></td></tr></table></figure><h2 id="u4FEE_u6539hosts"><a href="#u4FEE_u6539hosts" class="headerlink" title="修改hosts"></a>修改hosts</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure><p>增加以下内容并保存退出</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> www.wordpress.com</span><br></pre></td></tr></table></figure><h2 id="u6D4B_u8BD5"><a href="#u6D4B_u8BD5" class="headerlink" title="测试"></a>测试</h2><p>在浏览器输入</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//www.wordpress.com</span></span><br></pre></td></tr></table></figure><p>看访问结果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;环境：Ubuntu Linux 14.04&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;u5B89_u88C5_u8F6F_u4EF6_u4ED3_u5E93_u7BA1_u7406_u5668&quot;&gt;&lt;a href=&quot;#u5B89_u88C5
      
    
    </summary>
    
      <category term="linux" scheme="http://www.jcsama.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.jcsama.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql[ON DUPLICE KEY UPDATE]</title>
    <link href="http://www.jcsama.com/2016/06/10/mysql/mysql-on-duplice-key-update/"/>
    <id>http://www.jcsama.com/2016/06/10/mysql/mysql-on-duplice-key-update/</id>
    <published>2016-06-10T09:37:51.000Z</published>
    <updated>2021-08-09T06:15:05.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ON_DUPLICE_KEY_UPDATE"><a href="#ON_DUPLICE_KEY_UPDATE" class="headerlink" title="ON DUPLICE KEY UPDATE"></a>ON DUPLICE KEY UPDATE</h2><p>[ON DUPLICE KEY UPDATE] 用于INSERT语句后面，作用是在执行INSERT时，若UNIQUE索引或者PRIMARY KEY出现重复时，则在出现重复值的行执行UPDATE，否则按正常INSERT语句执行.</p><h2 id="u6D4B_u8BD5_u8868"><a href="#u6D4B_u8BD5_u8868" class="headerlink" title="测试表"></a>测试表</h2><p>表结构：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `news` (</span><br><span class="line">  `id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `title` varchar(70) COLLATE utf8_unicode_ci<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  `body` longtext COLLATE utf8_unicode_ci,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8 <span class="attribute">COLLATE</span>=utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p>其中<code>id</code>为PRIMARY KEY<br>表数据：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM news;</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br><span class="line">| id | title  | body  |</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br><span class="line">|  1 | title1 | NULL  |</span><br><span class="line">|  2 | title2 | body2 |</span><br><span class="line">| 12 | title1 | body3 |</span><br><span class="line">| 13 | title1 | body4 |</span><br><span class="line">| 14 | NULL   | body5 |</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br></pre></td></tr></table></figure><h2 id="u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E"><a href="#u63D2_u5165_u4E00_u6761_u91CD_u590D_u6570_u636E" class="headerlink" title="插入一条重复数据"></a>插入一条重复数据</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`news`</span> (<span class="symbol">`id`</span>,<span class="symbol">`title`</span>,<span class="symbol">`body`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'titleTest'</span>,<span class="string">'bodyTest'</span>) <span class="keyword">ON</span> DUPLICATE <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="symbol">`title`</span>= <span class="keyword">VALUES</span>(<span class="symbol">`title`</span>),<span class="symbol">`body`</span>=<span class="keyword">VALUES</span>(<span class="symbol">`body`</span>);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>show data:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM news;</span><br><span class="line"><span class="code">+----+</span>-----------<span class="code">+----------+</span></span><br><span class="line">| id | title     | body     |</span><br><span class="line"><span class="code">+----+</span>-----------<span class="code">+----------+</span></span><br><span class="line">|  1 | titleTest | bodyTest |</span><br><span class="line">|  2 | title2    | body2    |</span><br><span class="line">| 12 | title1    | body3    |</span><br><span class="line">| 13 | title1    | body4    |</span><br><span class="line">| 14 | NULL      | body5    |</span><br><span class="line"><span class="code">+----+</span>-----------<span class="code">+----------+</span></span><br></pre></td></tr></table></figure><h2 id="u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E"><a href="#u63D2_u5165_u591A_u6761_u91CD_u590D_u6570_u636E" class="headerlink" title="插入多条重复数据"></a>插入多条重复数据</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`news`</span> (<span class="symbol">`id`</span>,<span class="symbol">`title`</span>,<span class="symbol">`body`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>,<span class="string">'titleTest'</span>,<span class="string">'bodyTest'</span>),(<span class="string">'2'</span>,<span class="string">'titleTest2'</span>,<span class="string">'bodyTest2'</span>),(<span class="string">'3'</span>,<span class="string">'titleTest3'</span>,<span class="string">'bodyTest3'</span>) <span class="keyword">ON</span> DUPLICATE <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="symbol">`title`</span>= <span class="keyword">VALUES</span>(<span class="symbol">`title`</span>),<span class="symbol">`body`</span>=<span class="keyword">VALUES</span>(<span class="symbol">`body`</span>);</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>show data:</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM news;                                                                                                                                                           +----+------------+-----------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> title      </span>|<span class="string"> body      </span>|</span><br><span class="line">+----+------------+-----------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> titleTest  </span>|<span class="string"> bodyTest  </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> titleTest2 </span>|<span class="string"> bodyTest2 </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> titleTest3 </span>|<span class="string"> bodyTest3 </span>|</span><br><span class="line">|<span class="string"> 12 </span>|<span class="string"> title1     </span>|<span class="string"> body3     </span>|</span><br><span class="line">|<span class="string"> 13 </span>|<span class="string"> title1     </span>|<span class="string"> body4     </span>|</span><br><span class="line">|<span class="string"> 14 </span>|<span class="string"> NULL       </span>|<span class="string"> body5     </span>|</span><br><span class="line">+----+------------+-----------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>因为id3不存在，所以正常INSERT了1条数据，UPDATE了2条数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ON_DUPLICE_KEY_UPDATE&quot;&gt;&lt;a href=&quot;#ON_DUPLICE_KEY_UPDATE&quot; class=&quot;headerlink&quot; title=&quot;ON DUPLICE KEY UPDATE&quot;&gt;&lt;/a&gt;ON DUPLICE KEY UPDATE&lt;/
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.jcsama.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql 字符串函数</title>
    <link href="http://www.jcsama.com/2016/05/22/mysql/mysql-strimg/"/>
    <id>http://www.jcsama.com/2016/05/22/mysql/mysql-strimg/</id>
    <published>2016-05-22T14:58:20.000Z</published>
    <updated>2021-08-09T06:15:05.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="test_table"><a href="#test_table" class="headerlink" title="test table"></a>test table</h1><p>使用一个测试表：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from news ;</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br><span class="line">| id | title  | body  |</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br><span class="line">|  1 | title1 | NULL  |</span><br><span class="line">|  2 | title2 | body2 |</span><br><span class="line">| 12 | title1 | body3 |</span><br><span class="line">| 13 | title1 | body4 |</span><br><span class="line">| 14 | NULL   | body5 |</span><br><span class="line"><span class="code">+----+</span>--------<span class="code">+-------+</span></span><br></pre></td></tr></table></figure><h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><p>使用方法：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">CONCAT</span>(<span class="params">str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure><p>返回连接参数产生的字符串，如果任何一个参数为null，则返回值为NULL.</p><p>EXAMPLE:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat(id, <span class="emphasis">'-'</span>, title, <span class="emphasis">'-'</span>, body) from news ;</span><br><span class="line"><span class="code">+-----------------------------------+</span></span><br><span class="line">| concat(id, <span class="emphasis">'-'</span>, title, <span class="emphasis">'-'</span>, body) |</span><br><span class="line"><span class="code">+-----------------------------------+</span></span><br><span class="line">| NULL                              |</span><br><span class="line">| 2-title2-body2                    |</span><br><span class="line">| 12-title1-body3                   |</span><br><span class="line">| 13-title1-body4                   |</span><br><span class="line">| NULL                              |</span><br><span class="line"><span class="code">+-----------------------------------+</span></span><br></pre></td></tr></table></figure><h1 id="concat_ws"><a href="#concat_ws" class="headerlink" title="concat_ws"></a>concat_ws</h1><p>使用方法：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">CONCAT_WS</span>(<span class="params">separator,str1,str2,...</span>)</span></span><br></pre></td></tr></table></figure><p>concat_ws代表concat with separator通过分隔符separator将其他参数链接起来.当分隔符为NULL时，返回值为空；而当某个参数为空时，则跳过</p><p>EXAMPLE:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select concat<span class="emphasis">_ws('-', title, body) from news ;</span></span><br><span class="line"><span class="emphasis">+-----------------------------+</span></span><br><span class="line"><span class="emphasis">| concat_</span>ws(<span class="emphasis">'-'</span>, title, body) |</span><br><span class="line"><span class="code">+-----------------------------+</span></span><br><span class="line">| title1                      |</span><br><span class="line">| title2-body2                |</span><br><span class="line">| title1-body3                |</span><br><span class="line">| title1-body4                |</span><br><span class="line">| body5                       |</span><br><span class="line"><span class="code">+-----------------------------+</span></span><br></pre></td></tr></table></figure><h1 id="group_concat"><a href="#group_concat" class="headerlink" title="group_concat"></a>group_concat</h1><p>使用方法</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">GROUP_CONCAT([<span class="keyword">DISTINCT</span>] Field [<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">ASC</span>/<span class="keyword">DESC</span> SortField] [separator Separator])</span><br></pre></td></tr></table></figure><p>group_concat是把结果数据按字段Field连接起来，默认分隔符是<code>,</code>,可选排重[DISTINCT],可选排序[ORDER BY ASC/DESC SortField]按SortField字段排序,可选分隔符[separtor Separator]按Separator分隔。</p><p>EXAMPLE:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group<span class="emphasis">_concat(title) from news ;</span></span><br><span class="line"><span class="emphasis">+-----------------------------+</span></span><br><span class="line"><span class="emphasis">| group_</span>concat(title)         |</span><br><span class="line"><span class="code">+-----------------------------+</span></span><br><span class="line">| title1,title2,title1,title1 |</span><br><span class="line"><span class="code">+-----------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select group<span class="emphasis">_concat(distinct title order by id desc separator ';') from news ;</span></span><br><span class="line"><span class="emphasis">+-------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| group_</span>concat(distinct title order by id desc separator <span class="emphasis">';'</span>) |</span><br><span class="line"><span class="code">+-------------------------------------------------------------+</span></span><br><span class="line">| title2;title1                                               |</span><br><span class="line"><span class="code">+-------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select title,group<span class="emphasis">_concat(distinct body order by id desc separator ';') from news group by title;</span></span><br><span class="line"><span class="emphasis">+--------+------------------------------------------------------------+</span></span><br><span class="line"><span class="emphasis">| title  | group_</span>concat(distinct body order by id desc separator <span class="emphasis">';'</span>) |</span><br><span class="line"><span class="code">+--------+</span>------------------------------------------------------------+</span><br><span class="line">| NULL   | body5                                                      |</span><br><span class="line">| title1 | body4;body3                                                |</span><br><span class="line">| title2 | body2                                                      |</span><br><span class="line"><span class="code">+--------+</span>------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h1 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h1><p>使用方法</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">repeat</span><span class="params">(str, repeatTime)</span></span></span><br></pre></td></tr></table></figure><p>将str循环repeatTime次</p><p>EXAMPLE</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select repeat(<span class="emphasis">'test'</span>, 4);</span><br><span class="line"><span class="code">+-------------------+</span></span><br><span class="line">| repeat(<span class="emphasis">'test'</span>, 4) |</span><br><span class="line"><span class="code">+-------------------+</span></span><br><span class="line">| testtesttesttest  |</span><br><span class="line"><span class="code">+-------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select repeat(body, 4) from news;</span><br><span class="line"><span class="code">+----------------------+</span></span><br><span class="line">| repeat(body, 4)      |</span><br><span class="line"><span class="code">+----------------------+</span></span><br><span class="line">| NULL                 |</span><br><span class="line">| body2body2body2body2 |</span><br><span class="line">| body3body3body3body3 |</span><br><span class="line">| body4body4body4body4 |</span><br><span class="line">| body5body5body5body5 |</span><br><span class="line"><span class="code">+----------------------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;test_table&quot;&gt;&lt;a href=&quot;#test_table&quot; class=&quot;headerlink&quot; title=&quot;test table&quot;&gt;&lt;/a&gt;test table&lt;/h1&gt;&lt;p&gt;使用一个测试表：&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="mysql" scheme="http://www.jcsama.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://www.jcsama.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux-curl</title>
    <link href="http://www.jcsama.com/2016/04/10/linux/linux-curl/"/>
    <id>http://www.jcsama.com/2016/04/10/linux/linux-curl/</id>
    <published>2016-04-10T14:26:50.000Z</published>
    <updated>2021-08-09T06:15:05.368Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p></blockquote><h2 id="u83B7_u53D6url_u5185_u5BB9"><a href="#u83B7_u53D6url_u5185_u5BB9" class="headerlink" title="获取url内容"></a>获取url内容</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl url</span><br></pre></td></tr></table></figure><h2 id="u4FDD_u5B58_u5185_u5BB9"><a href="#u4FDD_u5B58_u5185_u5BB9" class="headerlink" title="保存内容"></a>保存内容</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -o filename url</span><br><span class="line"><span class="variable">$ </span>curl url &gt;&gt; filename</span><br></pre></td></tr></table></figure><h2 id="u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23"><a href="#u663E_u793A_u4E0B_u8F7D_u8FDB_u5EA6_u6761-_23" class="headerlink" title="显示下载进度条-#"></a>显示下载进度条<code>-#</code></h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -<span class="comment"># -o filename url</span></span><br></pre></td></tr></table></figure><h2 id="u83B7_u53D6response_header"><a href="#u83B7_u53D6response_header" class="headerlink" title="获取response header"></a>获取response header</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -i url</span><br></pre></td></tr></table></figure><h2 id="POST_u6570_u636E"><a href="#POST_u6570_u636E" class="headerlink" title="POST数据"></a>POST数据</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -d <span class="string">"key1=val1&amp;key2=val2"</span> url</span><br></pre></td></tr></table></figure><h2 id="PUT_u6587_u4EF6"><a href="#PUT_u6587_u4EF6" class="headerlink" title="PUT文件"></a>PUT文件</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">"fileUpload=@/Users/jceee/Pictures/default_avatar.jpeg"</span> \</span><br><span class="line"><span class="symbol"> http:</span><span class="comment">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure><h2 id="UserAgent"><a href="#UserAgent" class="headerlink" title="UserAgent"></a>UserAgent</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -A <span class="string">"USER AGENT"</span> URL</span><br></pre></td></tr></table></figure><h2 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a>COOKIE</h2><p>Cookie是服务器经常使用的一种记忆客户信息的方法。如果cookie被记录在了文件中，那么使用命令：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">$ curl -b stored_cookies_in_file \</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//local.creed.com</span></span><br></pre></td></tr></table></figure><p>可以通过请求登陆接口保存cookie文件：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">$ curl -c stored_cookies_in_file \</span><br><span class="line">-d  <span class="string">"user=username&amp;password=password"</span> \</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//local.creed.com/login</span></span><br></pre></td></tr></table></figure><h2 id="REFERER"><a href="#REFERER" class="headerlink" title="REFERER"></a>REFERER</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>curl -e <span class="symbol">http:</span>/<span class="regexp">/www.baidu.com http:/</span><span class="regexp">/local.creed.com/curl</span></span><br></pre></td></tr></table></figure><h2 id="u4EE3_u7406"><a href="#u4EE3_u7406" class="headerlink" title="代理"></a>代理</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ curl -x <span class="string">ip:</span>port <span class="string">http:</span><span class="comment">//local.creed.com/curl</span></span><br></pre></td></tr></table></figure><h2 id="u4F2A_u9020Ip"><a href="#u4F2A_u9020Ip" class="headerlink" title="伪造Ip"></a>伪造Ip</h2><p>仅限于用X-FORWARDED-FOR获取IP的地址</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">"X-FORWARDED-FOR:202.103.229.11"</span><span class="string">\</span></span><br><span class="line"> -H <span class="string">"CLIENT-IP:202.103.229.11"</span><span class="string">\</span></span><br><span class="line"> <span class="string">"http://local.creed.com/curl"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u83B7_u53D6url_u5
      
    
    </summary>
    
      <category term="linux" scheme="http://www.jcsama.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.jcsama.com/tags/linux/"/>
    
  </entry>
  
</feed>
